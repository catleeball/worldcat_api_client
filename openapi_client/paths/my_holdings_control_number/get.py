# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from openapi_client import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401

from . import path

# Header params
AcceptSchema = schemas.StrSchema
RequestRequiredHeaderParams = typing_extensions.TypedDict(
    'RequestRequiredHeaderParams',
    {
    }
)
RequestOptionalHeaderParams = typing_extensions.TypedDict(
    'RequestOptionalHeaderParams',
    {
        'Accept': typing.Union[AcceptSchema, str, ],
    },
    total=False
)


class RequestHeaderParams(RequestRequiredHeaderParams, RequestOptionalHeaderParams):
    pass


request_header_accept = api_client.HeaderParameter(
    name="Accept",
    style=api_client.ParameterStyle.SIMPLE,
    schema=AcceptSchema,
)
# Path params
ControlNumberSchema = schemas.StrSchema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'control-number': typing.Union[ControlNumberSchema, str, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_control_number = api_client.PathParameter(
    name="control-number",
    style=api_client.ParameterStyle.SIMPLE,
    schema=ControlNumberSchema,
    required=True,
)
_auth = [
    'worldcat_search_auth',
    'worldcat_search_auth',
]


class SchemaFor200ResponseBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        required = {
            "oclcNumber",
            "hasSharedPrintCommitment",
            "format",
            "lhrControlNumber",
            "lhrDateEntered",
            "lhrLastUpdated",
            "lendingPolicy",
        }
        
        class properties:
            lhrControlNumber = schemas.StrSchema
            lhrDateEntered = schemas.StrSchema
            lhrLastUpdated = schemas.StrSchema
            oclcNumber = schemas.StrSchema
            format = schemas.StrSchema
            
            
            class location(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        holdingLocation = schemas.StrSchema
                        sublocationCollection = schemas.StrSchema
                        shelvingLocation = schemas.StrSchema
                        __annotations__ = {
                            "holdingLocation": holdingLocation,
                            "sublocationCollection": sublocationCollection,
                            "shelvingLocation": shelvingLocation,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["holdingLocation"]) -> MetaOapg.properties.holdingLocation: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["sublocationCollection"]) -> MetaOapg.properties.sublocationCollection: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["shelvingLocation"]) -> MetaOapg.properties.shelvingLocation: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["holdingLocation", "sublocationCollection", "shelvingLocation", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["holdingLocation"]) -> typing.Union[MetaOapg.properties.holdingLocation, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["sublocationCollection"]) -> typing.Union[MetaOapg.properties.sublocationCollection, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["shelvingLocation"]) -> typing.Union[MetaOapg.properties.shelvingLocation, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["holdingLocation", "sublocationCollection", "shelvingLocation", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    holdingLocation: typing.Union[MetaOapg.properties.holdingLocation, str, schemas.Unset] = schemas.unset,
                    sublocationCollection: typing.Union[MetaOapg.properties.sublocationCollection, str, schemas.Unset] = schemas.unset,
                    shelvingLocation: typing.Union[MetaOapg.properties.shelvingLocation, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'location':
                    return super().__new__(
                        cls,
                        *_args,
                        holdingLocation=holdingLocation,
                        sublocationCollection=sublocationCollection,
                        shelvingLocation=shelvingLocation,
                        _configuration=_configuration,
                        **kwargs,
                    )
            copyNumber = schemas.StrSchema
            
            
            class callNumber(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        displayCallNumber = schemas.StrSchema
                        classificationPart = schemas.StrSchema
                        
                        
                        class itemParts(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'itemParts':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        shelvingControlNumber = schemas.StrSchema
                        
                        
                        class prefixes(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'prefixes':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        shelvingForm = schemas.StrSchema
                        
                        
                        class suffixes(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'suffixes':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        __annotations__ = {
                            "displayCallNumber": displayCallNumber,
                            "classificationPart": classificationPart,
                            "itemParts": itemParts,
                            "shelvingControlNumber": shelvingControlNumber,
                            "prefixes": prefixes,
                            "shelvingForm": shelvingForm,
                            "suffixes": suffixes,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["displayCallNumber"]) -> MetaOapg.properties.displayCallNumber: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["classificationPart"]) -> MetaOapg.properties.classificationPart: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["itemParts"]) -> MetaOapg.properties.itemParts: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["shelvingControlNumber"]) -> MetaOapg.properties.shelvingControlNumber: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["prefixes"]) -> MetaOapg.properties.prefixes: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["shelvingForm"]) -> MetaOapg.properties.shelvingForm: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["suffixes"]) -> MetaOapg.properties.suffixes: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["displayCallNumber", "classificationPart", "itemParts", "shelvingControlNumber", "prefixes", "shelvingForm", "suffixes", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["displayCallNumber"]) -> typing.Union[MetaOapg.properties.displayCallNumber, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["classificationPart"]) -> typing.Union[MetaOapg.properties.classificationPart, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["itemParts"]) -> typing.Union[MetaOapg.properties.itemParts, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["shelvingControlNumber"]) -> typing.Union[MetaOapg.properties.shelvingControlNumber, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["prefixes"]) -> typing.Union[MetaOapg.properties.prefixes, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["shelvingForm"]) -> typing.Union[MetaOapg.properties.shelvingForm, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["suffixes"]) -> typing.Union[MetaOapg.properties.suffixes, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["displayCallNumber", "classificationPart", "itemParts", "shelvingControlNumber", "prefixes", "shelvingForm", "suffixes", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    displayCallNumber: typing.Union[MetaOapg.properties.displayCallNumber, str, schemas.Unset] = schemas.unset,
                    classificationPart: typing.Union[MetaOapg.properties.classificationPart, str, schemas.Unset] = schemas.unset,
                    itemParts: typing.Union[MetaOapg.properties.itemParts, list, tuple, schemas.Unset] = schemas.unset,
                    shelvingControlNumber: typing.Union[MetaOapg.properties.shelvingControlNumber, str, schemas.Unset] = schemas.unset,
                    prefixes: typing.Union[MetaOapg.properties.prefixes, list, tuple, schemas.Unset] = schemas.unset,
                    shelvingForm: typing.Union[MetaOapg.properties.shelvingForm, str, schemas.Unset] = schemas.unset,
                    suffixes: typing.Union[MetaOapg.properties.suffixes, list, tuple, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'callNumber':
                    return super().__new__(
                        cls,
                        *_args,
                        displayCallNumber=displayCallNumber,
                        classificationPart=classificationPart,
                        itemParts=itemParts,
                        shelvingControlNumber=shelvingControlNumber,
                        prefixes=prefixes,
                        shelvingForm=shelvingForm,
                        suffixes=suffixes,
                        _configuration=_configuration,
                        **kwargs,
                    )
            lendingPolicy = schemas.StrSchema
            
            
            class hasSharedPrintCommitment(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Y": "Y",
                        "N": "N",
                    }
                
                @schemas.classproperty
                def Y(cls):
                    return cls("Y")
                
                @schemas.classproperty
                def N(cls):
                    return cls("N")
            
            
            class sharedPrintCommitments(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                actionNote = schemas.StrSchema
                                materialsSpecified = schemas.StrSchema
                                institution = schemas.StrSchema
                                dateOfAction = schemas.StrSchema
                                commitmentExpirationDate = schemas.StrSchema
                                authorization = schemas.StrSchema
                                methodOfAction = schemas.StrSchema
                                siteOfAction = schemas.StrSchema
                                status = schemas.StrSchema
                                uri = schemas.StrSchema
                                publicNote = schemas.StrSchema
                                __annotations__ = {
                                    "actionNote": actionNote,
                                    "materialsSpecified": materialsSpecified,
                                    "institution": institution,
                                    "dateOfAction": dateOfAction,
                                    "commitmentExpirationDate": commitmentExpirationDate,
                                    "authorization": authorization,
                                    "methodOfAction": methodOfAction,
                                    "siteOfAction": siteOfAction,
                                    "status": status,
                                    "uri": uri,
                                    "publicNote": publicNote,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["actionNote"]) -> MetaOapg.properties.actionNote: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["materialsSpecified"]) -> MetaOapg.properties.materialsSpecified: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["institution"]) -> MetaOapg.properties.institution: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["dateOfAction"]) -> MetaOapg.properties.dateOfAction: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["commitmentExpirationDate"]) -> MetaOapg.properties.commitmentExpirationDate: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["authorization"]) -> MetaOapg.properties.authorization: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["methodOfAction"]) -> MetaOapg.properties.methodOfAction: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["siteOfAction"]) -> MetaOapg.properties.siteOfAction: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["publicNote"]) -> MetaOapg.properties.publicNote: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["actionNote", "materialsSpecified", "institution", "dateOfAction", "commitmentExpirationDate", "authorization", "methodOfAction", "siteOfAction", "status", "uri", "publicNote", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["actionNote"]) -> typing.Union[MetaOapg.properties.actionNote, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["materialsSpecified"]) -> typing.Union[MetaOapg.properties.materialsSpecified, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["institution"]) -> typing.Union[MetaOapg.properties.institution, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["dateOfAction"]) -> typing.Union[MetaOapg.properties.dateOfAction, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["commitmentExpirationDate"]) -> typing.Union[MetaOapg.properties.commitmentExpirationDate, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["authorization"]) -> typing.Union[MetaOapg.properties.authorization, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["methodOfAction"]) -> typing.Union[MetaOapg.properties.methodOfAction, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["siteOfAction"]) -> typing.Union[MetaOapg.properties.siteOfAction, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["uri"]) -> typing.Union[MetaOapg.properties.uri, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["publicNote"]) -> typing.Union[MetaOapg.properties.publicNote, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["actionNote", "materialsSpecified", "institution", "dateOfAction", "commitmentExpirationDate", "authorization", "methodOfAction", "siteOfAction", "status", "uri", "publicNote", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            actionNote: typing.Union[MetaOapg.properties.actionNote, str, schemas.Unset] = schemas.unset,
                            materialsSpecified: typing.Union[MetaOapg.properties.materialsSpecified, str, schemas.Unset] = schemas.unset,
                            institution: typing.Union[MetaOapg.properties.institution, str, schemas.Unset] = schemas.unset,
                            dateOfAction: typing.Union[MetaOapg.properties.dateOfAction, str, schemas.Unset] = schemas.unset,
                            commitmentExpirationDate: typing.Union[MetaOapg.properties.commitmentExpirationDate, str, schemas.Unset] = schemas.unset,
                            authorization: typing.Union[MetaOapg.properties.authorization, str, schemas.Unset] = schemas.unset,
                            methodOfAction: typing.Union[MetaOapg.properties.methodOfAction, str, schemas.Unset] = schemas.unset,
                            siteOfAction: typing.Union[MetaOapg.properties.siteOfAction, str, schemas.Unset] = schemas.unset,
                            status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
                            uri: typing.Union[MetaOapg.properties.uri, str, schemas.Unset] = schemas.unset,
                            publicNote: typing.Union[MetaOapg.properties.publicNote, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                actionNote=actionNote,
                                materialsSpecified=materialsSpecified,
                                institution=institution,
                                dateOfAction=dateOfAction,
                                commitmentExpirationDate=commitmentExpirationDate,
                                authorization=authorization,
                                methodOfAction=methodOfAction,
                                siteOfAction=siteOfAction,
                                status=status,
                                uri=uri,
                                publicNote=publicNote,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sharedPrintCommitments':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            summary = schemas.StrSchema
            
            
            class holdingParts(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                linkingAndSequenceNumber = schemas.StrSchema
                                summaryOfHoldings = schemas.StrSchema
                                
                                
                                class enumerations(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        
                                        class items(
                                            schemas.DictSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                
                                                class properties:
                                                    caption = schemas.StrSchema
                                                    value = schemas.StrSchema
                                                    __annotations__ = {
                                                        "caption": caption,
                                                        "value": value,
                                                    }
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["caption"]) -> MetaOapg.properties.caption: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                            
                                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["caption", "value", ], str]):
                                                # dict_instance[name] accessor
                                                return super().__getitem__(name)
                                            
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["caption"]) -> typing.Union[MetaOapg.properties.caption, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> typing.Union[MetaOapg.properties.value, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                            
                                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["caption", "value", ], str]):
                                                return super().get_item_oapg(name)
                                            
                                        
                                            def __new__(
                                                cls,
                                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                                caption: typing.Union[MetaOapg.properties.caption, str, schemas.Unset] = schemas.unset,
                                                value: typing.Union[MetaOapg.properties.value, str, schemas.Unset] = schemas.unset,
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                            ) -> 'items':
                                                return super().__new__(
                                                    cls,
                                                    *_args,
                                                    caption=caption,
                                                    value=value,
                                                    _configuration=_configuration,
                                                    **kwargs,
                                                )
                                
                                    def __new__(
                                        cls,
                                        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'enumerations':
                                        return super().__new__(
                                            cls,
                                            _arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                
                                
                                class chronologies(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        
                                        class items(
                                            schemas.DictSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                
                                                class properties:
                                                    caption = schemas.StrSchema
                                                    value = schemas.StrSchema
                                                    __annotations__ = {
                                                        "caption": caption,
                                                        "value": value,
                                                    }
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["caption"]) -> MetaOapg.properties.caption: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                            
                                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["caption", "value", ], str]):
                                                # dict_instance[name] accessor
                                                return super().__getitem__(name)
                                            
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["caption"]) -> typing.Union[MetaOapg.properties.caption, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> typing.Union[MetaOapg.properties.value, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                            
                                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["caption", "value", ], str]):
                                                return super().get_item_oapg(name)
                                            
                                        
                                            def __new__(
                                                cls,
                                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                                caption: typing.Union[MetaOapg.properties.caption, str, schemas.Unset] = schemas.unset,
                                                value: typing.Union[MetaOapg.properties.value, str, schemas.Unset] = schemas.unset,
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                            ) -> 'items':
                                                return super().__new__(
                                                    cls,
                                                    *_args,
                                                    caption=caption,
                                                    value=value,
                                                    _configuration=_configuration,
                                                    **kwargs,
                                                )
                                
                                    def __new__(
                                        cls,
                                        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'chronologies':
                                        return super().__new__(
                                            cls,
                                            _arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                textualHoldings = schemas.StrSchema
                                itemMaterialSpecified = schemas.StrSchema
                                pieceDesignation = schemas.StrSchema
                                
                                
                                class cancelledPieceDesignations(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        items = schemas.StrSchema
                                
                                    def __new__(
                                        cls,
                                        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'cancelledPieceDesignations':
                                        return super().__new__(
                                            cls,
                                            _arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                temporaryLocation = schemas.StrSchema
                                
                                
                                class publicNotes(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        items = schemas.StrSchema
                                
                                    def __new__(
                                        cls,
                                        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'publicNotes':
                                        return super().__new__(
                                            cls,
                                            _arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                
                                
                                class yearRanges(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        
                                        class items(
                                            schemas.DictSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                
                                                class properties:
                                                    _from = schemas.StrSchema
                                                    to = schemas.StrSchema
                                                    __annotations__ = {
                                                        "from": _from,
                                                        "to": to,
                                                    }
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["from"]) -> MetaOapg.properties._from: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["to"]) -> MetaOapg.properties.to: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                            
                                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["from", "to", ], str]):
                                                # dict_instance[name] accessor
                                                return super().__getitem__(name)
                                            
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["from"]) -> typing.Union[MetaOapg.properties._from, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["to"]) -> typing.Union[MetaOapg.properties.to, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                            
                                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["from", "to", ], str]):
                                                return super().get_item_oapg(name)
                                            
                                        
                                            def __new__(
                                                cls,
                                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                                to: typing.Union[MetaOapg.properties.to, str, schemas.Unset] = schemas.unset,
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                            ) -> 'items':
                                                return super().__new__(
                                                    cls,
                                                    *_args,
                                                    to=to,
                                                    _configuration=_configuration,
                                                    **kwargs,
                                                )
                                
                                    def __new__(
                                        cls,
                                        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'yearRanges':
                                        return super().__new__(
                                            cls,
                                            _arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                
                                
                                class volumeRanges(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        
                                        class items(
                                            schemas.DictSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                
                                                class properties:
                                                    _from = schemas.StrSchema
                                                    to = schemas.StrSchema
                                                    __annotations__ = {
                                                        "from": _from,
                                                        "to": to,
                                                    }
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["from"]) -> MetaOapg.properties._from: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["to"]) -> MetaOapg.properties.to: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                            
                                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["from", "to", ], str]):
                                                # dict_instance[name] accessor
                                                return super().__getitem__(name)
                                            
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["from"]) -> typing.Union[MetaOapg.properties._from, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["to"]) -> typing.Union[MetaOapg.properties.to, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                            
                                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["from", "to", ], str]):
                                                return super().get_item_oapg(name)
                                            
                                        
                                            def __new__(
                                                cls,
                                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                                to: typing.Union[MetaOapg.properties.to, str, schemas.Unset] = schemas.unset,
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                            ) -> 'items':
                                                return super().__new__(
                                                    cls,
                                                    *_args,
                                                    to=to,
                                                    _configuration=_configuration,
                                                    **kwargs,
                                                )
                                
                                    def __new__(
                                        cls,
                                        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'volumeRanges':
                                        return super().__new__(
                                            cls,
                                            _arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                __annotations__ = {
                                    "linkingAndSequenceNumber": linkingAndSequenceNumber,
                                    "summaryOfHoldings": summaryOfHoldings,
                                    "enumerations": enumerations,
                                    "chronologies": chronologies,
                                    "textualHoldings": textualHoldings,
                                    "itemMaterialSpecified": itemMaterialSpecified,
                                    "pieceDesignation": pieceDesignation,
                                    "cancelledPieceDesignations": cancelledPieceDesignations,
                                    "temporaryLocation": temporaryLocation,
                                    "publicNotes": publicNotes,
                                    "yearRanges": yearRanges,
                                    "volumeRanges": volumeRanges,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["linkingAndSequenceNumber"]) -> MetaOapg.properties.linkingAndSequenceNumber: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["summaryOfHoldings"]) -> MetaOapg.properties.summaryOfHoldings: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["enumerations"]) -> MetaOapg.properties.enumerations: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["chronologies"]) -> MetaOapg.properties.chronologies: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["textualHoldings"]) -> MetaOapg.properties.textualHoldings: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["itemMaterialSpecified"]) -> MetaOapg.properties.itemMaterialSpecified: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["pieceDesignation"]) -> MetaOapg.properties.pieceDesignation: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["cancelledPieceDesignations"]) -> MetaOapg.properties.cancelledPieceDesignations: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["temporaryLocation"]) -> MetaOapg.properties.temporaryLocation: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["publicNotes"]) -> MetaOapg.properties.publicNotes: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["yearRanges"]) -> MetaOapg.properties.yearRanges: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["volumeRanges"]) -> MetaOapg.properties.volumeRanges: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["linkingAndSequenceNumber", "summaryOfHoldings", "enumerations", "chronologies", "textualHoldings", "itemMaterialSpecified", "pieceDesignation", "cancelledPieceDesignations", "temporaryLocation", "publicNotes", "yearRanges", "volumeRanges", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["linkingAndSequenceNumber"]) -> typing.Union[MetaOapg.properties.linkingAndSequenceNumber, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["summaryOfHoldings"]) -> typing.Union[MetaOapg.properties.summaryOfHoldings, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["enumerations"]) -> typing.Union[MetaOapg.properties.enumerations, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["chronologies"]) -> typing.Union[MetaOapg.properties.chronologies, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["textualHoldings"]) -> typing.Union[MetaOapg.properties.textualHoldings, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["itemMaterialSpecified"]) -> typing.Union[MetaOapg.properties.itemMaterialSpecified, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["pieceDesignation"]) -> typing.Union[MetaOapg.properties.pieceDesignation, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["cancelledPieceDesignations"]) -> typing.Union[MetaOapg.properties.cancelledPieceDesignations, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["temporaryLocation"]) -> typing.Union[MetaOapg.properties.temporaryLocation, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["publicNotes"]) -> typing.Union[MetaOapg.properties.publicNotes, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["yearRanges"]) -> typing.Union[MetaOapg.properties.yearRanges, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["volumeRanges"]) -> typing.Union[MetaOapg.properties.volumeRanges, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["linkingAndSequenceNumber", "summaryOfHoldings", "enumerations", "chronologies", "textualHoldings", "itemMaterialSpecified", "pieceDesignation", "cancelledPieceDesignations", "temporaryLocation", "publicNotes", "yearRanges", "volumeRanges", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            linkingAndSequenceNumber: typing.Union[MetaOapg.properties.linkingAndSequenceNumber, str, schemas.Unset] = schemas.unset,
                            summaryOfHoldings: typing.Union[MetaOapg.properties.summaryOfHoldings, str, schemas.Unset] = schemas.unset,
                            enumerations: typing.Union[MetaOapg.properties.enumerations, list, tuple, schemas.Unset] = schemas.unset,
                            chronologies: typing.Union[MetaOapg.properties.chronologies, list, tuple, schemas.Unset] = schemas.unset,
                            textualHoldings: typing.Union[MetaOapg.properties.textualHoldings, str, schemas.Unset] = schemas.unset,
                            itemMaterialSpecified: typing.Union[MetaOapg.properties.itemMaterialSpecified, str, schemas.Unset] = schemas.unset,
                            pieceDesignation: typing.Union[MetaOapg.properties.pieceDesignation, str, schemas.Unset] = schemas.unset,
                            cancelledPieceDesignations: typing.Union[MetaOapg.properties.cancelledPieceDesignations, list, tuple, schemas.Unset] = schemas.unset,
                            temporaryLocation: typing.Union[MetaOapg.properties.temporaryLocation, str, schemas.Unset] = schemas.unset,
                            publicNotes: typing.Union[MetaOapg.properties.publicNotes, list, tuple, schemas.Unset] = schemas.unset,
                            yearRanges: typing.Union[MetaOapg.properties.yearRanges, list, tuple, schemas.Unset] = schemas.unset,
                            volumeRanges: typing.Union[MetaOapg.properties.volumeRanges, list, tuple, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                linkingAndSequenceNumber=linkingAndSequenceNumber,
                                summaryOfHoldings=summaryOfHoldings,
                                enumerations=enumerations,
                                chronologies=chronologies,
                                textualHoldings=textualHoldings,
                                itemMaterialSpecified=itemMaterialSpecified,
                                pieceDesignation=pieceDesignation,
                                cancelledPieceDesignations=cancelledPieceDesignations,
                                temporaryLocation=temporaryLocation,
                                publicNotes=publicNotes,
                                yearRanges=yearRanges,
                                volumeRanges=volumeRanges,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'holdingParts':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "lhrControlNumber": lhrControlNumber,
                "lhrDateEntered": lhrDateEntered,
                "lhrLastUpdated": lhrLastUpdated,
                "oclcNumber": oclcNumber,
                "format": format,
                "location": location,
                "copyNumber": copyNumber,
                "callNumber": callNumber,
                "lendingPolicy": lendingPolicy,
                "hasSharedPrintCommitment": hasSharedPrintCommitment,
                "sharedPrintCommitments": sharedPrintCommitments,
                "summary": summary,
                "holdingParts": holdingParts,
            }
    
    oclcNumber: MetaOapg.properties.oclcNumber
    hasSharedPrintCommitment: MetaOapg.properties.hasSharedPrintCommitment
    format: MetaOapg.properties.format
    lhrControlNumber: MetaOapg.properties.lhrControlNumber
    lhrDateEntered: MetaOapg.properties.lhrDateEntered
    lhrLastUpdated: MetaOapg.properties.lhrLastUpdated
    lendingPolicy: MetaOapg.properties.lendingPolicy
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lhrControlNumber"]) -> MetaOapg.properties.lhrControlNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lhrDateEntered"]) -> MetaOapg.properties.lhrDateEntered: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lhrLastUpdated"]) -> MetaOapg.properties.lhrLastUpdated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["oclcNumber"]) -> MetaOapg.properties.oclcNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["format"]) -> MetaOapg.properties.format: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location"]) -> MetaOapg.properties.location: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["copyNumber"]) -> MetaOapg.properties.copyNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["callNumber"]) -> MetaOapg.properties.callNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lendingPolicy"]) -> MetaOapg.properties.lendingPolicy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hasSharedPrintCommitment"]) -> MetaOapg.properties.hasSharedPrintCommitment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sharedPrintCommitments"]) -> MetaOapg.properties.sharedPrintCommitments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["summary"]) -> MetaOapg.properties.summary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["holdingParts"]) -> MetaOapg.properties.holdingParts: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["lhrControlNumber", "lhrDateEntered", "lhrLastUpdated", "oclcNumber", "format", "location", "copyNumber", "callNumber", "lendingPolicy", "hasSharedPrintCommitment", "sharedPrintCommitments", "summary", "holdingParts", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lhrControlNumber"]) -> MetaOapg.properties.lhrControlNumber: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lhrDateEntered"]) -> MetaOapg.properties.lhrDateEntered: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lhrLastUpdated"]) -> MetaOapg.properties.lhrLastUpdated: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["oclcNumber"]) -> MetaOapg.properties.oclcNumber: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["format"]) -> MetaOapg.properties.format: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location"]) -> typing.Union[MetaOapg.properties.location, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["copyNumber"]) -> typing.Union[MetaOapg.properties.copyNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["callNumber"]) -> typing.Union[MetaOapg.properties.callNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lendingPolicy"]) -> MetaOapg.properties.lendingPolicy: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hasSharedPrintCommitment"]) -> MetaOapg.properties.hasSharedPrintCommitment: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sharedPrintCommitments"]) -> typing.Union[MetaOapg.properties.sharedPrintCommitments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["summary"]) -> typing.Union[MetaOapg.properties.summary, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["holdingParts"]) -> typing.Union[MetaOapg.properties.holdingParts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["lhrControlNumber", "lhrDateEntered", "lhrLastUpdated", "oclcNumber", "format", "location", "copyNumber", "callNumber", "lendingPolicy", "hasSharedPrintCommitment", "sharedPrintCommitments", "summary", "holdingParts", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        oclcNumber: typing.Union[MetaOapg.properties.oclcNumber, str, ],
        hasSharedPrintCommitment: typing.Union[MetaOapg.properties.hasSharedPrintCommitment, str, ],
        format: typing.Union[MetaOapg.properties.format, str, ],
        lhrControlNumber: typing.Union[MetaOapg.properties.lhrControlNumber, str, ],
        lhrDateEntered: typing.Union[MetaOapg.properties.lhrDateEntered, str, ],
        lhrLastUpdated: typing.Union[MetaOapg.properties.lhrLastUpdated, str, ],
        lendingPolicy: typing.Union[MetaOapg.properties.lendingPolicy, str, ],
        location: typing.Union[MetaOapg.properties.location, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        copyNumber: typing.Union[MetaOapg.properties.copyNumber, str, schemas.Unset] = schemas.unset,
        callNumber: typing.Union[MetaOapg.properties.callNumber, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        sharedPrintCommitments: typing.Union[MetaOapg.properties.sharedPrintCommitments, list, tuple, schemas.Unset] = schemas.unset,
        summary: typing.Union[MetaOapg.properties.summary, str, schemas.Unset] = schemas.unset,
        holdingParts: typing.Union[MetaOapg.properties.holdingParts, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaFor200ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            *_args,
            oclcNumber=oclcNumber,
            hasSharedPrintCommitment=hasSharedPrintCommitment,
            format=format,
            lhrControlNumber=lhrControlNumber,
            lhrDateEntered=lhrDateEntered,
            lhrLastUpdated=lhrLastUpdated,
            lendingPolicy=lendingPolicy,
            location=location,
            copyNumber=copyNumber,
            callNumber=callNumber,
            sharedPrintCommitments=sharedPrintCommitments,
            summary=summary,
            holdingParts=holdingParts,
            _configuration=_configuration,
            **kwargs,
        )


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)


class SchemaFor400ResponseBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        
        class properties:
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'uri'
                    enum_value_to_name = {
                        "https://developer.api.oclc.org/errors/NOT_ACCEPTABLE": "NOT_ACCEPTABLE",
                        "https://developer.api.oclc.org/errors/NOT_ALLOWED": "NOT_ALLOWED",
                        "https://developer.api.oclc.org/errors/INTERAL_SERVER_ERROR": "INTERAL_SERVER_ERROR",
                        "https://developer.api.oclc.org/errors/BAD_REQUEST": "BAD_REQUEST",
                        "https://developer.api.oclc.org/errors/NOT_FOUND": "NOT_FOUND",
                        "https://developer.api.oclc.org/errors/NOT_ELIGIBLE": "NOT_ELIGIBLE",
                        "https://developer.api.oclc.org/errors/MISSING_QUERY_PARAMETER": "MISSING_QUERY_PARAMETER",
                        "https://developer.api.oclc.org/errors/INVALID_QUERY_PARAMETERS": "INVALID_QUERY_PARAMETERS",
                        "https://developer.api.oclc.org/errors/INVALID_QUERY_PARAMETER_VALUE": "INVALID_QUERY_PARAMETER_VALUE",
                        "https://developer.api.oclc.org/errors/INVALID_QUERY_PARAMETER_NAME": "INVALID_QUERY_PARAMETER_NAME",
                        "https://developer.api.oclc.org/errors/SYNTAX_ERROR": "SYNTAX_ERROR",
                        "https://developer.api.oclc.org/errors/INVALID_DOCUMENT": "INVALID_DOCUMENT",
                        "https://developer.api.oclc.org/errors/MISSING_ELEMENT": "MISSING_ELEMENT",
                        "https://developer.api.oclc.org/errors/INVALID_ELEMENT_VALUE": "INVALID_ELEMENT_VALUE",
                    }
                
                @schemas.classproperty
                def NOT_ACCEPTABLE(cls):
                    return cls("https://developer.api.oclc.org/errors/NOT_ACCEPTABLE")
                
                @schemas.classproperty
                def NOT_ALLOWED(cls):
                    return cls("https://developer.api.oclc.org/errors/NOT_ALLOWED")
                
                @schemas.classproperty
                def INTERAL_SERVER_ERROR(cls):
                    return cls("https://developer.api.oclc.org/errors/INTERAL_SERVER_ERROR")
                
                @schemas.classproperty
                def BAD_REQUEST(cls):
                    return cls("https://developer.api.oclc.org/errors/BAD_REQUEST")
                
                @schemas.classproperty
                def NOT_FOUND(cls):
                    return cls("https://developer.api.oclc.org/errors/NOT_FOUND")
                
                @schemas.classproperty
                def NOT_ELIGIBLE(cls):
                    return cls("https://developer.api.oclc.org/errors/NOT_ELIGIBLE")
                
                @schemas.classproperty
                def MISSING_QUERY_PARAMETER(cls):
                    return cls("https://developer.api.oclc.org/errors/MISSING_QUERY_PARAMETER")
                
                @schemas.classproperty
                def INVALID_QUERY_PARAMETERS(cls):
                    return cls("https://developer.api.oclc.org/errors/INVALID_QUERY_PARAMETERS")
                
                @schemas.classproperty
                def INVALID_QUERY_PARAMETER_VALUE(cls):
                    return cls("https://developer.api.oclc.org/errors/INVALID_QUERY_PARAMETER_VALUE")
                
                @schemas.classproperty
                def INVALID_QUERY_PARAMETER_NAME(cls):
                    return cls("https://developer.api.oclc.org/errors/INVALID_QUERY_PARAMETER_NAME")
                
                @schemas.classproperty
                def SYNTAX_ERROR(cls):
                    return cls("https://developer.api.oclc.org/errors/SYNTAX_ERROR")
                
                @schemas.classproperty
                def INVALID_DOCUMENT(cls):
                    return cls("https://developer.api.oclc.org/errors/INVALID_DOCUMENT")
                
                @schemas.classproperty
                def MISSING_ELEMENT(cls):
                    return cls("https://developer.api.oclc.org/errors/MISSING_ELEMENT")
                
                @schemas.classproperty
                def INVALID_ELEMENT_VALUE(cls):
                    return cls("https://developer.api.oclc.org/errors/INVALID_ELEMENT_VALUE")
            title = schemas.StrSchema
            instance = schemas.StrSchema
            detail = schemas.StrSchema
            
            
            class invalidParams(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                path = schemas.StrSchema
                                name = schemas.StrSchema
                                reason = schemas.StrSchema
                                __annotations__ = {
                                    "path": path,
                                    "name": name,
                                    "reason": reason,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["path"]) -> MetaOapg.properties.path: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["reason"]) -> MetaOapg.properties.reason: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["path", "name", "reason", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["path"]) -> typing.Union[MetaOapg.properties.path, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["reason"]) -> typing.Union[MetaOapg.properties.reason, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["path", "name", "reason", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            path: typing.Union[MetaOapg.properties.path, str, schemas.Unset] = schemas.unset,
                            name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                            reason: typing.Union[MetaOapg.properties.reason, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                path=path,
                                name=name,
                                reason=reason,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'invalidParams':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "type": type,
                "title": title,
                "instance": instance,
                "detail": detail,
                "invalidParams": invalidParams,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["instance"]) -> MetaOapg.properties.instance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["detail"]) -> MetaOapg.properties.detail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invalidParams"]) -> MetaOapg.properties.invalidParams: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "title", "instance", "detail", "invalidParams", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["instance"]) -> typing.Union[MetaOapg.properties.instance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["detail"]) -> typing.Union[MetaOapg.properties.detail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invalidParams"]) -> typing.Union[MetaOapg.properties.invalidParams, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "title", "instance", "detail", "invalidParams", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        instance: typing.Union[MetaOapg.properties.instance, str, schemas.Unset] = schemas.unset,
        detail: typing.Union[MetaOapg.properties.detail, str, schemas.Unset] = schemas.unset,
        invalidParams: typing.Union[MetaOapg.properties.invalidParams, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaFor400ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            *_args,
            type=type,
            title=title,
            instance=instance,
            detail=detail,
            invalidParams=invalidParams,
            _configuration=_configuration,
            **kwargs,
        )


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor400ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationJson),
    },
)


class SchemaFor404ResponseBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        
        class properties:
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'uri'
                    enum_value_to_name = {
                        "https://developer.api.oclc.org/errors/NOT_ACCEPTABLE": "NOT_ACCEPTABLE",
                        "https://developer.api.oclc.org/errors/NOT_ALLOWED": "NOT_ALLOWED",
                        "https://developer.api.oclc.org/errors/INTERAL_SERVER_ERROR": "INTERAL_SERVER_ERROR",
                        "https://developer.api.oclc.org/errors/BAD_REQUEST": "BAD_REQUEST",
                        "https://developer.api.oclc.org/errors/NOT_FOUND": "NOT_FOUND",
                        "https://developer.api.oclc.org/errors/NOT_ELIGIBLE": "NOT_ELIGIBLE",
                        "https://developer.api.oclc.org/errors/MISSING_QUERY_PARAMETER": "MISSING_QUERY_PARAMETER",
                        "https://developer.api.oclc.org/errors/INVALID_QUERY_PARAMETERS": "INVALID_QUERY_PARAMETERS",
                        "https://developer.api.oclc.org/errors/INVALID_QUERY_PARAMETER_VALUE": "INVALID_QUERY_PARAMETER_VALUE",
                        "https://developer.api.oclc.org/errors/INVALID_QUERY_PARAMETER_NAME": "INVALID_QUERY_PARAMETER_NAME",
                        "https://developer.api.oclc.org/errors/SYNTAX_ERROR": "SYNTAX_ERROR",
                        "https://developer.api.oclc.org/errors/INVALID_DOCUMENT": "INVALID_DOCUMENT",
                        "https://developer.api.oclc.org/errors/MISSING_ELEMENT": "MISSING_ELEMENT",
                        "https://developer.api.oclc.org/errors/INVALID_ELEMENT_VALUE": "INVALID_ELEMENT_VALUE",
                    }
                
                @schemas.classproperty
                def NOT_ACCEPTABLE(cls):
                    return cls("https://developer.api.oclc.org/errors/NOT_ACCEPTABLE")
                
                @schemas.classproperty
                def NOT_ALLOWED(cls):
                    return cls("https://developer.api.oclc.org/errors/NOT_ALLOWED")
                
                @schemas.classproperty
                def INTERAL_SERVER_ERROR(cls):
                    return cls("https://developer.api.oclc.org/errors/INTERAL_SERVER_ERROR")
                
                @schemas.classproperty
                def BAD_REQUEST(cls):
                    return cls("https://developer.api.oclc.org/errors/BAD_REQUEST")
                
                @schemas.classproperty
                def NOT_FOUND(cls):
                    return cls("https://developer.api.oclc.org/errors/NOT_FOUND")
                
                @schemas.classproperty
                def NOT_ELIGIBLE(cls):
                    return cls("https://developer.api.oclc.org/errors/NOT_ELIGIBLE")
                
                @schemas.classproperty
                def MISSING_QUERY_PARAMETER(cls):
                    return cls("https://developer.api.oclc.org/errors/MISSING_QUERY_PARAMETER")
                
                @schemas.classproperty
                def INVALID_QUERY_PARAMETERS(cls):
                    return cls("https://developer.api.oclc.org/errors/INVALID_QUERY_PARAMETERS")
                
                @schemas.classproperty
                def INVALID_QUERY_PARAMETER_VALUE(cls):
                    return cls("https://developer.api.oclc.org/errors/INVALID_QUERY_PARAMETER_VALUE")
                
                @schemas.classproperty
                def INVALID_QUERY_PARAMETER_NAME(cls):
                    return cls("https://developer.api.oclc.org/errors/INVALID_QUERY_PARAMETER_NAME")
                
                @schemas.classproperty
                def SYNTAX_ERROR(cls):
                    return cls("https://developer.api.oclc.org/errors/SYNTAX_ERROR")
                
                @schemas.classproperty
                def INVALID_DOCUMENT(cls):
                    return cls("https://developer.api.oclc.org/errors/INVALID_DOCUMENT")
                
                @schemas.classproperty
                def MISSING_ELEMENT(cls):
                    return cls("https://developer.api.oclc.org/errors/MISSING_ELEMENT")
                
                @schemas.classproperty
                def INVALID_ELEMENT_VALUE(cls):
                    return cls("https://developer.api.oclc.org/errors/INVALID_ELEMENT_VALUE")
            title = schemas.StrSchema
            instance = schemas.StrSchema
            detail = schemas.StrSchema
            
            
            class invalidParams(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                path = schemas.StrSchema
                                name = schemas.StrSchema
                                reason = schemas.StrSchema
                                __annotations__ = {
                                    "path": path,
                                    "name": name,
                                    "reason": reason,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["path"]) -> MetaOapg.properties.path: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["reason"]) -> MetaOapg.properties.reason: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["path", "name", "reason", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["path"]) -> typing.Union[MetaOapg.properties.path, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["reason"]) -> typing.Union[MetaOapg.properties.reason, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["path", "name", "reason", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            path: typing.Union[MetaOapg.properties.path, str, schemas.Unset] = schemas.unset,
                            name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                            reason: typing.Union[MetaOapg.properties.reason, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                path=path,
                                name=name,
                                reason=reason,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'invalidParams':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "type": type,
                "title": title,
                "instance": instance,
                "detail": detail,
                "invalidParams": invalidParams,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["instance"]) -> MetaOapg.properties.instance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["detail"]) -> MetaOapg.properties.detail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invalidParams"]) -> MetaOapg.properties.invalidParams: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "title", "instance", "detail", "invalidParams", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["instance"]) -> typing.Union[MetaOapg.properties.instance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["detail"]) -> typing.Union[MetaOapg.properties.detail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invalidParams"]) -> typing.Union[MetaOapg.properties.invalidParams, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "title", "instance", "detail", "invalidParams", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        instance: typing.Union[MetaOapg.properties.instance, str, schemas.Unset] = schemas.unset,
        detail: typing.Union[MetaOapg.properties.detail, str, schemas.Unset] = schemas.unset,
        invalidParams: typing.Union[MetaOapg.properties.invalidParams, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaFor404ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            *_args,
            type=type,
            title=title,
            instance=instance,
            detail=detail,
            invalidParams=invalidParams,
            _configuration=_configuration,
            **kwargs,
        )


@dataclass
class ApiResponseFor404(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor404ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_404 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor404,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor404ResponseBodyApplicationJson),
    },
)


class SchemaFor405ResponseBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        
        class properties:
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'uri'
                    enum_value_to_name = {
                        "https://developer.api.oclc.org/errors/NOT_ACCEPTABLE": "NOT_ACCEPTABLE",
                        "https://developer.api.oclc.org/errors/NOT_ALLOWED": "NOT_ALLOWED",
                        "https://developer.api.oclc.org/errors/INTERAL_SERVER_ERROR": "INTERAL_SERVER_ERROR",
                        "https://developer.api.oclc.org/errors/BAD_REQUEST": "BAD_REQUEST",
                        "https://developer.api.oclc.org/errors/NOT_FOUND": "NOT_FOUND",
                        "https://developer.api.oclc.org/errors/NOT_ELIGIBLE": "NOT_ELIGIBLE",
                        "https://developer.api.oclc.org/errors/MISSING_QUERY_PARAMETER": "MISSING_QUERY_PARAMETER",
                        "https://developer.api.oclc.org/errors/INVALID_QUERY_PARAMETERS": "INVALID_QUERY_PARAMETERS",
                        "https://developer.api.oclc.org/errors/INVALID_QUERY_PARAMETER_VALUE": "INVALID_QUERY_PARAMETER_VALUE",
                        "https://developer.api.oclc.org/errors/INVALID_QUERY_PARAMETER_NAME": "INVALID_QUERY_PARAMETER_NAME",
                        "https://developer.api.oclc.org/errors/SYNTAX_ERROR": "SYNTAX_ERROR",
                        "https://developer.api.oclc.org/errors/INVALID_DOCUMENT": "INVALID_DOCUMENT",
                        "https://developer.api.oclc.org/errors/MISSING_ELEMENT": "MISSING_ELEMENT",
                        "https://developer.api.oclc.org/errors/INVALID_ELEMENT_VALUE": "INVALID_ELEMENT_VALUE",
                    }
                
                @schemas.classproperty
                def NOT_ACCEPTABLE(cls):
                    return cls("https://developer.api.oclc.org/errors/NOT_ACCEPTABLE")
                
                @schemas.classproperty
                def NOT_ALLOWED(cls):
                    return cls("https://developer.api.oclc.org/errors/NOT_ALLOWED")
                
                @schemas.classproperty
                def INTERAL_SERVER_ERROR(cls):
                    return cls("https://developer.api.oclc.org/errors/INTERAL_SERVER_ERROR")
                
                @schemas.classproperty
                def BAD_REQUEST(cls):
                    return cls("https://developer.api.oclc.org/errors/BAD_REQUEST")
                
                @schemas.classproperty
                def NOT_FOUND(cls):
                    return cls("https://developer.api.oclc.org/errors/NOT_FOUND")
                
                @schemas.classproperty
                def NOT_ELIGIBLE(cls):
                    return cls("https://developer.api.oclc.org/errors/NOT_ELIGIBLE")
                
                @schemas.classproperty
                def MISSING_QUERY_PARAMETER(cls):
                    return cls("https://developer.api.oclc.org/errors/MISSING_QUERY_PARAMETER")
                
                @schemas.classproperty
                def INVALID_QUERY_PARAMETERS(cls):
                    return cls("https://developer.api.oclc.org/errors/INVALID_QUERY_PARAMETERS")
                
                @schemas.classproperty
                def INVALID_QUERY_PARAMETER_VALUE(cls):
                    return cls("https://developer.api.oclc.org/errors/INVALID_QUERY_PARAMETER_VALUE")
                
                @schemas.classproperty
                def INVALID_QUERY_PARAMETER_NAME(cls):
                    return cls("https://developer.api.oclc.org/errors/INVALID_QUERY_PARAMETER_NAME")
                
                @schemas.classproperty
                def SYNTAX_ERROR(cls):
                    return cls("https://developer.api.oclc.org/errors/SYNTAX_ERROR")
                
                @schemas.classproperty
                def INVALID_DOCUMENT(cls):
                    return cls("https://developer.api.oclc.org/errors/INVALID_DOCUMENT")
                
                @schemas.classproperty
                def MISSING_ELEMENT(cls):
                    return cls("https://developer.api.oclc.org/errors/MISSING_ELEMENT")
                
                @schemas.classproperty
                def INVALID_ELEMENT_VALUE(cls):
                    return cls("https://developer.api.oclc.org/errors/INVALID_ELEMENT_VALUE")
            title = schemas.StrSchema
            instance = schemas.StrSchema
            detail = schemas.StrSchema
            
            
            class invalidParams(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                path = schemas.StrSchema
                                name = schemas.StrSchema
                                reason = schemas.StrSchema
                                __annotations__ = {
                                    "path": path,
                                    "name": name,
                                    "reason": reason,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["path"]) -> MetaOapg.properties.path: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["reason"]) -> MetaOapg.properties.reason: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["path", "name", "reason", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["path"]) -> typing.Union[MetaOapg.properties.path, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["reason"]) -> typing.Union[MetaOapg.properties.reason, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["path", "name", "reason", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            path: typing.Union[MetaOapg.properties.path, str, schemas.Unset] = schemas.unset,
                            name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                            reason: typing.Union[MetaOapg.properties.reason, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                path=path,
                                name=name,
                                reason=reason,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'invalidParams':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "type": type,
                "title": title,
                "instance": instance,
                "detail": detail,
                "invalidParams": invalidParams,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["instance"]) -> MetaOapg.properties.instance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["detail"]) -> MetaOapg.properties.detail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invalidParams"]) -> MetaOapg.properties.invalidParams: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "title", "instance", "detail", "invalidParams", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["instance"]) -> typing.Union[MetaOapg.properties.instance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["detail"]) -> typing.Union[MetaOapg.properties.detail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invalidParams"]) -> typing.Union[MetaOapg.properties.invalidParams, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "title", "instance", "detail", "invalidParams", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        instance: typing.Union[MetaOapg.properties.instance, str, schemas.Unset] = schemas.unset,
        detail: typing.Union[MetaOapg.properties.detail, str, schemas.Unset] = schemas.unset,
        invalidParams: typing.Union[MetaOapg.properties.invalidParams, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaFor405ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            *_args,
            type=type,
            title=title,
            instance=instance,
            detail=detail,
            invalidParams=invalidParams,
            _configuration=_configuration,
            **kwargs,
        )


@dataclass
class ApiResponseFor405(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor405ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_405 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor405,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor405ResponseBodyApplicationJson),
    },
)


class SchemaFor406ResponseBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        
        class properties:
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'uri'
                    enum_value_to_name = {
                        "https://developer.api.oclc.org/errors/NOT_ACCEPTABLE": "NOT_ACCEPTABLE",
                        "https://developer.api.oclc.org/errors/NOT_ALLOWED": "NOT_ALLOWED",
                        "https://developer.api.oclc.org/errors/INTERAL_SERVER_ERROR": "INTERAL_SERVER_ERROR",
                        "https://developer.api.oclc.org/errors/BAD_REQUEST": "BAD_REQUEST",
                        "https://developer.api.oclc.org/errors/NOT_FOUND": "NOT_FOUND",
                        "https://developer.api.oclc.org/errors/NOT_ELIGIBLE": "NOT_ELIGIBLE",
                        "https://developer.api.oclc.org/errors/MISSING_QUERY_PARAMETER": "MISSING_QUERY_PARAMETER",
                        "https://developer.api.oclc.org/errors/INVALID_QUERY_PARAMETERS": "INVALID_QUERY_PARAMETERS",
                        "https://developer.api.oclc.org/errors/INVALID_QUERY_PARAMETER_VALUE": "INVALID_QUERY_PARAMETER_VALUE",
                        "https://developer.api.oclc.org/errors/INVALID_QUERY_PARAMETER_NAME": "INVALID_QUERY_PARAMETER_NAME",
                        "https://developer.api.oclc.org/errors/SYNTAX_ERROR": "SYNTAX_ERROR",
                        "https://developer.api.oclc.org/errors/INVALID_DOCUMENT": "INVALID_DOCUMENT",
                        "https://developer.api.oclc.org/errors/MISSING_ELEMENT": "MISSING_ELEMENT",
                        "https://developer.api.oclc.org/errors/INVALID_ELEMENT_VALUE": "INVALID_ELEMENT_VALUE",
                    }
                
                @schemas.classproperty
                def NOT_ACCEPTABLE(cls):
                    return cls("https://developer.api.oclc.org/errors/NOT_ACCEPTABLE")
                
                @schemas.classproperty
                def NOT_ALLOWED(cls):
                    return cls("https://developer.api.oclc.org/errors/NOT_ALLOWED")
                
                @schemas.classproperty
                def INTERAL_SERVER_ERROR(cls):
                    return cls("https://developer.api.oclc.org/errors/INTERAL_SERVER_ERROR")
                
                @schemas.classproperty
                def BAD_REQUEST(cls):
                    return cls("https://developer.api.oclc.org/errors/BAD_REQUEST")
                
                @schemas.classproperty
                def NOT_FOUND(cls):
                    return cls("https://developer.api.oclc.org/errors/NOT_FOUND")
                
                @schemas.classproperty
                def NOT_ELIGIBLE(cls):
                    return cls("https://developer.api.oclc.org/errors/NOT_ELIGIBLE")
                
                @schemas.classproperty
                def MISSING_QUERY_PARAMETER(cls):
                    return cls("https://developer.api.oclc.org/errors/MISSING_QUERY_PARAMETER")
                
                @schemas.classproperty
                def INVALID_QUERY_PARAMETERS(cls):
                    return cls("https://developer.api.oclc.org/errors/INVALID_QUERY_PARAMETERS")
                
                @schemas.classproperty
                def INVALID_QUERY_PARAMETER_VALUE(cls):
                    return cls("https://developer.api.oclc.org/errors/INVALID_QUERY_PARAMETER_VALUE")
                
                @schemas.classproperty
                def INVALID_QUERY_PARAMETER_NAME(cls):
                    return cls("https://developer.api.oclc.org/errors/INVALID_QUERY_PARAMETER_NAME")
                
                @schemas.classproperty
                def SYNTAX_ERROR(cls):
                    return cls("https://developer.api.oclc.org/errors/SYNTAX_ERROR")
                
                @schemas.classproperty
                def INVALID_DOCUMENT(cls):
                    return cls("https://developer.api.oclc.org/errors/INVALID_DOCUMENT")
                
                @schemas.classproperty
                def MISSING_ELEMENT(cls):
                    return cls("https://developer.api.oclc.org/errors/MISSING_ELEMENT")
                
                @schemas.classproperty
                def INVALID_ELEMENT_VALUE(cls):
                    return cls("https://developer.api.oclc.org/errors/INVALID_ELEMENT_VALUE")
            title = schemas.StrSchema
            instance = schemas.StrSchema
            detail = schemas.StrSchema
            
            
            class invalidParams(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                path = schemas.StrSchema
                                name = schemas.StrSchema
                                reason = schemas.StrSchema
                                __annotations__ = {
                                    "path": path,
                                    "name": name,
                                    "reason": reason,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["path"]) -> MetaOapg.properties.path: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["reason"]) -> MetaOapg.properties.reason: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["path", "name", "reason", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["path"]) -> typing.Union[MetaOapg.properties.path, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["reason"]) -> typing.Union[MetaOapg.properties.reason, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["path", "name", "reason", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            path: typing.Union[MetaOapg.properties.path, str, schemas.Unset] = schemas.unset,
                            name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                            reason: typing.Union[MetaOapg.properties.reason, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                path=path,
                                name=name,
                                reason=reason,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'invalidParams':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "type": type,
                "title": title,
                "instance": instance,
                "detail": detail,
                "invalidParams": invalidParams,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["instance"]) -> MetaOapg.properties.instance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["detail"]) -> MetaOapg.properties.detail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invalidParams"]) -> MetaOapg.properties.invalidParams: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "title", "instance", "detail", "invalidParams", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["instance"]) -> typing.Union[MetaOapg.properties.instance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["detail"]) -> typing.Union[MetaOapg.properties.detail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invalidParams"]) -> typing.Union[MetaOapg.properties.invalidParams, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "title", "instance", "detail", "invalidParams", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        instance: typing.Union[MetaOapg.properties.instance, str, schemas.Unset] = schemas.unset,
        detail: typing.Union[MetaOapg.properties.detail, str, schemas.Unset] = schemas.unset,
        invalidParams: typing.Union[MetaOapg.properties.invalidParams, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaFor406ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            *_args,
            type=type,
            title=title,
            instance=instance,
            detail=detail,
            invalidParams=invalidParams,
            _configuration=_configuration,
            **kwargs,
        )


@dataclass
class ApiResponseFor406(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor406ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_406 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor406,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor406ResponseBodyApplicationJson),
    },
)


class SchemaFor500ResponseBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        
        class properties:
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'uri'
                    enum_value_to_name = {
                        "https://developer.api.oclc.org/errors/NOT_ACCEPTABLE": "NOT_ACCEPTABLE",
                        "https://developer.api.oclc.org/errors/NOT_ALLOWED": "NOT_ALLOWED",
                        "https://developer.api.oclc.org/errors/INTERAL_SERVER_ERROR": "INTERAL_SERVER_ERROR",
                        "https://developer.api.oclc.org/errors/BAD_REQUEST": "BAD_REQUEST",
                        "https://developer.api.oclc.org/errors/NOT_FOUND": "NOT_FOUND",
                        "https://developer.api.oclc.org/errors/NOT_ELIGIBLE": "NOT_ELIGIBLE",
                        "https://developer.api.oclc.org/errors/MISSING_QUERY_PARAMETER": "MISSING_QUERY_PARAMETER",
                        "https://developer.api.oclc.org/errors/INVALID_QUERY_PARAMETERS": "INVALID_QUERY_PARAMETERS",
                        "https://developer.api.oclc.org/errors/INVALID_QUERY_PARAMETER_VALUE": "INVALID_QUERY_PARAMETER_VALUE",
                        "https://developer.api.oclc.org/errors/INVALID_QUERY_PARAMETER_NAME": "INVALID_QUERY_PARAMETER_NAME",
                        "https://developer.api.oclc.org/errors/SYNTAX_ERROR": "SYNTAX_ERROR",
                        "https://developer.api.oclc.org/errors/INVALID_DOCUMENT": "INVALID_DOCUMENT",
                        "https://developer.api.oclc.org/errors/MISSING_ELEMENT": "MISSING_ELEMENT",
                        "https://developer.api.oclc.org/errors/INVALID_ELEMENT_VALUE": "INVALID_ELEMENT_VALUE",
                    }
                
                @schemas.classproperty
                def NOT_ACCEPTABLE(cls):
                    return cls("https://developer.api.oclc.org/errors/NOT_ACCEPTABLE")
                
                @schemas.classproperty
                def NOT_ALLOWED(cls):
                    return cls("https://developer.api.oclc.org/errors/NOT_ALLOWED")
                
                @schemas.classproperty
                def INTERAL_SERVER_ERROR(cls):
                    return cls("https://developer.api.oclc.org/errors/INTERAL_SERVER_ERROR")
                
                @schemas.classproperty
                def BAD_REQUEST(cls):
                    return cls("https://developer.api.oclc.org/errors/BAD_REQUEST")
                
                @schemas.classproperty
                def NOT_FOUND(cls):
                    return cls("https://developer.api.oclc.org/errors/NOT_FOUND")
                
                @schemas.classproperty
                def NOT_ELIGIBLE(cls):
                    return cls("https://developer.api.oclc.org/errors/NOT_ELIGIBLE")
                
                @schemas.classproperty
                def MISSING_QUERY_PARAMETER(cls):
                    return cls("https://developer.api.oclc.org/errors/MISSING_QUERY_PARAMETER")
                
                @schemas.classproperty
                def INVALID_QUERY_PARAMETERS(cls):
                    return cls("https://developer.api.oclc.org/errors/INVALID_QUERY_PARAMETERS")
                
                @schemas.classproperty
                def INVALID_QUERY_PARAMETER_VALUE(cls):
                    return cls("https://developer.api.oclc.org/errors/INVALID_QUERY_PARAMETER_VALUE")
                
                @schemas.classproperty
                def INVALID_QUERY_PARAMETER_NAME(cls):
                    return cls("https://developer.api.oclc.org/errors/INVALID_QUERY_PARAMETER_NAME")
                
                @schemas.classproperty
                def SYNTAX_ERROR(cls):
                    return cls("https://developer.api.oclc.org/errors/SYNTAX_ERROR")
                
                @schemas.classproperty
                def INVALID_DOCUMENT(cls):
                    return cls("https://developer.api.oclc.org/errors/INVALID_DOCUMENT")
                
                @schemas.classproperty
                def MISSING_ELEMENT(cls):
                    return cls("https://developer.api.oclc.org/errors/MISSING_ELEMENT")
                
                @schemas.classproperty
                def INVALID_ELEMENT_VALUE(cls):
                    return cls("https://developer.api.oclc.org/errors/INVALID_ELEMENT_VALUE")
            title = schemas.StrSchema
            instance = schemas.StrSchema
            detail = schemas.StrSchema
            
            
            class invalidParams(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                path = schemas.StrSchema
                                name = schemas.StrSchema
                                reason = schemas.StrSchema
                                __annotations__ = {
                                    "path": path,
                                    "name": name,
                                    "reason": reason,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["path"]) -> MetaOapg.properties.path: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["reason"]) -> MetaOapg.properties.reason: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["path", "name", "reason", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["path"]) -> typing.Union[MetaOapg.properties.path, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["reason"]) -> typing.Union[MetaOapg.properties.reason, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["path", "name", "reason", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            path: typing.Union[MetaOapg.properties.path, str, schemas.Unset] = schemas.unset,
                            name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                            reason: typing.Union[MetaOapg.properties.reason, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                path=path,
                                name=name,
                                reason=reason,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'invalidParams':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "type": type,
                "title": title,
                "instance": instance,
                "detail": detail,
                "invalidParams": invalidParams,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["instance"]) -> MetaOapg.properties.instance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["detail"]) -> MetaOapg.properties.detail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invalidParams"]) -> MetaOapg.properties.invalidParams: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "title", "instance", "detail", "invalidParams", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["instance"]) -> typing.Union[MetaOapg.properties.instance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["detail"]) -> typing.Union[MetaOapg.properties.detail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invalidParams"]) -> typing.Union[MetaOapg.properties.invalidParams, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "title", "instance", "detail", "invalidParams", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        instance: typing.Union[MetaOapg.properties.instance, str, schemas.Unset] = schemas.unset,
        detail: typing.Union[MetaOapg.properties.detail, str, schemas.Unset] = schemas.unset,
        invalidParams: typing.Union[MetaOapg.properties.invalidParams, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaFor500ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            *_args,
            type=type,
            title=title,
            instance=instance,
            detail=detail,
            invalidParams=invalidParams,
            _configuration=_configuration,
            **kwargs,
        )


@dataclass
class ApiResponseFor500(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor500ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_500 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor500,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationJson),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
    '400': _response_for_400,
    '404': _response_for_404,
    '405': _response_for_405,
    '406': _response_for_406,
    '500': _response_for_500,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):
    @typing.overload
    def _retrieve_lhr_oapg(
        self,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def _retrieve_lhr_oapg(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def _retrieve_lhr_oapg(
        self,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def _retrieve_lhr_oapg(
        self,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        Retrieve LHR Resource
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestHeaderParams, header_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value

        _path_params = {}
        for parameter in (
            request_path_control_number,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)

        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)

        _headers = HTTPHeaderDict()
        for parameter in (
            request_header_accept,
        ):
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method='get'.upper(),
            headers=_headers,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(
                status=response.status,
                reason=response.reason,
                api_response=api_response
            )

        return api_response


class RetrieveLhr(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def retrieve_lhr(
        self,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def retrieve_lhr(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def retrieve_lhr(
        self,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def retrieve_lhr(
        self,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._retrieve_lhr_oapg(
            header_params=header_params,
            path_params=path_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def get(
        self,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def get(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def get(
        self,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def get(
        self,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._retrieve_lhr_oapg(
            header_params=header_params,
            path_params=path_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


