# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from openapi_client import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401

# Header params
AcceptSchema = schemas.StrSchema
RequestRequiredHeaderParams = typing_extensions.TypedDict(
    'RequestRequiredHeaderParams',
    {
    }
)
RequestOptionalHeaderParams = typing_extensions.TypedDict(
    'RequestOptionalHeaderParams',
    {
        'Accept': typing.Union[AcceptSchema, str, ],
    },
    total=False
)


class RequestHeaderParams(RequestRequiredHeaderParams, RequestOptionalHeaderParams):
    pass


request_header_accept = api_client.HeaderParameter(
    name="Accept",
    style=api_client.ParameterStyle.SIMPLE,
    schema=AcceptSchema,
)
# Path params
OclcNumberSchema = schemas.Int64Schema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'oclcNumber': typing.Union[OclcNumberSchema, decimal.Decimal, int, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_oclc_number = api_client.PathParameter(
    name="oclcNumber",
    style=api_client.ParameterStyle.SIMPLE,
    schema=OclcNumberSchema,
    required=True,
)


class SchemaFor200ResponseBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        
        class properties:
            
            
            class identifier(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        oclcNumber = schemas.Int64Schema
                        lccn = schemas.StrSchema
                        
                        
                        class isbns(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'isbns':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class issns(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'issns':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class externalIdentifiers(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            oclcSymbol = schemas.StrSchema
                                            systemControlNumber = schemas.StrSchema
                                            oaiSetName = schemas.StrSchema
                                            contentTypeId = schemas.StrSchema
                                            __annotations__ = {
                                                "oclcSymbol": oclcSymbol,
                                                "systemControlNumber": systemControlNumber,
                                                "oaiSetName": oaiSetName,
                                                "contentTypeId": contentTypeId,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["oclcSymbol"]) -> MetaOapg.properties.oclcSymbol: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["systemControlNumber"]) -> MetaOapg.properties.systemControlNumber: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["oaiSetName"]) -> MetaOapg.properties.oaiSetName: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["contentTypeId"]) -> MetaOapg.properties.contentTypeId: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["oclcSymbol", "systemControlNumber", "oaiSetName", "contentTypeId", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["oclcSymbol"]) -> typing.Union[MetaOapg.properties.oclcSymbol, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["systemControlNumber"]) -> typing.Union[MetaOapg.properties.systemControlNumber, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["oaiSetName"]) -> typing.Union[MetaOapg.properties.oaiSetName, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["contentTypeId"]) -> typing.Union[MetaOapg.properties.contentTypeId, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["oclcSymbol", "systemControlNumber", "oaiSetName", "contentTypeId", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        oclcSymbol: typing.Union[MetaOapg.properties.oclcSymbol, str, schemas.Unset] = schemas.unset,
                                        systemControlNumber: typing.Union[MetaOapg.properties.systemControlNumber, str, schemas.Unset] = schemas.unset,
                                        oaiSetName: typing.Union[MetaOapg.properties.oaiSetName, str, schemas.Unset] = schemas.unset,
                                        contentTypeId: typing.Union[MetaOapg.properties.contentTypeId, str, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            oclcSymbol=oclcSymbol,
                                            systemControlNumber=systemControlNumber,
                                            oaiSetName=oaiSetName,
                                            contentTypeId=contentTypeId,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'externalIdentifiers':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class otherStandardIdentifiers(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            type = schemas.StrSchema
                                            id = schemas.StrSchema
                                            __annotations__ = {
                                                "type": type,
                                                "id": id,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "id", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "id", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
                                        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            type=type,
                                            id=id,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'otherStandardIdentifiers':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class dois(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'dois':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class mergedOclcNumbers(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'mergedOclcNumbers':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class gpoNumber(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'gpoNumber':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        __annotations__ = {
                            "oclcNumber": oclcNumber,
                            "lccn": lccn,
                            "isbns": isbns,
                            "issns": issns,
                            "externalIdentifiers": externalIdentifiers,
                            "otherStandardIdentifiers": otherStandardIdentifiers,
                            "dois": dois,
                            "mergedOclcNumbers": mergedOclcNumbers,
                            "gpoNumber": gpoNumber,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["oclcNumber"]) -> MetaOapg.properties.oclcNumber: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["lccn"]) -> MetaOapg.properties.lccn: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["isbns"]) -> MetaOapg.properties.isbns: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["issns"]) -> MetaOapg.properties.issns: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["externalIdentifiers"]) -> MetaOapg.properties.externalIdentifiers: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["otherStandardIdentifiers"]) -> MetaOapg.properties.otherStandardIdentifiers: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["dois"]) -> MetaOapg.properties.dois: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["mergedOclcNumbers"]) -> MetaOapg.properties.mergedOclcNumbers: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["gpoNumber"]) -> MetaOapg.properties.gpoNumber: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["oclcNumber", "lccn", "isbns", "issns", "externalIdentifiers", "otherStandardIdentifiers", "dois", "mergedOclcNumbers", "gpoNumber", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["oclcNumber"]) -> typing.Union[MetaOapg.properties.oclcNumber, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["lccn"]) -> typing.Union[MetaOapg.properties.lccn, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["isbns"]) -> typing.Union[MetaOapg.properties.isbns, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["issns"]) -> typing.Union[MetaOapg.properties.issns, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["externalIdentifiers"]) -> typing.Union[MetaOapg.properties.externalIdentifiers, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["otherStandardIdentifiers"]) -> typing.Union[MetaOapg.properties.otherStandardIdentifiers, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["dois"]) -> typing.Union[MetaOapg.properties.dois, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["mergedOclcNumbers"]) -> typing.Union[MetaOapg.properties.mergedOclcNumbers, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["gpoNumber"]) -> typing.Union[MetaOapg.properties.gpoNumber, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["oclcNumber", "lccn", "isbns", "issns", "externalIdentifiers", "otherStandardIdentifiers", "dois", "mergedOclcNumbers", "gpoNumber", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    oclcNumber: typing.Union[MetaOapg.properties.oclcNumber, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    lccn: typing.Union[MetaOapg.properties.lccn, str, schemas.Unset] = schemas.unset,
                    isbns: typing.Union[MetaOapg.properties.isbns, list, tuple, schemas.Unset] = schemas.unset,
                    issns: typing.Union[MetaOapg.properties.issns, list, tuple, schemas.Unset] = schemas.unset,
                    externalIdentifiers: typing.Union[MetaOapg.properties.externalIdentifiers, list, tuple, schemas.Unset] = schemas.unset,
                    otherStandardIdentifiers: typing.Union[MetaOapg.properties.otherStandardIdentifiers, list, tuple, schemas.Unset] = schemas.unset,
                    dois: typing.Union[MetaOapg.properties.dois, list, tuple, schemas.Unset] = schemas.unset,
                    mergedOclcNumbers: typing.Union[MetaOapg.properties.mergedOclcNumbers, list, tuple, schemas.Unset] = schemas.unset,
                    gpoNumber: typing.Union[MetaOapg.properties.gpoNumber, list, tuple, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'identifier':
                    return super().__new__(
                        cls,
                        *_args,
                        oclcNumber=oclcNumber,
                        lccn=lccn,
                        isbns=isbns,
                        issns=issns,
                        externalIdentifiers=externalIdentifiers,
                        otherStandardIdentifiers=otherStandardIdentifiers,
                        dois=dois,
                        mergedOclcNumbers=mergedOclcNumbers,
                        gpoNumber=gpoNumber,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class title(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class mainTitles(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            text = schemas.StrSchema
                                            romanizedText = schemas.StrSchema
                                            languageCode = schemas.StrSchema
                                            
                                            
                                            class textDirection(
                                                schemas.EnumBase,
                                                schemas.StrSchema
                                            ):
                                                
                                                @schemas.classproperty
                                                def RTL(cls):
                                                    return cls("RTL")
                                                
                                                @schemas.classproperty
                                                def LTR(cls):
                                                    return cls("LTR")
                                            __annotations__ = {
                                                "text": text,
                                                "romanizedText": romanizedText,
                                                "languageCode": languageCode,
                                                "textDirection": textDirection,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["text"]) -> MetaOapg.properties.text: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["romanizedText"]) -> MetaOapg.properties.romanizedText: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["languageCode"]) -> MetaOapg.properties.languageCode: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["textDirection"]) -> MetaOapg.properties.textDirection: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["text", "romanizedText", "languageCode", "textDirection", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["text"]) -> typing.Union[MetaOapg.properties.text, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["romanizedText"]) -> typing.Union[MetaOapg.properties.romanizedText, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["languageCode"]) -> typing.Union[MetaOapg.properties.languageCode, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["textDirection"]) -> typing.Union[MetaOapg.properties.textDirection, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["text", "romanizedText", "languageCode", "textDirection", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        text: typing.Union[MetaOapg.properties.text, str, schemas.Unset] = schemas.unset,
                                        romanizedText: typing.Union[MetaOapg.properties.romanizedText, str, schemas.Unset] = schemas.unset,
                                        languageCode: typing.Union[MetaOapg.properties.languageCode, str, schemas.Unset] = schemas.unset,
                                        textDirection: typing.Union[MetaOapg.properties.textDirection, str, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            text=text,
                                            romanizedText=romanizedText,
                                            languageCode=languageCode,
                                            textDirection=textDirection,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'mainTitles':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class seriesTitles(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            seriesTitle = schemas.StrSchema
                                            volume = schemas.StrSchema
                                            __annotations__ = {
                                                "seriesTitle": seriesTitle,
                                                "volume": volume,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["seriesTitle"]) -> MetaOapg.properties.seriesTitle: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["volume"]) -> MetaOapg.properties.volume: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["seriesTitle", "volume", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["seriesTitle"]) -> typing.Union[MetaOapg.properties.seriesTitle, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["volume"]) -> typing.Union[MetaOapg.properties.volume, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["seriesTitle", "volume", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        seriesTitle: typing.Union[MetaOapg.properties.seriesTitle, str, schemas.Unset] = schemas.unset,
                                        volume: typing.Union[MetaOapg.properties.volume, str, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            seriesTitle=seriesTitle,
                                            volume=volume,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'seriesTitles':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class uniformTitles(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'uniformTitles':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class additionalTitles(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            relationshipInfo = schemas.StrSchema
                                            
                                            
                                            class titles(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'titles':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            
                                            
                                            class issns(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'issns':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            
                                            
                                            class relators(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    
                                                    
                                                    class items(
                                                        schemas.DictSchema
                                                    ):
                                                    
                                                    
                                                        class MetaOapg:
                                                            
                                                            class properties:
                                                                term = schemas.StrSchema
                                                                alternateTerm = schemas.StrSchema
                                                                __annotations__ = {
                                                                    "term": term,
                                                                    "alternateTerm": alternateTerm,
                                                                }
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["term"]) -> MetaOapg.properties.term: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["alternateTerm"]) -> MetaOapg.properties.alternateTerm: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                        
                                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["term", "alternateTerm", ], str]):
                                                            # dict_instance[name] accessor
                                                            return super().__getitem__(name)
                                                        
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["term"]) -> typing.Union[MetaOapg.properties.term, schemas.Unset]: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["alternateTerm"]) -> typing.Union[MetaOapg.properties.alternateTerm, schemas.Unset]: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                        
                                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["term", "alternateTerm", ], str]):
                                                            return super().get_item_oapg(name)
                                                        
                                                    
                                                        def __new__(
                                                            cls,
                                                            *_args: typing.Union[dict, frozendict.frozendict, ],
                                                            term: typing.Union[MetaOapg.properties.term, str, schemas.Unset] = schemas.unset,
                                                            alternateTerm: typing.Union[MetaOapg.properties.alternateTerm, str, schemas.Unset] = schemas.unset,
                                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                        ) -> 'items':
                                                            return super().__new__(
                                                                cls,
                                                                *_args,
                                                                term=term,
                                                                alternateTerm=alternateTerm,
                                                                _configuration=_configuration,
                                                                **kwargs,
                                                            )
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'relators':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            relatedData = schemas.StrSchema
                                            additionalRelationshipInfo = schemas.StrSchema
                                            __annotations__ = {
                                                "relationshipInfo": relationshipInfo,
                                                "titles": titles,
                                                "issns": issns,
                                                "relators": relators,
                                                "relatedData": relatedData,
                                                "additionalRelationshipInfo": additionalRelationshipInfo,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["relationshipInfo"]) -> MetaOapg.properties.relationshipInfo: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["titles"]) -> MetaOapg.properties.titles: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["issns"]) -> MetaOapg.properties.issns: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["relators"]) -> MetaOapg.properties.relators: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["relatedData"]) -> MetaOapg.properties.relatedData: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["additionalRelationshipInfo"]) -> MetaOapg.properties.additionalRelationshipInfo: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["relationshipInfo", "titles", "issns", "relators", "relatedData", "additionalRelationshipInfo", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["relationshipInfo"]) -> typing.Union[MetaOapg.properties.relationshipInfo, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["titles"]) -> typing.Union[MetaOapg.properties.titles, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["issns"]) -> typing.Union[MetaOapg.properties.issns, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["relators"]) -> typing.Union[MetaOapg.properties.relators, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["relatedData"]) -> typing.Union[MetaOapg.properties.relatedData, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["additionalRelationshipInfo"]) -> typing.Union[MetaOapg.properties.additionalRelationshipInfo, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["relationshipInfo", "titles", "issns", "relators", "relatedData", "additionalRelationshipInfo", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        relationshipInfo: typing.Union[MetaOapg.properties.relationshipInfo, str, schemas.Unset] = schemas.unset,
                                        titles: typing.Union[MetaOapg.properties.titles, list, tuple, schemas.Unset] = schemas.unset,
                                        issns: typing.Union[MetaOapg.properties.issns, list, tuple, schemas.Unset] = schemas.unset,
                                        relators: typing.Union[MetaOapg.properties.relators, list, tuple, schemas.Unset] = schemas.unset,
                                        relatedData: typing.Union[MetaOapg.properties.relatedData, str, schemas.Unset] = schemas.unset,
                                        additionalRelationshipInfo: typing.Union[MetaOapg.properties.additionalRelationshipInfo, str, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            relationshipInfo=relationshipInfo,
                                            titles=titles,
                                            issns=issns,
                                            relators=relators,
                                            relatedData=relatedData,
                                            additionalRelationshipInfo=additionalRelationshipInfo,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'additionalTitles':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        __annotations__ = {
                            "mainTitles": mainTitles,
                            "seriesTitles": seriesTitles,
                            "uniformTitles": uniformTitles,
                            "additionalTitles": additionalTitles,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["mainTitles"]) -> MetaOapg.properties.mainTitles: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["seriesTitles"]) -> MetaOapg.properties.seriesTitles: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["uniformTitles"]) -> MetaOapg.properties.uniformTitles: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["additionalTitles"]) -> MetaOapg.properties.additionalTitles: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["mainTitles", "seriesTitles", "uniformTitles", "additionalTitles", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["mainTitles"]) -> typing.Union[MetaOapg.properties.mainTitles, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["seriesTitles"]) -> typing.Union[MetaOapg.properties.seriesTitles, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["uniformTitles"]) -> typing.Union[MetaOapg.properties.uniformTitles, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["additionalTitles"]) -> typing.Union[MetaOapg.properties.additionalTitles, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["mainTitles", "seriesTitles", "uniformTitles", "additionalTitles", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    mainTitles: typing.Union[MetaOapg.properties.mainTitles, list, tuple, schemas.Unset] = schemas.unset,
                    seriesTitles: typing.Union[MetaOapg.properties.seriesTitles, list, tuple, schemas.Unset] = schemas.unset,
                    uniformTitles: typing.Union[MetaOapg.properties.uniformTitles, list, tuple, schemas.Unset] = schemas.unset,
                    additionalTitles: typing.Union[MetaOapg.properties.additionalTitles, list, tuple, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'title':
                    return super().__new__(
                        cls,
                        *_args,
                        mainTitles=mainTitles,
                        seriesTitles=seriesTitles,
                        uniformTitles=uniformTitles,
                        additionalTitles=additionalTitles,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class contributor(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class creators(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            
                                            
                                            class firstName(
                                                schemas.DictSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    
                                                    class properties:
                                                        text = schemas.StrSchema
                                                        romanizedText = schemas.StrSchema
                                                        languageCode = schemas.StrSchema
                                                        
                                                        
                                                        class textDirection(
                                                            schemas.EnumBase,
                                                            schemas.StrSchema
                                                        ):
                                                            
                                                            @schemas.classproperty
                                                            def RTL(cls):
                                                                return cls("RTL")
                                                            
                                                            @schemas.classproperty
                                                            def LTR(cls):
                                                                return cls("LTR")
                                                        __annotations__ = {
                                                            "text": text,
                                                            "romanizedText": romanizedText,
                                                            "languageCode": languageCode,
                                                            "textDirection": textDirection,
                                                        }
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["text"]) -> MetaOapg.properties.text: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["romanizedText"]) -> MetaOapg.properties.romanizedText: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["languageCode"]) -> MetaOapg.properties.languageCode: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["textDirection"]) -> MetaOapg.properties.textDirection: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                
                                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["text", "romanizedText", "languageCode", "textDirection", ], str]):
                                                    # dict_instance[name] accessor
                                                    return super().__getitem__(name)
                                                
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["text"]) -> typing.Union[MetaOapg.properties.text, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["romanizedText"]) -> typing.Union[MetaOapg.properties.romanizedText, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["languageCode"]) -> typing.Union[MetaOapg.properties.languageCode, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["textDirection"]) -> typing.Union[MetaOapg.properties.textDirection, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                
                                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["text", "romanizedText", "languageCode", "textDirection", ], str]):
                                                    return super().get_item_oapg(name)
                                                
                                            
                                                def __new__(
                                                    cls,
                                                    *_args: typing.Union[dict, frozendict.frozendict, ],
                                                    text: typing.Union[MetaOapg.properties.text, str, schemas.Unset] = schemas.unset,
                                                    romanizedText: typing.Union[MetaOapg.properties.romanizedText, str, schemas.Unset] = schemas.unset,
                                                    languageCode: typing.Union[MetaOapg.properties.languageCode, str, schemas.Unset] = schemas.unset,
                                                    textDirection: typing.Union[MetaOapg.properties.textDirection, str, schemas.Unset] = schemas.unset,
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                ) -> 'firstName':
                                                    return super().__new__(
                                                        cls,
                                                        *_args,
                                                        text=text,
                                                        romanizedText=romanizedText,
                                                        languageCode=languageCode,
                                                        textDirection=textDirection,
                                                        _configuration=_configuration,
                                                        **kwargs,
                                                    )
                                            
                                            
                                            class secondName(
                                                schemas.DictSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    
                                                    class properties:
                                                        text = schemas.StrSchema
                                                        romanizedText = schemas.StrSchema
                                                        languageCode = schemas.StrSchema
                                                        
                                                        
                                                        class textDirection(
                                                            schemas.EnumBase,
                                                            schemas.StrSchema
                                                        ):
                                                            
                                                            @schemas.classproperty
                                                            def RTL(cls):
                                                                return cls("RTL")
                                                            
                                                            @schemas.classproperty
                                                            def LTR(cls):
                                                                return cls("LTR")
                                                        __annotations__ = {
                                                            "text": text,
                                                            "romanizedText": romanizedText,
                                                            "languageCode": languageCode,
                                                            "textDirection": textDirection,
                                                        }
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["text"]) -> MetaOapg.properties.text: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["romanizedText"]) -> MetaOapg.properties.romanizedText: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["languageCode"]) -> MetaOapg.properties.languageCode: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["textDirection"]) -> MetaOapg.properties.textDirection: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                
                                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["text", "romanizedText", "languageCode", "textDirection", ], str]):
                                                    # dict_instance[name] accessor
                                                    return super().__getitem__(name)
                                                
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["text"]) -> typing.Union[MetaOapg.properties.text, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["romanizedText"]) -> typing.Union[MetaOapg.properties.romanizedText, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["languageCode"]) -> typing.Union[MetaOapg.properties.languageCode, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["textDirection"]) -> typing.Union[MetaOapg.properties.textDirection, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                
                                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["text", "romanizedText", "languageCode", "textDirection", ], str]):
                                                    return super().get_item_oapg(name)
                                                
                                            
                                                def __new__(
                                                    cls,
                                                    *_args: typing.Union[dict, frozendict.frozendict, ],
                                                    text: typing.Union[MetaOapg.properties.text, str, schemas.Unset] = schemas.unset,
                                                    romanizedText: typing.Union[MetaOapg.properties.romanizedText, str, schemas.Unset] = schemas.unset,
                                                    languageCode: typing.Union[MetaOapg.properties.languageCode, str, schemas.Unset] = schemas.unset,
                                                    textDirection: typing.Union[MetaOapg.properties.textDirection, str, schemas.Unset] = schemas.unset,
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                ) -> 'secondName':
                                                    return super().__new__(
                                                        cls,
                                                        *_args,
                                                        text=text,
                                                        romanizedText=romanizedText,
                                                        languageCode=languageCode,
                                                        textDirection=textDirection,
                                                        _configuration=_configuration,
                                                        **kwargs,
                                                    )
                                            
                                            
                                            class nonPersonName(
                                                schemas.DictSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    
                                                    class properties:
                                                        text = schemas.StrSchema
                                                        romanizedText = schemas.StrSchema
                                                        languageCode = schemas.StrSchema
                                                        
                                                        
                                                        class textDirection(
                                                            schemas.EnumBase,
                                                            schemas.StrSchema
                                                        ):
                                                            
                                                            @schemas.classproperty
                                                            def RTL(cls):
                                                                return cls("RTL")
                                                            
                                                            @schemas.classproperty
                                                            def LTR(cls):
                                                                return cls("LTR")
                                                        __annotations__ = {
                                                            "text": text,
                                                            "romanizedText": romanizedText,
                                                            "languageCode": languageCode,
                                                            "textDirection": textDirection,
                                                        }
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["text"]) -> MetaOapg.properties.text: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["romanizedText"]) -> MetaOapg.properties.romanizedText: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["languageCode"]) -> MetaOapg.properties.languageCode: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["textDirection"]) -> MetaOapg.properties.textDirection: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                
                                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["text", "romanizedText", "languageCode", "textDirection", ], str]):
                                                    # dict_instance[name] accessor
                                                    return super().__getitem__(name)
                                                
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["text"]) -> typing.Union[MetaOapg.properties.text, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["romanizedText"]) -> typing.Union[MetaOapg.properties.romanizedText, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["languageCode"]) -> typing.Union[MetaOapg.properties.languageCode, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["textDirection"]) -> typing.Union[MetaOapg.properties.textDirection, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                
                                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["text", "romanizedText", "languageCode", "textDirection", ], str]):
                                                    return super().get_item_oapg(name)
                                                
                                            
                                                def __new__(
                                                    cls,
                                                    *_args: typing.Union[dict, frozendict.frozendict, ],
                                                    text: typing.Union[MetaOapg.properties.text, str, schemas.Unset] = schemas.unset,
                                                    romanizedText: typing.Union[MetaOapg.properties.romanizedText, str, schemas.Unset] = schemas.unset,
                                                    languageCode: typing.Union[MetaOapg.properties.languageCode, str, schemas.Unset] = schemas.unset,
                                                    textDirection: typing.Union[MetaOapg.properties.textDirection, str, schemas.Unset] = schemas.unset,
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                ) -> 'nonPersonName':
                                                    return super().__new__(
                                                        cls,
                                                        *_args,
                                                        text=text,
                                                        romanizedText=romanizedText,
                                                        languageCode=languageCode,
                                                        textDirection=textDirection,
                                                        _configuration=_configuration,
                                                        **kwargs,
                                                    )
                                            type = schemas.StrSchema
                                            
                                            
                                            class creatorNotes(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'creatorNotes':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            
                                            
                                            class relators(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    
                                                    
                                                    class items(
                                                        schemas.DictSchema
                                                    ):
                                                    
                                                    
                                                        class MetaOapg:
                                                            
                                                            class properties:
                                                                term = schemas.StrSchema
                                                                alternateTerm = schemas.StrSchema
                                                                __annotations__ = {
                                                                    "term": term,
                                                                    "alternateTerm": alternateTerm,
                                                                }
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["term"]) -> MetaOapg.properties.term: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["alternateTerm"]) -> MetaOapg.properties.alternateTerm: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                        
                                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["term", "alternateTerm", ], str]):
                                                            # dict_instance[name] accessor
                                                            return super().__getitem__(name)
                                                        
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["term"]) -> typing.Union[MetaOapg.properties.term, schemas.Unset]: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["alternateTerm"]) -> typing.Union[MetaOapg.properties.alternateTerm, schemas.Unset]: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                        
                                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["term", "alternateTerm", ], str]):
                                                            return super().get_item_oapg(name)
                                                        
                                                    
                                                        def __new__(
                                                            cls,
                                                            *_args: typing.Union[dict, frozendict.frozendict, ],
                                                            term: typing.Union[MetaOapg.properties.term, str, schemas.Unset] = schemas.unset,
                                                            alternateTerm: typing.Union[MetaOapg.properties.alternateTerm, str, schemas.Unset] = schemas.unset,
                                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                        ) -> 'items':
                                                            return super().__new__(
                                                                cls,
                                                                *_args,
                                                                term=term,
                                                                alternateTerm=alternateTerm,
                                                                _configuration=_configuration,
                                                                **kwargs,
                                                            )
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'relators':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            affiliation = schemas.StrSchema
                                            isPrimary = schemas.BoolSchema
                                            
                                            
                                            class relatedItem(
                                                schemas.DictSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    
                                                    class properties:
                                                        typeOfRelationship = schemas.StrSchema
                                                        relatedItemTitle = schemas.StrSchema
                                                        
                                                        
                                                        class relationshipInfo(
                                                            schemas.ListSchema
                                                        ):
                                                        
                                                        
                                                            class MetaOapg:
                                                                items = schemas.StrSchema
                                                        
                                                            def __new__(
                                                                cls,
                                                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                            ) -> 'relationshipInfo':
                                                                return super().__new__(
                                                                    cls,
                                                                    _arg,
                                                                    _configuration=_configuration,
                                                                )
                                                        
                                                            def __getitem__(self, i: int) -> MetaOapg.items:
                                                                return super().__getitem__(i)
                                                        
                                                        
                                                        class relatedParts(
                                                            schemas.ListSchema
                                                        ):
                                                        
                                                        
                                                            class MetaOapg:
                                                                items = schemas.StrSchema
                                                        
                                                            def __new__(
                                                                cls,
                                                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                            ) -> 'relatedParts':
                                                                return super().__new__(
                                                                    cls,
                                                                    _arg,
                                                                    _configuration=_configuration,
                                                                )
                                                        
                                                            def __getitem__(self, i: int) -> MetaOapg.items:
                                                                return super().__getitem__(i)
                                                        mainEntryHeading = schemas.StrSchema
                                                        edition = schemas.StrSchema
                                                        qualifyingInfo = schemas.StrSchema
                                                        publicationInfo = schemas.StrSchema
                                                        physicalDescription = schemas.StrSchema
                                                        
                                                        
                                                        class seriesData(
                                                            schemas.ListSchema
                                                        ):
                                                        
                                                        
                                                            class MetaOapg:
                                                                items = schemas.StrSchema
                                                        
                                                            def __new__(
                                                                cls,
                                                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                            ) -> 'seriesData':
                                                                return super().__new__(
                                                                    cls,
                                                                    _arg,
                                                                    _configuration=_configuration,
                                                                )
                                                        
                                                            def __getitem__(self, i: int) -> MetaOapg.items:
                                                                return super().__getitem__(i)
                                                        materialSpecificDetail = schemas.StrSchema
                                                        
                                                        
                                                        class relatedItemNotes(
                                                            schemas.ListSchema
                                                        ):
                                                        
                                                        
                                                            class MetaOapg:
                                                                items = schemas.StrSchema
                                                        
                                                            def __new__(
                                                                cls,
                                                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                            ) -> 'relatedItemNotes':
                                                                return super().__new__(
                                                                    cls,
                                                                    _arg,
                                                                    _configuration=_configuration,
                                                                )
                                                        
                                                            def __getitem__(self, i: int) -> MetaOapg.items:
                                                                return super().__getitem__(i)
                                                        
                                                        
                                                        class otherItemIdentifiers(
                                                            schemas.ListSchema
                                                        ):
                                                        
                                                        
                                                            class MetaOapg:
                                                                items = schemas.StrSchema
                                                        
                                                            def __new__(
                                                                cls,
                                                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                            ) -> 'otherItemIdentifiers':
                                                                return super().__new__(
                                                                    cls,
                                                                    _arg,
                                                                    _configuration=_configuration,
                                                                )
                                                        
                                                            def __getitem__(self, i: int) -> MetaOapg.items:
                                                                return super().__getitem__(i)
                                                        
                                                        
                                                        class reportNumbers(
                                                            schemas.ListSchema
                                                        ):
                                                        
                                                        
                                                            class MetaOapg:
                                                                items = schemas.StrSchema
                                                        
                                                            def __new__(
                                                                cls,
                                                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                            ) -> 'reportNumbers':
                                                                return super().__new__(
                                                                    cls,
                                                                    _arg,
                                                                    _configuration=_configuration,
                                                                )
                                                        
                                                            def __getitem__(self, i: int) -> MetaOapg.items:
                                                                return super().__getitem__(i)
                                                        uniformTitle = schemas.StrSchema
                                                        standardTechReportNumber = schemas.StrSchema
                                                        
                                                        
                                                        class recordControlNumbers(
                                                            schemas.ListSchema
                                                        ):
                                                        
                                                        
                                                            class MetaOapg:
                                                                items = schemas.StrSchema
                                                        
                                                            def __new__(
                                                                cls,
                                                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                            ) -> 'recordControlNumbers':
                                                                return super().__new__(
                                                                    cls,
                                                                    _arg,
                                                                    _configuration=_configuration,
                                                                )
                                                        
                                                            def __getitem__(self, i: int) -> MetaOapg.items:
                                                                return super().__getitem__(i)
                                                        
                                                        
                                                        class issns(
                                                            schemas.ListSchema
                                                        ):
                                                        
                                                        
                                                            class MetaOapg:
                                                                items = schemas.StrSchema
                                                        
                                                            def __new__(
                                                                cls,
                                                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                            ) -> 'issns':
                                                                return super().__new__(
                                                                    cls,
                                                                    _arg,
                                                                    _configuration=_configuration,
                                                                )
                                                        
                                                            def __getitem__(self, i: int) -> MetaOapg.items:
                                                                return super().__getitem__(i)
                                                        coden = schemas.StrSchema
                                                        
                                                        
                                                        class isbns(
                                                            schemas.ListSchema
                                                        ):
                                                        
                                                        
                                                            class MetaOapg:
                                                                items = schemas.StrSchema
                                                        
                                                            def __new__(
                                                                cls,
                                                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                            ) -> 'isbns':
                                                                return super().__new__(
                                                                    cls,
                                                                    _arg,
                                                                    _configuration=_configuration,
                                                                )
                                                        
                                                            def __getitem__(self, i: int) -> MetaOapg.items:
                                                                return super().__getitem__(i)
                                                        __annotations__ = {
                                                            "typeOfRelationship": typeOfRelationship,
                                                            "relatedItemTitle": relatedItemTitle,
                                                            "relationshipInfo": relationshipInfo,
                                                            "relatedParts": relatedParts,
                                                            "mainEntryHeading": mainEntryHeading,
                                                            "edition": edition,
                                                            "qualifyingInfo": qualifyingInfo,
                                                            "publicationInfo": publicationInfo,
                                                            "physicalDescription": physicalDescription,
                                                            "seriesData": seriesData,
                                                            "materialSpecificDetail": materialSpecificDetail,
                                                            "relatedItemNotes": relatedItemNotes,
                                                            "otherItemIdentifiers": otherItemIdentifiers,
                                                            "reportNumbers": reportNumbers,
                                                            "uniformTitle": uniformTitle,
                                                            "standardTechReportNumber": standardTechReportNumber,
                                                            "recordControlNumbers": recordControlNumbers,
                                                            "issns": issns,
                                                            "coden": coden,
                                                            "isbns": isbns,
                                                        }
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["typeOfRelationship"]) -> MetaOapg.properties.typeOfRelationship: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["relatedItemTitle"]) -> MetaOapg.properties.relatedItemTitle: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["relationshipInfo"]) -> MetaOapg.properties.relationshipInfo: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["relatedParts"]) -> MetaOapg.properties.relatedParts: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["mainEntryHeading"]) -> MetaOapg.properties.mainEntryHeading: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["edition"]) -> MetaOapg.properties.edition: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["qualifyingInfo"]) -> MetaOapg.properties.qualifyingInfo: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["publicationInfo"]) -> MetaOapg.properties.publicationInfo: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["physicalDescription"]) -> MetaOapg.properties.physicalDescription: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["seriesData"]) -> MetaOapg.properties.seriesData: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["materialSpecificDetail"]) -> MetaOapg.properties.materialSpecificDetail: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["relatedItemNotes"]) -> MetaOapg.properties.relatedItemNotes: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["otherItemIdentifiers"]) -> MetaOapg.properties.otherItemIdentifiers: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["reportNumbers"]) -> MetaOapg.properties.reportNumbers: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["uniformTitle"]) -> MetaOapg.properties.uniformTitle: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["standardTechReportNumber"]) -> MetaOapg.properties.standardTechReportNumber: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["recordControlNumbers"]) -> MetaOapg.properties.recordControlNumbers: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["issns"]) -> MetaOapg.properties.issns: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["coden"]) -> MetaOapg.properties.coden: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["isbns"]) -> MetaOapg.properties.isbns: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                
                                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["typeOfRelationship", "relatedItemTitle", "relationshipInfo", "relatedParts", "mainEntryHeading", "edition", "qualifyingInfo", "publicationInfo", "physicalDescription", "seriesData", "materialSpecificDetail", "relatedItemNotes", "otherItemIdentifiers", "reportNumbers", "uniformTitle", "standardTechReportNumber", "recordControlNumbers", "issns", "coden", "isbns", ], str]):
                                                    # dict_instance[name] accessor
                                                    return super().__getitem__(name)
                                                
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["typeOfRelationship"]) -> typing.Union[MetaOapg.properties.typeOfRelationship, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["relatedItemTitle"]) -> typing.Union[MetaOapg.properties.relatedItemTitle, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["relationshipInfo"]) -> typing.Union[MetaOapg.properties.relationshipInfo, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["relatedParts"]) -> typing.Union[MetaOapg.properties.relatedParts, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["mainEntryHeading"]) -> typing.Union[MetaOapg.properties.mainEntryHeading, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["edition"]) -> typing.Union[MetaOapg.properties.edition, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["qualifyingInfo"]) -> typing.Union[MetaOapg.properties.qualifyingInfo, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["publicationInfo"]) -> typing.Union[MetaOapg.properties.publicationInfo, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["physicalDescription"]) -> typing.Union[MetaOapg.properties.physicalDescription, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["seriesData"]) -> typing.Union[MetaOapg.properties.seriesData, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["materialSpecificDetail"]) -> typing.Union[MetaOapg.properties.materialSpecificDetail, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["relatedItemNotes"]) -> typing.Union[MetaOapg.properties.relatedItemNotes, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["otherItemIdentifiers"]) -> typing.Union[MetaOapg.properties.otherItemIdentifiers, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["reportNumbers"]) -> typing.Union[MetaOapg.properties.reportNumbers, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["uniformTitle"]) -> typing.Union[MetaOapg.properties.uniformTitle, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["standardTechReportNumber"]) -> typing.Union[MetaOapg.properties.standardTechReportNumber, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["recordControlNumbers"]) -> typing.Union[MetaOapg.properties.recordControlNumbers, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["issns"]) -> typing.Union[MetaOapg.properties.issns, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["coden"]) -> typing.Union[MetaOapg.properties.coden, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["isbns"]) -> typing.Union[MetaOapg.properties.isbns, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                
                                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["typeOfRelationship", "relatedItemTitle", "relationshipInfo", "relatedParts", "mainEntryHeading", "edition", "qualifyingInfo", "publicationInfo", "physicalDescription", "seriesData", "materialSpecificDetail", "relatedItemNotes", "otherItemIdentifiers", "reportNumbers", "uniformTitle", "standardTechReportNumber", "recordControlNumbers", "issns", "coden", "isbns", ], str]):
                                                    return super().get_item_oapg(name)
                                                
                                            
                                                def __new__(
                                                    cls,
                                                    *_args: typing.Union[dict, frozendict.frozendict, ],
                                                    typeOfRelationship: typing.Union[MetaOapg.properties.typeOfRelationship, str, schemas.Unset] = schemas.unset,
                                                    relatedItemTitle: typing.Union[MetaOapg.properties.relatedItemTitle, str, schemas.Unset] = schemas.unset,
                                                    relationshipInfo: typing.Union[MetaOapg.properties.relationshipInfo, list, tuple, schemas.Unset] = schemas.unset,
                                                    relatedParts: typing.Union[MetaOapg.properties.relatedParts, list, tuple, schemas.Unset] = schemas.unset,
                                                    mainEntryHeading: typing.Union[MetaOapg.properties.mainEntryHeading, str, schemas.Unset] = schemas.unset,
                                                    edition: typing.Union[MetaOapg.properties.edition, str, schemas.Unset] = schemas.unset,
                                                    qualifyingInfo: typing.Union[MetaOapg.properties.qualifyingInfo, str, schemas.Unset] = schemas.unset,
                                                    publicationInfo: typing.Union[MetaOapg.properties.publicationInfo, str, schemas.Unset] = schemas.unset,
                                                    physicalDescription: typing.Union[MetaOapg.properties.physicalDescription, str, schemas.Unset] = schemas.unset,
                                                    seriesData: typing.Union[MetaOapg.properties.seriesData, list, tuple, schemas.Unset] = schemas.unset,
                                                    materialSpecificDetail: typing.Union[MetaOapg.properties.materialSpecificDetail, str, schemas.Unset] = schemas.unset,
                                                    relatedItemNotes: typing.Union[MetaOapg.properties.relatedItemNotes, list, tuple, schemas.Unset] = schemas.unset,
                                                    otherItemIdentifiers: typing.Union[MetaOapg.properties.otherItemIdentifiers, list, tuple, schemas.Unset] = schemas.unset,
                                                    reportNumbers: typing.Union[MetaOapg.properties.reportNumbers, list, tuple, schemas.Unset] = schemas.unset,
                                                    uniformTitle: typing.Union[MetaOapg.properties.uniformTitle, str, schemas.Unset] = schemas.unset,
                                                    standardTechReportNumber: typing.Union[MetaOapg.properties.standardTechReportNumber, str, schemas.Unset] = schemas.unset,
                                                    recordControlNumbers: typing.Union[MetaOapg.properties.recordControlNumbers, list, tuple, schemas.Unset] = schemas.unset,
                                                    issns: typing.Union[MetaOapg.properties.issns, list, tuple, schemas.Unset] = schemas.unset,
                                                    coden: typing.Union[MetaOapg.properties.coden, str, schemas.Unset] = schemas.unset,
                                                    isbns: typing.Union[MetaOapg.properties.isbns, list, tuple, schemas.Unset] = schemas.unset,
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                ) -> 'relatedItem':
                                                    return super().__new__(
                                                        cls,
                                                        *_args,
                                                        typeOfRelationship=typeOfRelationship,
                                                        relatedItemTitle=relatedItemTitle,
                                                        relationshipInfo=relationshipInfo,
                                                        relatedParts=relatedParts,
                                                        mainEntryHeading=mainEntryHeading,
                                                        edition=edition,
                                                        qualifyingInfo=qualifyingInfo,
                                                        publicationInfo=publicationInfo,
                                                        physicalDescription=physicalDescription,
                                                        seriesData=seriesData,
                                                        materialSpecificDetail=materialSpecificDetail,
                                                        relatedItemNotes=relatedItemNotes,
                                                        otherItemIdentifiers=otherItemIdentifiers,
                                                        reportNumbers=reportNumbers,
                                                        uniformTitle=uniformTitle,
                                                        standardTechReportNumber=standardTechReportNumber,
                                                        recordControlNumbers=recordControlNumbers,
                                                        issns=issns,
                                                        coden=coden,
                                                        isbns=isbns,
                                                        _configuration=_configuration,
                                                        **kwargs,
                                                    )
                                            __annotations__ = {
                                                "firstName": firstName,
                                                "secondName": secondName,
                                                "nonPersonName": nonPersonName,
                                                "type": type,
                                                "creatorNotes": creatorNotes,
                                                "relators": relators,
                                                "affiliation": affiliation,
                                                "isPrimary": isPrimary,
                                                "relatedItem": relatedItem,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["firstName"]) -> MetaOapg.properties.firstName: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["secondName"]) -> MetaOapg.properties.secondName: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["nonPersonName"]) -> MetaOapg.properties.nonPersonName: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["creatorNotes"]) -> MetaOapg.properties.creatorNotes: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["relators"]) -> MetaOapg.properties.relators: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["affiliation"]) -> MetaOapg.properties.affiliation: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["isPrimary"]) -> MetaOapg.properties.isPrimary: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["relatedItem"]) -> MetaOapg.properties.relatedItem: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["firstName", "secondName", "nonPersonName", "type", "creatorNotes", "relators", "affiliation", "isPrimary", "relatedItem", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["firstName"]) -> typing.Union[MetaOapg.properties.firstName, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["secondName"]) -> typing.Union[MetaOapg.properties.secondName, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["nonPersonName"]) -> typing.Union[MetaOapg.properties.nonPersonName, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["creatorNotes"]) -> typing.Union[MetaOapg.properties.creatorNotes, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["relators"]) -> typing.Union[MetaOapg.properties.relators, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["affiliation"]) -> typing.Union[MetaOapg.properties.affiliation, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["isPrimary"]) -> typing.Union[MetaOapg.properties.isPrimary, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["relatedItem"]) -> typing.Union[MetaOapg.properties.relatedItem, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["firstName", "secondName", "nonPersonName", "type", "creatorNotes", "relators", "affiliation", "isPrimary", "relatedItem", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        firstName: typing.Union[MetaOapg.properties.firstName, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                        secondName: typing.Union[MetaOapg.properties.secondName, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                        nonPersonName: typing.Union[MetaOapg.properties.nonPersonName, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
                                        creatorNotes: typing.Union[MetaOapg.properties.creatorNotes, list, tuple, schemas.Unset] = schemas.unset,
                                        relators: typing.Union[MetaOapg.properties.relators, list, tuple, schemas.Unset] = schemas.unset,
                                        affiliation: typing.Union[MetaOapg.properties.affiliation, str, schemas.Unset] = schemas.unset,
                                        isPrimary: typing.Union[MetaOapg.properties.isPrimary, bool, schemas.Unset] = schemas.unset,
                                        relatedItem: typing.Union[MetaOapg.properties.relatedItem, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            firstName=firstName,
                                            secondName=secondName,
                                            nonPersonName=nonPersonName,
                                            type=type,
                                            creatorNotes=creatorNotes,
                                            relators=relators,
                                            affiliation=affiliation,
                                            isPrimary=isPrimary,
                                            relatedItem=relatedItem,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'creators':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class additionalCreators(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            relationshipInfo = schemas.StrSchema
                                            
                                            
                                            class titles(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'titles':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            
                                            
                                            class issns(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'issns':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            
                                            
                                            class relators(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    
                                                    
                                                    class items(
                                                        schemas.DictSchema
                                                    ):
                                                    
                                                    
                                                        class MetaOapg:
                                                            
                                                            class properties:
                                                                term = schemas.StrSchema
                                                                alternateTerm = schemas.StrSchema
                                                                __annotations__ = {
                                                                    "term": term,
                                                                    "alternateTerm": alternateTerm,
                                                                }
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["term"]) -> MetaOapg.properties.term: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["alternateTerm"]) -> MetaOapg.properties.alternateTerm: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                        
                                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["term", "alternateTerm", ], str]):
                                                            # dict_instance[name] accessor
                                                            return super().__getitem__(name)
                                                        
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["term"]) -> typing.Union[MetaOapg.properties.term, schemas.Unset]: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["alternateTerm"]) -> typing.Union[MetaOapg.properties.alternateTerm, schemas.Unset]: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                        
                                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["term", "alternateTerm", ], str]):
                                                            return super().get_item_oapg(name)
                                                        
                                                    
                                                        def __new__(
                                                            cls,
                                                            *_args: typing.Union[dict, frozendict.frozendict, ],
                                                            term: typing.Union[MetaOapg.properties.term, str, schemas.Unset] = schemas.unset,
                                                            alternateTerm: typing.Union[MetaOapg.properties.alternateTerm, str, schemas.Unset] = schemas.unset,
                                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                        ) -> 'items':
                                                            return super().__new__(
                                                                cls,
                                                                *_args,
                                                                term=term,
                                                                alternateTerm=alternateTerm,
                                                                _configuration=_configuration,
                                                                **kwargs,
                                                            )
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'relators':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            relatedData = schemas.StrSchema
                                            additionalRelationshipInfo = schemas.StrSchema
                                            __annotations__ = {
                                                "relationshipInfo": relationshipInfo,
                                                "titles": titles,
                                                "issns": issns,
                                                "relators": relators,
                                                "relatedData": relatedData,
                                                "additionalRelationshipInfo": additionalRelationshipInfo,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["relationshipInfo"]) -> MetaOapg.properties.relationshipInfo: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["titles"]) -> MetaOapg.properties.titles: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["issns"]) -> MetaOapg.properties.issns: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["relators"]) -> MetaOapg.properties.relators: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["relatedData"]) -> MetaOapg.properties.relatedData: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["additionalRelationshipInfo"]) -> MetaOapg.properties.additionalRelationshipInfo: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["relationshipInfo", "titles", "issns", "relators", "relatedData", "additionalRelationshipInfo", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["relationshipInfo"]) -> typing.Union[MetaOapg.properties.relationshipInfo, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["titles"]) -> typing.Union[MetaOapg.properties.titles, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["issns"]) -> typing.Union[MetaOapg.properties.issns, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["relators"]) -> typing.Union[MetaOapg.properties.relators, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["relatedData"]) -> typing.Union[MetaOapg.properties.relatedData, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["additionalRelationshipInfo"]) -> typing.Union[MetaOapg.properties.additionalRelationshipInfo, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["relationshipInfo", "titles", "issns", "relators", "relatedData", "additionalRelationshipInfo", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        relationshipInfo: typing.Union[MetaOapg.properties.relationshipInfo, str, schemas.Unset] = schemas.unset,
                                        titles: typing.Union[MetaOapg.properties.titles, list, tuple, schemas.Unset] = schemas.unset,
                                        issns: typing.Union[MetaOapg.properties.issns, list, tuple, schemas.Unset] = schemas.unset,
                                        relators: typing.Union[MetaOapg.properties.relators, list, tuple, schemas.Unset] = schemas.unset,
                                        relatedData: typing.Union[MetaOapg.properties.relatedData, str, schemas.Unset] = schemas.unset,
                                        additionalRelationshipInfo: typing.Union[MetaOapg.properties.additionalRelationshipInfo, str, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            relationshipInfo=relationshipInfo,
                                            titles=titles,
                                            issns=issns,
                                            relators=relators,
                                            relatedData=relatedData,
                                            additionalRelationshipInfo=additionalRelationshipInfo,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'additionalCreators':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class statementOfResponsibility(
                            schemas.ComposedSchema,
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class all_of_0(
                                    schemas.ComposedSchema,
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        
                                        class all_of_0(
                                            schemas.DictSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                
                                                class properties:
                                                    text = schemas.StrSchema
                                                    romanizedText = schemas.StrSchema
                                                    languageCode = schemas.StrSchema
                                                    
                                                    
                                                    class textDirection(
                                                        schemas.EnumBase,
                                                        schemas.StrSchema
                                                    ):
                                                        
                                                        @schemas.classproperty
                                                        def RTL(cls):
                                                            return cls("RTL")
                                                        
                                                        @schemas.classproperty
                                                        def LTR(cls):
                                                            return cls("LTR")
                                                    __annotations__ = {
                                                        "text": text,
                                                        "romanizedText": romanizedText,
                                                        "languageCode": languageCode,
                                                        "textDirection": textDirection,
                                                    }
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["text"]) -> MetaOapg.properties.text: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["romanizedText"]) -> MetaOapg.properties.romanizedText: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["languageCode"]) -> MetaOapg.properties.languageCode: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["textDirection"]) -> MetaOapg.properties.textDirection: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                            
                                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["text", "romanizedText", "languageCode", "textDirection", ], str]):
                                                # dict_instance[name] accessor
                                                return super().__getitem__(name)
                                            
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["text"]) -> typing.Union[MetaOapg.properties.text, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["romanizedText"]) -> typing.Union[MetaOapg.properties.romanizedText, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["languageCode"]) -> typing.Union[MetaOapg.properties.languageCode, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["textDirection"]) -> typing.Union[MetaOapg.properties.textDirection, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                            
                                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["text", "romanizedText", "languageCode", "textDirection", ], str]):
                                                return super().get_item_oapg(name)
                                            
                                        
                                            def __new__(
                                                cls,
                                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                                text: typing.Union[MetaOapg.properties.text, str, schemas.Unset] = schemas.unset,
                                                romanizedText: typing.Union[MetaOapg.properties.romanizedText, str, schemas.Unset] = schemas.unset,
                                                languageCode: typing.Union[MetaOapg.properties.languageCode, str, schemas.Unset] = schemas.unset,
                                                textDirection: typing.Union[MetaOapg.properties.textDirection, str, schemas.Unset] = schemas.unset,
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                            ) -> 'all_of_0':
                                                return super().__new__(
                                                    cls,
                                                    *_args,
                                                    text=text,
                                                    romanizedText=romanizedText,
                                                    languageCode=languageCode,
                                                    textDirection=textDirection,
                                                    _configuration=_configuration,
                                                    **kwargs,
                                                )
                                        
                                        @classmethod
                                        @functools.lru_cache()
                                        def all_of(cls):
                                            # we need this here to make our import statements work
                                            # we must store _composed_schemas in here so the code is only run
                                            # when we invoke this method. If we kept this at the class
                                            # level we would get an error because the class level
                                            # code would be run when this module is imported, and these composed
                                            # classes don't exist yet because their module has not finished
                                            # loading
                                            return [
                                                cls.all_of_0,
                                            ]
                                
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'all_of_0':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                
                                @classmethod
                                @functools.lru_cache()
                                def all_of(cls):
                                    # we need this here to make our import statements work
                                    # we must store _composed_schemas in here so the code is only run
                                    # when we invoke this method. If we kept this at the class
                                    # level we would get an error because the class level
                                    # code would be run when this module is imported, and these composed
                                    # classes don't exist yet because their module has not finished
                                    # loading
                                    return [
                                        cls.all_of_0,
                                    ]
                        
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'statementOfResponsibility':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        __annotations__ = {
                            "creators": creators,
                            "additionalCreators": additionalCreators,
                            "statementOfResponsibility": statementOfResponsibility,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["creators"]) -> MetaOapg.properties.creators: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["additionalCreators"]) -> MetaOapg.properties.additionalCreators: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["statementOfResponsibility"]) -> MetaOapg.properties.statementOfResponsibility: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["creators", "additionalCreators", "statementOfResponsibility", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["creators"]) -> typing.Union[MetaOapg.properties.creators, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["additionalCreators"]) -> typing.Union[MetaOapg.properties.additionalCreators, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["statementOfResponsibility"]) -> typing.Union[MetaOapg.properties.statementOfResponsibility, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["creators", "additionalCreators", "statementOfResponsibility", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    creators: typing.Union[MetaOapg.properties.creators, list, tuple, schemas.Unset] = schemas.unset,
                    additionalCreators: typing.Union[MetaOapg.properties.additionalCreators, list, tuple, schemas.Unset] = schemas.unset,
                    statementOfResponsibility: typing.Union[MetaOapg.properties.statementOfResponsibility, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'contributor':
                    return super().__new__(
                        cls,
                        *_args,
                        creators=creators,
                        additionalCreators=additionalCreators,
                        statementOfResponsibility=statementOfResponsibility,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class subjects(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                
                                
                                class subjectName(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            text = schemas.StrSchema
                                            romanizedText = schemas.StrSchema
                                            languageCode = schemas.StrSchema
                                            
                                            
                                            class textDirection(
                                                schemas.EnumBase,
                                                schemas.StrSchema
                                            ):
                                                
                                                @schemas.classproperty
                                                def RTL(cls):
                                                    return cls("RTL")
                                                
                                                @schemas.classproperty
                                                def LTR(cls):
                                                    return cls("LTR")
                                            __annotations__ = {
                                                "text": text,
                                                "romanizedText": romanizedText,
                                                "languageCode": languageCode,
                                                "textDirection": textDirection,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["text"]) -> MetaOapg.properties.text: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["romanizedText"]) -> MetaOapg.properties.romanizedText: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["languageCode"]) -> MetaOapg.properties.languageCode: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["textDirection"]) -> MetaOapg.properties.textDirection: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["text", "romanizedText", "languageCode", "textDirection", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["text"]) -> typing.Union[MetaOapg.properties.text, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["romanizedText"]) -> typing.Union[MetaOapg.properties.romanizedText, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["languageCode"]) -> typing.Union[MetaOapg.properties.languageCode, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["textDirection"]) -> typing.Union[MetaOapg.properties.textDirection, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["text", "romanizedText", "languageCode", "textDirection", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        text: typing.Union[MetaOapg.properties.text, str, schemas.Unset] = schemas.unset,
                                        romanizedText: typing.Union[MetaOapg.properties.romanizedText, str, schemas.Unset] = schemas.unset,
                                        languageCode: typing.Union[MetaOapg.properties.languageCode, str, schemas.Unset] = schemas.unset,
                                        textDirection: typing.Union[MetaOapg.properties.textDirection, str, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'subjectName':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            text=text,
                                            romanizedText=romanizedText,
                                            languageCode=languageCode,
                                            textDirection=textDirection,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                vocabulary = schemas.StrSchema
                                
                                
                                class relators(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        
                                        class items(
                                            schemas.DictSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                
                                                class properties:
                                                    term = schemas.StrSchema
                                                    alternateTerm = schemas.StrSchema
                                                    __annotations__ = {
                                                        "term": term,
                                                        "alternateTerm": alternateTerm,
                                                    }
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["term"]) -> MetaOapg.properties.term: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["alternateTerm"]) -> MetaOapg.properties.alternateTerm: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                            
                                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["term", "alternateTerm", ], str]):
                                                # dict_instance[name] accessor
                                                return super().__getitem__(name)
                                            
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["term"]) -> typing.Union[MetaOapg.properties.term, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["alternateTerm"]) -> typing.Union[MetaOapg.properties.alternateTerm, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                            
                                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["term", "alternateTerm", ], str]):
                                                return super().get_item_oapg(name)
                                            
                                        
                                            def __new__(
                                                cls,
                                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                                term: typing.Union[MetaOapg.properties.term, str, schemas.Unset] = schemas.unset,
                                                alternateTerm: typing.Union[MetaOapg.properties.alternateTerm, str, schemas.Unset] = schemas.unset,
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                            ) -> 'items':
                                                return super().__new__(
                                                    cls,
                                                    *_args,
                                                    term=term,
                                                    alternateTerm=alternateTerm,
                                                    _configuration=_configuration,
                                                    **kwargs,
                                                )
                                
                                    def __new__(
                                        cls,
                                        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'relators':
                                        return super().__new__(
                                            cls,
                                            _arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                subjectType = schemas.StrSchema
                                uri = schemas.StrSchema
                                __annotations__ = {
                                    "subjectName": subjectName,
                                    "vocabulary": vocabulary,
                                    "relators": relators,
                                    "subjectType": subjectType,
                                    "uri": uri,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["subjectName"]) -> MetaOapg.properties.subjectName: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["vocabulary"]) -> MetaOapg.properties.vocabulary: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["relators"]) -> MetaOapg.properties.relators: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["subjectType"]) -> MetaOapg.properties.subjectType: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["subjectName", "vocabulary", "relators", "subjectType", "uri", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["subjectName"]) -> typing.Union[MetaOapg.properties.subjectName, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["vocabulary"]) -> typing.Union[MetaOapg.properties.vocabulary, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["relators"]) -> typing.Union[MetaOapg.properties.relators, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["subjectType"]) -> typing.Union[MetaOapg.properties.subjectType, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["uri"]) -> typing.Union[MetaOapg.properties.uri, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["subjectName", "vocabulary", "relators", "subjectType", "uri", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            subjectName: typing.Union[MetaOapg.properties.subjectName, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                            vocabulary: typing.Union[MetaOapg.properties.vocabulary, str, schemas.Unset] = schemas.unset,
                            relators: typing.Union[MetaOapg.properties.relators, list, tuple, schemas.Unset] = schemas.unset,
                            subjectType: typing.Union[MetaOapg.properties.subjectType, str, schemas.Unset] = schemas.unset,
                            uri: typing.Union[MetaOapg.properties.uri, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                subjectName=subjectName,
                                vocabulary=vocabulary,
                                relators=relators,
                                subjectType=subjectType,
                                uri=uri,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'subjects':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class classification(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        dewey = schemas.StrSchema
                        lc = schemas.StrSchema
                        nlm = schemas.StrSchema
                        
                        
                        class govDoc(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'govDoc':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        __annotations__ = {
                            "dewey": dewey,
                            "lc": lc,
                            "nlm": nlm,
                            "govDoc": govDoc,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["dewey"]) -> MetaOapg.properties.dewey: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["lc"]) -> MetaOapg.properties.lc: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["nlm"]) -> MetaOapg.properties.nlm: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["govDoc"]) -> MetaOapg.properties.govDoc: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["dewey", "lc", "nlm", "govDoc", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["dewey"]) -> typing.Union[MetaOapg.properties.dewey, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["lc"]) -> typing.Union[MetaOapg.properties.lc, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["nlm"]) -> typing.Union[MetaOapg.properties.nlm, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["govDoc"]) -> typing.Union[MetaOapg.properties.govDoc, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["dewey", "lc", "nlm", "govDoc", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    dewey: typing.Union[MetaOapg.properties.dewey, str, schemas.Unset] = schemas.unset,
                    lc: typing.Union[MetaOapg.properties.lc, str, schemas.Unset] = schemas.unset,
                    nlm: typing.Union[MetaOapg.properties.nlm, str, schemas.Unset] = schemas.unset,
                    govDoc: typing.Union[MetaOapg.properties.govDoc, list, tuple, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'classification':
                    return super().__new__(
                        cls,
                        *_args,
                        dewey=dewey,
                        lc=lc,
                        nlm=nlm,
                        govDoc=govDoc,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class publishers(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                
                                
                                class publisherName(
                                    schemas.ComposedSchema,
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        
                                        class all_of_0(
                                            schemas.DictSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                
                                                class properties:
                                                    text = schemas.StrSchema
                                                    romanizedText = schemas.StrSchema
                                                    languageCode = schemas.StrSchema
                                                    
                                                    
                                                    class textDirection(
                                                        schemas.EnumBase,
                                                        schemas.StrSchema
                                                    ):
                                                        
                                                        @schemas.classproperty
                                                        def RTL(cls):
                                                            return cls("RTL")
                                                        
                                                        @schemas.classproperty
                                                        def LTR(cls):
                                                            return cls("LTR")
                                                    __annotations__ = {
                                                        "text": text,
                                                        "romanizedText": romanizedText,
                                                        "languageCode": languageCode,
                                                        "textDirection": textDirection,
                                                    }
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["text"]) -> MetaOapg.properties.text: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["romanizedText"]) -> MetaOapg.properties.romanizedText: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["languageCode"]) -> MetaOapg.properties.languageCode: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["textDirection"]) -> MetaOapg.properties.textDirection: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                            
                                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["text", "romanizedText", "languageCode", "textDirection", ], str]):
                                                # dict_instance[name] accessor
                                                return super().__getitem__(name)
                                            
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["text"]) -> typing.Union[MetaOapg.properties.text, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["romanizedText"]) -> typing.Union[MetaOapg.properties.romanizedText, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["languageCode"]) -> typing.Union[MetaOapg.properties.languageCode, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["textDirection"]) -> typing.Union[MetaOapg.properties.textDirection, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                            
                                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["text", "romanizedText", "languageCode", "textDirection", ], str]):
                                                return super().get_item_oapg(name)
                                            
                                        
                                            def __new__(
                                                cls,
                                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                                text: typing.Union[MetaOapg.properties.text, str, schemas.Unset] = schemas.unset,
                                                romanizedText: typing.Union[MetaOapg.properties.romanizedText, str, schemas.Unset] = schemas.unset,
                                                languageCode: typing.Union[MetaOapg.properties.languageCode, str, schemas.Unset] = schemas.unset,
                                                textDirection: typing.Union[MetaOapg.properties.textDirection, str, schemas.Unset] = schemas.unset,
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                            ) -> 'all_of_0':
                                                return super().__new__(
                                                    cls,
                                                    *_args,
                                                    text=text,
                                                    romanizedText=romanizedText,
                                                    languageCode=languageCode,
                                                    textDirection=textDirection,
                                                    _configuration=_configuration,
                                                    **kwargs,
                                                )
                                        
                                        @classmethod
                                        @functools.lru_cache()
                                        def all_of(cls):
                                            # we need this here to make our import statements work
                                            # we must store _composed_schemas in here so the code is only run
                                            # when we invoke this method. If we kept this at the class
                                            # level we would get an error because the class level
                                            # code would be run when this module is imported, and these composed
                                            # classes don't exist yet because their module has not finished
                                            # loading
                                            return [
                                                cls.all_of_0,
                                            ]
                                
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'publisherName':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                publicationPlace = schemas.StrSchema
                                __annotations__ = {
                                    "publisherName": publisherName,
                                    "publicationPlace": publicationPlace,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["publisherName"]) -> MetaOapg.properties.publisherName: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["publicationPlace"]) -> MetaOapg.properties.publicationPlace: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["publisherName", "publicationPlace", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["publisherName"]) -> typing.Union[MetaOapg.properties.publisherName, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["publicationPlace"]) -> typing.Union[MetaOapg.properties.publicationPlace, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["publisherName", "publicationPlace", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            publisherName: typing.Union[MetaOapg.properties.publisherName, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                            publicationPlace: typing.Union[MetaOapg.properties.publicationPlace, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                publisherName=publisherName,
                                publicationPlace=publicationPlace,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'publishers':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class date(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        publicationDate = schemas.StrSchema
                        publicationSequentialDesignationDate = schemas.StrSchema
                        currentPublicationFrequency = schemas.StrSchema
                        createDate = schemas.StrSchema
                        replaceDate = schemas.StrSchema
                        __annotations__ = {
                            "publicationDate": publicationDate,
                            "publicationSequentialDesignationDate": publicationSequentialDesignationDate,
                            "currentPublicationFrequency": currentPublicationFrequency,
                            "createDate": createDate,
                            "replaceDate": replaceDate,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["publicationDate"]) -> MetaOapg.properties.publicationDate: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["publicationSequentialDesignationDate"]) -> MetaOapg.properties.publicationSequentialDesignationDate: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["currentPublicationFrequency"]) -> MetaOapg.properties.currentPublicationFrequency: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["createDate"]) -> MetaOapg.properties.createDate: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["replaceDate"]) -> MetaOapg.properties.replaceDate: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["publicationDate", "publicationSequentialDesignationDate", "currentPublicationFrequency", "createDate", "replaceDate", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["publicationDate"]) -> typing.Union[MetaOapg.properties.publicationDate, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["publicationSequentialDesignationDate"]) -> typing.Union[MetaOapg.properties.publicationSequentialDesignationDate, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["currentPublicationFrequency"]) -> typing.Union[MetaOapg.properties.currentPublicationFrequency, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["createDate"]) -> typing.Union[MetaOapg.properties.createDate, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["replaceDate"]) -> typing.Union[MetaOapg.properties.replaceDate, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["publicationDate", "publicationSequentialDesignationDate", "currentPublicationFrequency", "createDate", "replaceDate", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    publicationDate: typing.Union[MetaOapg.properties.publicationDate, str, schemas.Unset] = schemas.unset,
                    publicationSequentialDesignationDate: typing.Union[MetaOapg.properties.publicationSequentialDesignationDate, str, schemas.Unset] = schemas.unset,
                    currentPublicationFrequency: typing.Union[MetaOapg.properties.currentPublicationFrequency, str, schemas.Unset] = schemas.unset,
                    createDate: typing.Union[MetaOapg.properties.createDate, str, schemas.Unset] = schemas.unset,
                    replaceDate: typing.Union[MetaOapg.properties.replaceDate, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'date':
                    return super().__new__(
                        cls,
                        *_args,
                        publicationDate=publicationDate,
                        publicationSequentialDesignationDate=publicationSequentialDesignationDate,
                        currentPublicationFrequency=currentPublicationFrequency,
                        createDate=createDate,
                        replaceDate=replaceDate,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class language(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        itemLanguage = schemas.StrSchema
                        catalogingLanguage = schemas.StrSchema
                        __annotations__ = {
                            "itemLanguage": itemLanguage,
                            "catalogingLanguage": catalogingLanguage,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["itemLanguage"]) -> MetaOapg.properties.itemLanguage: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["catalogingLanguage"]) -> MetaOapg.properties.catalogingLanguage: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["itemLanguage", "catalogingLanguage", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["itemLanguage"]) -> typing.Union[MetaOapg.properties.itemLanguage, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["catalogingLanguage"]) -> typing.Union[MetaOapg.properties.catalogingLanguage, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["itemLanguage", "catalogingLanguage", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    itemLanguage: typing.Union[MetaOapg.properties.itemLanguage, str, schemas.Unset] = schemas.unset,
                    catalogingLanguage: typing.Union[MetaOapg.properties.catalogingLanguage, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'language':
                    return super().__new__(
                        cls,
                        *_args,
                        itemLanguage=itemLanguage,
                        catalogingLanguage=catalogingLanguage,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class edition(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        statement = schemas.StrSchema
                        __annotations__ = {
                            "statement": statement,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["statement"]) -> MetaOapg.properties.statement: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["statement", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["statement"]) -> typing.Union[MetaOapg.properties.statement, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["statement", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    statement: typing.Union[MetaOapg.properties.statement, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'edition':
                    return super().__new__(
                        cls,
                        *_args,
                        statement=statement,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class source(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.ComposedBase,
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                
                                
                                class supplements(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        items = schemas.StrSchema
                                
                                    def __new__(
                                        cls,
                                        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'supplements':
                                        return super().__new__(
                                            cls,
                                            _arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                
                                
                                class firstPages(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        items = schemas.StrSchema
                                
                                    def __new__(
                                        cls,
                                        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'firstPages':
                                        return super().__new__(
                                            cls,
                                            _arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                
                                
                                class issueDates(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        items = schemas.StrSchema
                                
                                    def __new__(
                                        cls,
                                        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'issueDates':
                                        return super().__new__(
                                            cls,
                                            _arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                mainEntry = schemas.StrSchema
                                
                                
                                class otherPublicationData(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        items = schemas.StrSchema
                                
                                    def __new__(
                                        cls,
                                        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'otherPublicationData':
                                        return super().__new__(
                                            cls,
                                            _arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                __annotations__ = {
                                    "supplements": supplements,
                                    "firstPages": firstPages,
                                    "issueDates": issueDates,
                                    "mainEntry": mainEntry,
                                    "otherPublicationData": otherPublicationData,
                                }
                            
                            
                            class all_of_0(
                                schemas.DictSchema
                            ):
                            
                            
                                class MetaOapg:
                                    
                                    class properties:
                                        
                                        
                                        class relatedParts(
                                            schemas.ListSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                items = schemas.StrSchema
                                        
                                            def __new__(
                                                cls,
                                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                            ) -> 'relatedParts':
                                                return super().__new__(
                                                    cls,
                                                    _arg,
                                                    _configuration=_configuration,
                                                )
                                        
                                            def __getitem__(self, i: int) -> MetaOapg.items:
                                                return super().__getitem__(i)
                                        sourceTitle = schemas.StrSchema
                                        sourceIssn = schemas.StrSchema
                                        
                                        
                                        class sourceIsbns(
                                            schemas.ListSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                items = schemas.StrSchema
                                        
                                            def __new__(
                                                cls,
                                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                            ) -> 'sourceIsbns':
                                                return super().__new__(
                                                    cls,
                                                    _arg,
                                                    _configuration=_configuration,
                                                )
                                        
                                            def __getitem__(self, i: int) -> MetaOapg.items:
                                                return super().__getitem__(i)
                                        sourceAuthor = schemas.StrSchema
                                        publicationInformation = schemas.StrSchema
                                        
                                        
                                        class volumes(
                                            schemas.ListSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                items = schemas.StrSchema
                                        
                                            def __new__(
                                                cls,
                                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                            ) -> 'volumes':
                                                return super().__new__(
                                                    cls,
                                                    _arg,
                                                    _configuration=_configuration,
                                                )
                                        
                                            def __getitem__(self, i: int) -> MetaOapg.items:
                                                return super().__getitem__(i)
                                        
                                        
                                        class issues(
                                            schemas.ListSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                items = schemas.StrSchema
                                        
                                            def __new__(
                                                cls,
                                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                            ) -> 'issues':
                                                return super().__new__(
                                                    cls,
                                                    _arg,
                                                    _configuration=_configuration,
                                                )
                                        
                                            def __getitem__(self, i: int) -> MetaOapg.items:
                                                return super().__getitem__(i)
                                        
                                        
                                        class pageRanges(
                                            schemas.ListSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                items = schemas.StrSchema
                                        
                                            def __new__(
                                                cls,
                                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                            ) -> 'pageRanges':
                                                return super().__new__(
                                                    cls,
                                                    _arg,
                                                    _configuration=_configuration,
                                                )
                                        
                                            def __getitem__(self, i: int) -> MetaOapg.items:
                                                return super().__getitem__(i)
                                        __annotations__ = {
                                            "relatedParts": relatedParts,
                                            "sourceTitle": sourceTitle,
                                            "sourceIssn": sourceIssn,
                                            "sourceIsbns": sourceIsbns,
                                            "sourceAuthor": sourceAuthor,
                                            "publicationInformation": publicationInformation,
                                            "volumes": volumes,
                                            "issues": issues,
                                            "pageRanges": pageRanges,
                                        }
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["relatedParts"]) -> MetaOapg.properties.relatedParts: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["sourceTitle"]) -> MetaOapg.properties.sourceTitle: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["sourceIssn"]) -> MetaOapg.properties.sourceIssn: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["sourceIsbns"]) -> MetaOapg.properties.sourceIsbns: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["sourceAuthor"]) -> MetaOapg.properties.sourceAuthor: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["publicationInformation"]) -> MetaOapg.properties.publicationInformation: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["volumes"]) -> MetaOapg.properties.volumes: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["issues"]) -> MetaOapg.properties.issues: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["pageRanges"]) -> MetaOapg.properties.pageRanges: ...
                                
                                @typing.overload
                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                
                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["relatedParts", "sourceTitle", "sourceIssn", "sourceIsbns", "sourceAuthor", "publicationInformation", "volumes", "issues", "pageRanges", ], str]):
                                    # dict_instance[name] accessor
                                    return super().__getitem__(name)
                                
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["relatedParts"]) -> typing.Union[MetaOapg.properties.relatedParts, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["sourceTitle"]) -> typing.Union[MetaOapg.properties.sourceTitle, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["sourceIssn"]) -> typing.Union[MetaOapg.properties.sourceIssn, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["sourceIsbns"]) -> typing.Union[MetaOapg.properties.sourceIsbns, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["sourceAuthor"]) -> typing.Union[MetaOapg.properties.sourceAuthor, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["publicationInformation"]) -> typing.Union[MetaOapg.properties.publicationInformation, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["volumes"]) -> typing.Union[MetaOapg.properties.volumes, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["issues"]) -> typing.Union[MetaOapg.properties.issues, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["pageRanges"]) -> typing.Union[MetaOapg.properties.pageRanges, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                
                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["relatedParts", "sourceTitle", "sourceIssn", "sourceIsbns", "sourceAuthor", "publicationInformation", "volumes", "issues", "pageRanges", ], str]):
                                    return super().get_item_oapg(name)
                                
                            
                                def __new__(
                                    cls,
                                    *_args: typing.Union[dict, frozendict.frozendict, ],
                                    relatedParts: typing.Union[MetaOapg.properties.relatedParts, list, tuple, schemas.Unset] = schemas.unset,
                                    sourceTitle: typing.Union[MetaOapg.properties.sourceTitle, str, schemas.Unset] = schemas.unset,
                                    sourceIssn: typing.Union[MetaOapg.properties.sourceIssn, str, schemas.Unset] = schemas.unset,
                                    sourceIsbns: typing.Union[MetaOapg.properties.sourceIsbns, list, tuple, schemas.Unset] = schemas.unset,
                                    sourceAuthor: typing.Union[MetaOapg.properties.sourceAuthor, str, schemas.Unset] = schemas.unset,
                                    publicationInformation: typing.Union[MetaOapg.properties.publicationInformation, str, schemas.Unset] = schemas.unset,
                                    volumes: typing.Union[MetaOapg.properties.volumes, list, tuple, schemas.Unset] = schemas.unset,
                                    issues: typing.Union[MetaOapg.properties.issues, list, tuple, schemas.Unset] = schemas.unset,
                                    pageRanges: typing.Union[MetaOapg.properties.pageRanges, list, tuple, schemas.Unset] = schemas.unset,
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                ) -> 'all_of_0':
                                    return super().__new__(
                                        cls,
                                        *_args,
                                        relatedParts=relatedParts,
                                        sourceTitle=sourceTitle,
                                        sourceIssn=sourceIssn,
                                        sourceIsbns=sourceIsbns,
                                        sourceAuthor=sourceAuthor,
                                        publicationInformation=publicationInformation,
                                        volumes=volumes,
                                        issues=issues,
                                        pageRanges=pageRanges,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                            
                            @classmethod
                            @functools.lru_cache()
                            def all_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    cls.all_of_0,
                                ]
                    
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["supplements"]) -> MetaOapg.properties.supplements: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["firstPages"]) -> MetaOapg.properties.firstPages: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["issueDates"]) -> MetaOapg.properties.issueDates: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["mainEntry"]) -> MetaOapg.properties.mainEntry: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["otherPublicationData"]) -> MetaOapg.properties.otherPublicationData: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["supplements", "firstPages", "issueDates", "mainEntry", "otherPublicationData", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["supplements"]) -> typing.Union[MetaOapg.properties.supplements, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["firstPages"]) -> typing.Union[MetaOapg.properties.firstPages, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["issueDates"]) -> typing.Union[MetaOapg.properties.issueDates, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["mainEntry"]) -> typing.Union[MetaOapg.properties.mainEntry, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["otherPublicationData"]) -> typing.Union[MetaOapg.properties.otherPublicationData, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["supplements", "firstPages", "issueDates", "mainEntry", "otherPublicationData", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            supplements: typing.Union[MetaOapg.properties.supplements, list, tuple, schemas.Unset] = schemas.unset,
                            firstPages: typing.Union[MetaOapg.properties.firstPages, list, tuple, schemas.Unset] = schemas.unset,
                            issueDates: typing.Union[MetaOapg.properties.issueDates, list, tuple, schemas.Unset] = schemas.unset,
                            mainEntry: typing.Union[MetaOapg.properties.mainEntry, str, schemas.Unset] = schemas.unset,
                            otherPublicationData: typing.Union[MetaOapg.properties.otherPublicationData, list, tuple, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                supplements=supplements,
                                firstPages=firstPages,
                                issueDates=issueDates,
                                mainEntry=mainEntry,
                                otherPublicationData=otherPublicationData,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'source':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class note(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class generalNotes(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            text = schemas.StrSchema
                                            private = schemas.BoolSchema
                                            __annotations__ = {
                                                "text": text,
                                                "private": private,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["text"]) -> MetaOapg.properties.text: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["private"]) -> MetaOapg.properties.private: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["text", "private", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["text"]) -> typing.Union[MetaOapg.properties.text, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["private"]) -> typing.Union[MetaOapg.properties.private, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["text", "private", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        text: typing.Union[MetaOapg.properties.text, str, schemas.Unset] = schemas.unset,
                                        private: typing.Union[MetaOapg.properties.private, bool, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            text=text,
                                            private=private,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'generalNotes':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        audienceNote = schemas.StrSchema
                        
                        
                        class dissertationNotes(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            disserationNote = schemas.StrSchema
                                            type = schemas.StrSchema
                                            institution = schemas.StrSchema
                                            year = schemas.StrSchema
                                            id = schemas.StrSchema
                                            miscellaneousInfo = schemas.StrSchema
                                            __annotations__ = {
                                                "disserationNote": disserationNote,
                                                "type": type,
                                                "institution": institution,
                                                "year": year,
                                                "id": id,
                                                "miscellaneousInfo": miscellaneousInfo,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["disserationNote"]) -> MetaOapg.properties.disserationNote: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["institution"]) -> MetaOapg.properties.institution: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["year"]) -> MetaOapg.properties.year: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["miscellaneousInfo"]) -> MetaOapg.properties.miscellaneousInfo: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["disserationNote", "type", "institution", "year", "id", "miscellaneousInfo", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["disserationNote"]) -> typing.Union[MetaOapg.properties.disserationNote, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["institution"]) -> typing.Union[MetaOapg.properties.institution, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["year"]) -> typing.Union[MetaOapg.properties.year, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["miscellaneousInfo"]) -> typing.Union[MetaOapg.properties.miscellaneousInfo, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["disserationNote", "type", "institution", "year", "id", "miscellaneousInfo", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        disserationNote: typing.Union[MetaOapg.properties.disserationNote, str, schemas.Unset] = schemas.unset,
                                        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
                                        institution: typing.Union[MetaOapg.properties.institution, str, schemas.Unset] = schemas.unset,
                                        year: typing.Union[MetaOapg.properties.year, str, schemas.Unset] = schemas.unset,
                                        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                                        miscellaneousInfo: typing.Union[MetaOapg.properties.miscellaneousInfo, str, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            disserationNote=disserationNote,
                                            type=type,
                                            institution=institution,
                                            year=year,
                                            id=id,
                                            miscellaneousInfo=miscellaneousInfo,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'dissertationNotes':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class castNotes(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'castNotes':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class performerNotes(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'performerNotes':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        participantNote = schemas.StrSchema
                        
                        
                        class eventNotes(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            compositeNote = schemas.StrSchema
                                            eventDate = schemas.StrSchema
                                            eventPlace = schemas.StrSchema
                                            eventInfo = schemas.StrSchema
                                            material = schemas.StrSchema
                                            __annotations__ = {
                                                "compositeNote": compositeNote,
                                                "eventDate": eventDate,
                                                "eventPlace": eventPlace,
                                                "eventInfo": eventInfo,
                                                "material": material,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["compositeNote"]) -> MetaOapg.properties.compositeNote: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["eventDate"]) -> MetaOapg.properties.eventDate: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["eventPlace"]) -> MetaOapg.properties.eventPlace: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["eventInfo"]) -> MetaOapg.properties.eventInfo: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["material"]) -> MetaOapg.properties.material: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["compositeNote", "eventDate", "eventPlace", "eventInfo", "material", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["compositeNote"]) -> typing.Union[MetaOapg.properties.compositeNote, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["eventDate"]) -> typing.Union[MetaOapg.properties.eventDate, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["eventPlace"]) -> typing.Union[MetaOapg.properties.eventPlace, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["eventInfo"]) -> typing.Union[MetaOapg.properties.eventInfo, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["material"]) -> typing.Union[MetaOapg.properties.material, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["compositeNote", "eventDate", "eventPlace", "eventInfo", "material", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        compositeNote: typing.Union[MetaOapg.properties.compositeNote, str, schemas.Unset] = schemas.unset,
                                        eventDate: typing.Union[MetaOapg.properties.eventDate, str, schemas.Unset] = schemas.unset,
                                        eventPlace: typing.Union[MetaOapg.properties.eventPlace, str, schemas.Unset] = schemas.unset,
                                        eventInfo: typing.Union[MetaOapg.properties.eventInfo, str, schemas.Unset] = schemas.unset,
                                        material: typing.Union[MetaOapg.properties.material, str, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            compositeNote=compositeNote,
                                            eventDate=eventDate,
                                            eventPlace=eventPlace,
                                            eventInfo=eventInfo,
                                            material=material,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'eventNotes':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        creditNotes = schemas.StrSchema
                        
                        
                        class scaleNotes(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'scaleNotes':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class reproductionNotes(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.AnyTypeSchema,
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            reproductionType = schemas.StrSchema
                                            
                                            
                                            class reproductionPlace(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'reproductionPlace':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            
                                            
                                            class agency(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'agency':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            date = schemas.StrSchema
                                            physicalDescription = schemas.StrSchema
                                            
                                            
                                            class seriesStatement(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'seriesStatement':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            
                                            
                                            class datesIssuesReproduced(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'datesIssuesReproduced':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            
                                            
                                            class note(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'note':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            materialSpecified = schemas.StrSchema
                                            institution = schemas.StrSchema
                                            __annotations__ = {
                                                "reproductionType": reproductionType,
                                                "reproductionPlace": reproductionPlace,
                                                "agency": agency,
                                                "date": date,
                                                "physicalDescription": physicalDescription,
                                                "seriesStatement": seriesStatement,
                                                "datesIssuesReproduced": datesIssuesReproduced,
                                                "note": note,
                                                "materialSpecified": materialSpecified,
                                                "institution": institution,
                                            }
                                
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["reproductionType"]) -> MetaOapg.properties.reproductionType: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["reproductionPlace"]) -> MetaOapg.properties.reproductionPlace: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["agency"]) -> MetaOapg.properties.agency: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["physicalDescription"]) -> MetaOapg.properties.physicalDescription: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["seriesStatement"]) -> MetaOapg.properties.seriesStatement: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["datesIssuesReproduced"]) -> MetaOapg.properties.datesIssuesReproduced: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["note"]) -> MetaOapg.properties.note: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["materialSpecified"]) -> MetaOapg.properties.materialSpecified: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["institution"]) -> MetaOapg.properties.institution: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["reproductionType", "reproductionPlace", "agency", "date", "physicalDescription", "seriesStatement", "datesIssuesReproduced", "note", "materialSpecified", "institution", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["reproductionType"]) -> typing.Union[MetaOapg.properties.reproductionType, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["reproductionPlace"]) -> typing.Union[MetaOapg.properties.reproductionPlace, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["agency"]) -> typing.Union[MetaOapg.properties.agency, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> typing.Union[MetaOapg.properties.date, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["physicalDescription"]) -> typing.Union[MetaOapg.properties.physicalDescription, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["seriesStatement"]) -> typing.Union[MetaOapg.properties.seriesStatement, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["datesIssuesReproduced"]) -> typing.Union[MetaOapg.properties.datesIssuesReproduced, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["note"]) -> typing.Union[MetaOapg.properties.note, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["materialSpecified"]) -> typing.Union[MetaOapg.properties.materialSpecified, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["institution"]) -> typing.Union[MetaOapg.properties.institution, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["reproductionType", "reproductionPlace", "agency", "date", "physicalDescription", "seriesStatement", "datesIssuesReproduced", "note", "materialSpecified", "institution", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        reproductionType: typing.Union[MetaOapg.properties.reproductionType, str, schemas.Unset] = schemas.unset,
                                        reproductionPlace: typing.Union[MetaOapg.properties.reproductionPlace, list, tuple, schemas.Unset] = schemas.unset,
                                        agency: typing.Union[MetaOapg.properties.agency, list, tuple, schemas.Unset] = schemas.unset,
                                        date: typing.Union[MetaOapg.properties.date, str, schemas.Unset] = schemas.unset,
                                        physicalDescription: typing.Union[MetaOapg.properties.physicalDescription, str, schemas.Unset] = schemas.unset,
                                        seriesStatement: typing.Union[MetaOapg.properties.seriesStatement, list, tuple, schemas.Unset] = schemas.unset,
                                        datesIssuesReproduced: typing.Union[MetaOapg.properties.datesIssuesReproduced, list, tuple, schemas.Unset] = schemas.unset,
                                        note: typing.Union[MetaOapg.properties.note, list, tuple, schemas.Unset] = schemas.unset,
                                        materialSpecified: typing.Union[MetaOapg.properties.materialSpecified, str, schemas.Unset] = schemas.unset,
                                        institution: typing.Union[MetaOapg.properties.institution, str, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            reproductionType=reproductionType,
                                            reproductionPlace=reproductionPlace,
                                            agency=agency,
                                            date=date,
                                            physicalDescription=physicalDescription,
                                            seriesStatement=seriesStatement,
                                            datesIssuesReproduced=datesIssuesReproduced,
                                            note=note,
                                            materialSpecified=materialSpecified,
                                            institution=institution,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'reproductionNotes':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class useAndReproductionNotes(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'useAndReproductionNotes':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class useownershipAndCustodialHistories(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'useownershipAndCustodialHistories':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        systemDetailNote = schemas.StrSchema
                        awardNote = schemas.StrSchema
                        
                        
                        class languageNotes(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'languageNotes':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        __annotations__ = {
                            "generalNotes": generalNotes,
                            "audienceNote": audienceNote,
                            "dissertationNotes": dissertationNotes,
                            "castNotes": castNotes,
                            "performerNotes": performerNotes,
                            "participantNote": participantNote,
                            "eventNotes": eventNotes,
                            "creditNotes": creditNotes,
                            "scaleNotes": scaleNotes,
                            "reproductionNotes": reproductionNotes,
                            "useAndReproductionNotes": useAndReproductionNotes,
                            "useownershipAndCustodialHistories": useownershipAndCustodialHistories,
                            "systemDetailNote": systemDetailNote,
                            "awardNote": awardNote,
                            "languageNotes": languageNotes,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["generalNotes"]) -> MetaOapg.properties.generalNotes: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["audienceNote"]) -> MetaOapg.properties.audienceNote: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["dissertationNotes"]) -> MetaOapg.properties.dissertationNotes: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["castNotes"]) -> MetaOapg.properties.castNotes: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["performerNotes"]) -> MetaOapg.properties.performerNotes: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["participantNote"]) -> MetaOapg.properties.participantNote: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["eventNotes"]) -> MetaOapg.properties.eventNotes: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["creditNotes"]) -> MetaOapg.properties.creditNotes: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["scaleNotes"]) -> MetaOapg.properties.scaleNotes: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["reproductionNotes"]) -> MetaOapg.properties.reproductionNotes: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["useAndReproductionNotes"]) -> MetaOapg.properties.useAndReproductionNotes: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["useownershipAndCustodialHistories"]) -> MetaOapg.properties.useownershipAndCustodialHistories: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["systemDetailNote"]) -> MetaOapg.properties.systemDetailNote: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["awardNote"]) -> MetaOapg.properties.awardNote: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["languageNotes"]) -> MetaOapg.properties.languageNotes: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["generalNotes", "audienceNote", "dissertationNotes", "castNotes", "performerNotes", "participantNote", "eventNotes", "creditNotes", "scaleNotes", "reproductionNotes", "useAndReproductionNotes", "useownershipAndCustodialHistories", "systemDetailNote", "awardNote", "languageNotes", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["generalNotes"]) -> typing.Union[MetaOapg.properties.generalNotes, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["audienceNote"]) -> typing.Union[MetaOapg.properties.audienceNote, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["dissertationNotes"]) -> typing.Union[MetaOapg.properties.dissertationNotes, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["castNotes"]) -> typing.Union[MetaOapg.properties.castNotes, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["performerNotes"]) -> typing.Union[MetaOapg.properties.performerNotes, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["participantNote"]) -> typing.Union[MetaOapg.properties.participantNote, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["eventNotes"]) -> typing.Union[MetaOapg.properties.eventNotes, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["creditNotes"]) -> typing.Union[MetaOapg.properties.creditNotes, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["scaleNotes"]) -> typing.Union[MetaOapg.properties.scaleNotes, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["reproductionNotes"]) -> typing.Union[MetaOapg.properties.reproductionNotes, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["useAndReproductionNotes"]) -> typing.Union[MetaOapg.properties.useAndReproductionNotes, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["useownershipAndCustodialHistories"]) -> typing.Union[MetaOapg.properties.useownershipAndCustodialHistories, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["systemDetailNote"]) -> typing.Union[MetaOapg.properties.systemDetailNote, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["awardNote"]) -> typing.Union[MetaOapg.properties.awardNote, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["languageNotes"]) -> typing.Union[MetaOapg.properties.languageNotes, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["generalNotes", "audienceNote", "dissertationNotes", "castNotes", "performerNotes", "participantNote", "eventNotes", "creditNotes", "scaleNotes", "reproductionNotes", "useAndReproductionNotes", "useownershipAndCustodialHistories", "systemDetailNote", "awardNote", "languageNotes", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    generalNotes: typing.Union[MetaOapg.properties.generalNotes, list, tuple, schemas.Unset] = schemas.unset,
                    audienceNote: typing.Union[MetaOapg.properties.audienceNote, str, schemas.Unset] = schemas.unset,
                    dissertationNotes: typing.Union[MetaOapg.properties.dissertationNotes, list, tuple, schemas.Unset] = schemas.unset,
                    castNotes: typing.Union[MetaOapg.properties.castNotes, list, tuple, schemas.Unset] = schemas.unset,
                    performerNotes: typing.Union[MetaOapg.properties.performerNotes, list, tuple, schemas.Unset] = schemas.unset,
                    participantNote: typing.Union[MetaOapg.properties.participantNote, str, schemas.Unset] = schemas.unset,
                    eventNotes: typing.Union[MetaOapg.properties.eventNotes, list, tuple, schemas.Unset] = schemas.unset,
                    creditNotes: typing.Union[MetaOapg.properties.creditNotes, str, schemas.Unset] = schemas.unset,
                    scaleNotes: typing.Union[MetaOapg.properties.scaleNotes, list, tuple, schemas.Unset] = schemas.unset,
                    reproductionNotes: typing.Union[MetaOapg.properties.reproductionNotes, list, tuple, schemas.Unset] = schemas.unset,
                    useAndReproductionNotes: typing.Union[MetaOapg.properties.useAndReproductionNotes, list, tuple, schemas.Unset] = schemas.unset,
                    useownershipAndCustodialHistories: typing.Union[MetaOapg.properties.useownershipAndCustodialHistories, list, tuple, schemas.Unset] = schemas.unset,
                    systemDetailNote: typing.Union[MetaOapg.properties.systemDetailNote, str, schemas.Unset] = schemas.unset,
                    awardNote: typing.Union[MetaOapg.properties.awardNote, str, schemas.Unset] = schemas.unset,
                    languageNotes: typing.Union[MetaOapg.properties.languageNotes, list, tuple, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'note':
                    return super().__new__(
                        cls,
                        *_args,
                        generalNotes=generalNotes,
                        audienceNote=audienceNote,
                        dissertationNotes=dissertationNotes,
                        castNotes=castNotes,
                        performerNotes=performerNotes,
                        participantNote=participantNote,
                        eventNotes=eventNotes,
                        creditNotes=creditNotes,
                        scaleNotes=scaleNotes,
                        reproductionNotes=reproductionNotes,
                        useAndReproductionNotes=useAndReproductionNotes,
                        useownershipAndCustodialHistories=useownershipAndCustodialHistories,
                        systemDetailNote=systemDetailNote,
                        awardNote=awardNote,
                        languageNotes=languageNotes,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class format(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class generalFormat(
                            schemas.EnumBase,
                            schemas.StrSchema
                        ):
                            
                            @schemas.classproperty
                            def ARCHV(cls):
                                return cls("Archv")
                            
                            @schemas.classproperty
                            def ART_CHAPTER(cls):
                                return cls("ArtChapter")
                            
                            @schemas.classproperty
                            def AUDIO_BOOK(cls):
                                return cls("AudioBook")
                            
                            @schemas.classproperty
                            def BOOK(cls):
                                return cls("Book")
                            
                            @schemas.classproperty
                            def COMP_FILE(cls):
                                return cls("CompFile")
                            
                            @schemas.classproperty
                            def ENCYC(cls):
                                return cls("Encyc")
                            
                            @schemas.classproperty
                            def GAME(cls):
                                return cls("Game")
                            
                            @schemas.classproperty
                            def IMAGE(cls):
                                return cls("Image")
                            
                            @schemas.classproperty
                            def INT_MM(cls):
                                return cls("IntMM")
                            
                            @schemas.classproperty
                            def JRNL(cls):
                                return cls("Jrnl")
                            
                            @schemas.classproperty
                            def KIT(cls):
                                return cls("Kit")
                            
                            @schemas.classproperty
                            def MAP(cls):
                                return cls("Map")
                            
                            @schemas.classproperty
                            def MS_SCR(cls):
                                return cls("MsScr")
                            
                            @schemas.classproperty
                            def MUSIC(cls):
                                return cls("Music")
                            
                            @schemas.classproperty
                            def NEWS(cls):
                                return cls("News")
                            
                            @schemas.classproperty
                            def OBJECT(cls):
                                return cls("Object")
                            
                            @schemas.classproperty
                            def SND(cls):
                                return cls("Snd")
                            
                            @schemas.classproperty
                            def TOY(cls):
                                return cls("Toy")
                            
                            @schemas.classproperty
                            def VIDEO(cls):
                                return cls("Video")
                            
                            @schemas.classproperty
                            def VIS(cls):
                                return cls("Vis")
                            
                            @schemas.classproperty
                            def WEB(cls):
                                return cls("Web")
                        
                        
                        class specificFormat(
                            schemas.EnumBase,
                            schemas.StrSchema
                        ):
                            
                            @schemas.classproperty
                            def D(cls):
                                return cls("2D")
                            
                            @schemas.classproperty
                            def ARTCL(cls):
                                return cls("Artcl")
                            
                            @schemas.classproperty
                            def BLURAY(cls):
                                return cls("Bluray")
                            
                            @schemas.classproperty
                            def BRAILLE(cls):
                                return cls("Braille")
                            
                            @schemas.classproperty
                            def CASSETTE(cls):
                                return cls("Cassette")
                            
                            @schemas.classproperty
                            def CD(cls):
                                return cls("CD")
                            
                            @schemas.classproperty
                            def CHPTR(cls):
                                return cls("Chptr")
                            
                            @schemas.classproperty
                            def CONTINUING(cls):
                                return cls("Continuing")
                            
                            @schemas.classproperty
                            def DIGITAL(cls):
                                return cls("Digital")
                            
                            @schemas.classproperty
                            def DVD(cls):
                                return cls("DVD")
                            
                            @schemas.classproperty
                            def ENCYC(cls):
                                return cls("Encyc")
                            
                            @schemas.classproperty
                            def FILM(cls):
                                return cls("Film")
                            
                            @schemas.classproperty
                            def LARGE_PRINT(cls):
                                return cls("LargePrint")
                            
                            @schemas.classproperty
                            def LP(cls):
                                return cls("LP")
                            
                            @schemas.classproperty
                            def MIC(cls):
                                return cls("Mic")
                            
                            @schemas.classproperty
                            def MSS(cls):
                                return cls("mss")
                            
                            @schemas.classproperty
                            def PRINT_BOOK(cls):
                                return cls("PrintBook")
                            
                            @schemas.classproperty
                            def REC(cls):
                                return cls("rec")
                            
                            @schemas.classproperty
                            def THSIS(cls):
                                return cls("Thsis")
                            
                            @schemas.classproperty
                            def VHS(cls):
                                return cls("VHS")
                        
                        
                        class materialTypes(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'materialTypes':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        __annotations__ = {
                            "generalFormat": generalFormat,
                            "specificFormat": specificFormat,
                            "materialTypes": materialTypes,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["generalFormat"]) -> MetaOapg.properties.generalFormat: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["specificFormat"]) -> MetaOapg.properties.specificFormat: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["materialTypes"]) -> MetaOapg.properties.materialTypes: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["generalFormat", "specificFormat", "materialTypes", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["generalFormat"]) -> typing.Union[MetaOapg.properties.generalFormat, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["specificFormat"]) -> typing.Union[MetaOapg.properties.specificFormat, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["materialTypes"]) -> typing.Union[MetaOapg.properties.materialTypes, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["generalFormat", "specificFormat", "materialTypes", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    generalFormat: typing.Union[MetaOapg.properties.generalFormat, str, schemas.Unset] = schemas.unset,
                    specificFormat: typing.Union[MetaOapg.properties.specificFormat, str, schemas.Unset] = schemas.unset,
                    materialTypes: typing.Union[MetaOapg.properties.materialTypes, list, tuple, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'format':
                    return super().__new__(
                        cls,
                        *_args,
                        generalFormat=generalFormat,
                        specificFormat=specificFormat,
                        materialTypes=materialTypes,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class musicInfo(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class instrumentations(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            
                                            
                                            class mediumOfPerformance(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'mediumOfPerformance':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            
                                            
                                            class soloists(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'soloists':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            
                                            
                                            class doublingInstruments(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'doublingInstruments':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            
                                            
                                            class numberOfEnsemblesOfSameTypes(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'numberOfEnsemblesOfSameTypes':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            
                                            
                                            class numberOfPerformersOfSameMediums(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'numberOfPerformersOfSameMediums':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            
                                            
                                            class alternativeMediumOfPerformances(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'alternativeMediumOfPerformances':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            numberOfIndividualsPerforming = schemas.StrSchema
                                            numberOfPerformers = schemas.StrSchema
                                            numberOfEnsembles = schemas.StrSchema
                                            __annotations__ = {
                                                "mediumOfPerformance": mediumOfPerformance,
                                                "soloists": soloists,
                                                "doublingInstruments": doublingInstruments,
                                                "numberOfEnsemblesOfSameTypes": numberOfEnsemblesOfSameTypes,
                                                "numberOfPerformersOfSameMediums": numberOfPerformersOfSameMediums,
                                                "alternativeMediumOfPerformances": alternativeMediumOfPerformances,
                                                "numberOfIndividualsPerforming": numberOfIndividualsPerforming,
                                                "numberOfPerformers": numberOfPerformers,
                                                "numberOfEnsembles": numberOfEnsembles,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["mediumOfPerformance"]) -> MetaOapg.properties.mediumOfPerformance: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["soloists"]) -> MetaOapg.properties.soloists: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["doublingInstruments"]) -> MetaOapg.properties.doublingInstruments: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["numberOfEnsemblesOfSameTypes"]) -> MetaOapg.properties.numberOfEnsemblesOfSameTypes: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["numberOfPerformersOfSameMediums"]) -> MetaOapg.properties.numberOfPerformersOfSameMediums: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["alternativeMediumOfPerformances"]) -> MetaOapg.properties.alternativeMediumOfPerformances: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["numberOfIndividualsPerforming"]) -> MetaOapg.properties.numberOfIndividualsPerforming: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["numberOfPerformers"]) -> MetaOapg.properties.numberOfPerformers: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["numberOfEnsembles"]) -> MetaOapg.properties.numberOfEnsembles: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["mediumOfPerformance", "soloists", "doublingInstruments", "numberOfEnsemblesOfSameTypes", "numberOfPerformersOfSameMediums", "alternativeMediumOfPerformances", "numberOfIndividualsPerforming", "numberOfPerformers", "numberOfEnsembles", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["mediumOfPerformance"]) -> typing.Union[MetaOapg.properties.mediumOfPerformance, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["soloists"]) -> typing.Union[MetaOapg.properties.soloists, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["doublingInstruments"]) -> typing.Union[MetaOapg.properties.doublingInstruments, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["numberOfEnsemblesOfSameTypes"]) -> typing.Union[MetaOapg.properties.numberOfEnsemblesOfSameTypes, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["numberOfPerformersOfSameMediums"]) -> typing.Union[MetaOapg.properties.numberOfPerformersOfSameMediums, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["alternativeMediumOfPerformances"]) -> typing.Union[MetaOapg.properties.alternativeMediumOfPerformances, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["numberOfIndividualsPerforming"]) -> typing.Union[MetaOapg.properties.numberOfIndividualsPerforming, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["numberOfPerformers"]) -> typing.Union[MetaOapg.properties.numberOfPerformers, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["numberOfEnsembles"]) -> typing.Union[MetaOapg.properties.numberOfEnsembles, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["mediumOfPerformance", "soloists", "doublingInstruments", "numberOfEnsemblesOfSameTypes", "numberOfPerformersOfSameMediums", "alternativeMediumOfPerformances", "numberOfIndividualsPerforming", "numberOfPerformers", "numberOfEnsembles", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        mediumOfPerformance: typing.Union[MetaOapg.properties.mediumOfPerformance, list, tuple, schemas.Unset] = schemas.unset,
                                        soloists: typing.Union[MetaOapg.properties.soloists, list, tuple, schemas.Unset] = schemas.unset,
                                        doublingInstruments: typing.Union[MetaOapg.properties.doublingInstruments, list, tuple, schemas.Unset] = schemas.unset,
                                        numberOfEnsemblesOfSameTypes: typing.Union[MetaOapg.properties.numberOfEnsemblesOfSameTypes, list, tuple, schemas.Unset] = schemas.unset,
                                        numberOfPerformersOfSameMediums: typing.Union[MetaOapg.properties.numberOfPerformersOfSameMediums, list, tuple, schemas.Unset] = schemas.unset,
                                        alternativeMediumOfPerformances: typing.Union[MetaOapg.properties.alternativeMediumOfPerformances, list, tuple, schemas.Unset] = schemas.unset,
                                        numberOfIndividualsPerforming: typing.Union[MetaOapg.properties.numberOfIndividualsPerforming, str, schemas.Unset] = schemas.unset,
                                        numberOfPerformers: typing.Union[MetaOapg.properties.numberOfPerformers, str, schemas.Unset] = schemas.unset,
                                        numberOfEnsembles: typing.Union[MetaOapg.properties.numberOfEnsembles, str, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            mediumOfPerformance=mediumOfPerformance,
                                            soloists=soloists,
                                            doublingInstruments=doublingInstruments,
                                            numberOfEnsemblesOfSameTypes=numberOfEnsemblesOfSameTypes,
                                            numberOfPerformersOfSameMediums=numberOfPerformersOfSameMediums,
                                            alternativeMediumOfPerformances=alternativeMediumOfPerformances,
                                            numberOfIndividualsPerforming=numberOfIndividualsPerforming,
                                            numberOfPerformers=numberOfPerformers,
                                            numberOfEnsembles=numberOfEnsembles,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'instrumentations':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        musicalKey = schemas.StrSchema
                        
                        
                        class instrumentsCodes(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'instrumentsCodes':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        numericDesignation = schemas.StrSchema
                        musicalPresentationStatement = schemas.StrSchema
                        __annotations__ = {
                            "instrumentations": instrumentations,
                            "musicalKey": musicalKey,
                            "instrumentsCodes": instrumentsCodes,
                            "numericDesignation": numericDesignation,
                            "musicalPresentationStatement": musicalPresentationStatement,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["instrumentations"]) -> MetaOapg.properties.instrumentations: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["musicalKey"]) -> MetaOapg.properties.musicalKey: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["instrumentsCodes"]) -> MetaOapg.properties.instrumentsCodes: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["numericDesignation"]) -> MetaOapg.properties.numericDesignation: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["musicalPresentationStatement"]) -> MetaOapg.properties.musicalPresentationStatement: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["instrumentations", "musicalKey", "instrumentsCodes", "numericDesignation", "musicalPresentationStatement", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["instrumentations"]) -> typing.Union[MetaOapg.properties.instrumentations, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["musicalKey"]) -> typing.Union[MetaOapg.properties.musicalKey, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["instrumentsCodes"]) -> typing.Union[MetaOapg.properties.instrumentsCodes, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["numericDesignation"]) -> typing.Union[MetaOapg.properties.numericDesignation, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["musicalPresentationStatement"]) -> typing.Union[MetaOapg.properties.musicalPresentationStatement, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["instrumentations", "musicalKey", "instrumentsCodes", "numericDesignation", "musicalPresentationStatement", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    instrumentations: typing.Union[MetaOapg.properties.instrumentations, list, tuple, schemas.Unset] = schemas.unset,
                    musicalKey: typing.Union[MetaOapg.properties.musicalKey, str, schemas.Unset] = schemas.unset,
                    instrumentsCodes: typing.Union[MetaOapg.properties.instrumentsCodes, list, tuple, schemas.Unset] = schemas.unset,
                    numericDesignation: typing.Union[MetaOapg.properties.numericDesignation, str, schemas.Unset] = schemas.unset,
                    musicalPresentationStatement: typing.Union[MetaOapg.properties.musicalPresentationStatement, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'musicInfo':
                    return super().__new__(
                        cls,
                        *_args,
                        instrumentations=instrumentations,
                        musicalKey=musicalKey,
                        instrumentsCodes=instrumentsCodes,
                        numericDesignation=numericDesignation,
                        musicalPresentationStatement=musicalPresentationStatement,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class digitalAccessAndLocations(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "uri",
                            }
                            
                            class properties:
                                uri = schemas.StrSchema
                                materialSpecified = schemas.StrSchema
                                
                                
                                class instructions(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        items = schemas.StrSchema
                                
                                    def __new__(
                                        cls,
                                        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'instructions':
                                        return super().__new__(
                                            cls,
                                            _arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                
                                
                                class linkText(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        items = schemas.StrSchema
                                
                                    def __new__(
                                        cls,
                                        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'linkText':
                                        return super().__new__(
                                            cls,
                                            _arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                nonPublicNote = schemas.StrSchema
                                
                                
                                class publicNote(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        items = schemas.StrSchema
                                
                                    def __new__(
                                        cls,
                                        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'publicNote':
                                        return super().__new__(
                                            cls,
                                            _arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                accessMethod = schemas.StrSchema
                                accessStatus = schemas.StrSchema
                                
                                
                                class relationship(
                                    schemas.EnumBase,
                                    schemas.StrSchema
                                ):
                                    
                                    @schemas.classproperty
                                    def UNKNOWN(cls):
                                        return cls("unknown")
                                    
                                    @schemas.classproperty
                                    def RESOURCE(cls):
                                        return cls("resource")
                                    
                                    @schemas.classproperty
                                    def VERSION_OF_RESOURCE(cls):
                                        return cls("version of resource")
                                    
                                    @schemas.classproperty
                                    def RELATED_RESOURCE(cls):
                                        return cls("related resource")
                                __annotations__ = {
                                    "uri": uri,
                                    "materialSpecified": materialSpecified,
                                    "instructions": instructions,
                                    "linkText": linkText,
                                    "nonPublicNote": nonPublicNote,
                                    "publicNote": publicNote,
                                    "accessMethod": accessMethod,
                                    "accessStatus": accessStatus,
                                    "relationship": relationship,
                                }
                        
                        uri: MetaOapg.properties.uri
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["materialSpecified"]) -> MetaOapg.properties.materialSpecified: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["instructions"]) -> MetaOapg.properties.instructions: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["linkText"]) -> MetaOapg.properties.linkText: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["nonPublicNote"]) -> MetaOapg.properties.nonPublicNote: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["publicNote"]) -> MetaOapg.properties.publicNote: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["accessMethod"]) -> MetaOapg.properties.accessMethod: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["accessStatus"]) -> MetaOapg.properties.accessStatus: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["relationship"]) -> MetaOapg.properties.relationship: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["uri", "materialSpecified", "instructions", "linkText", "nonPublicNote", "publicNote", "accessMethod", "accessStatus", "relationship", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["materialSpecified"]) -> typing.Union[MetaOapg.properties.materialSpecified, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["instructions"]) -> typing.Union[MetaOapg.properties.instructions, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["linkText"]) -> typing.Union[MetaOapg.properties.linkText, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["nonPublicNote"]) -> typing.Union[MetaOapg.properties.nonPublicNote, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["publicNote"]) -> typing.Union[MetaOapg.properties.publicNote, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["accessMethod"]) -> typing.Union[MetaOapg.properties.accessMethod, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["accessStatus"]) -> typing.Union[MetaOapg.properties.accessStatus, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["relationship"]) -> typing.Union[MetaOapg.properties.relationship, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["uri", "materialSpecified", "instructions", "linkText", "nonPublicNote", "publicNote", "accessMethod", "accessStatus", "relationship", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            uri: typing.Union[MetaOapg.properties.uri, str, ],
                            materialSpecified: typing.Union[MetaOapg.properties.materialSpecified, str, schemas.Unset] = schemas.unset,
                            instructions: typing.Union[MetaOapg.properties.instructions, list, tuple, schemas.Unset] = schemas.unset,
                            linkText: typing.Union[MetaOapg.properties.linkText, list, tuple, schemas.Unset] = schemas.unset,
                            nonPublicNote: typing.Union[MetaOapg.properties.nonPublicNote, str, schemas.Unset] = schemas.unset,
                            publicNote: typing.Union[MetaOapg.properties.publicNote, list, tuple, schemas.Unset] = schemas.unset,
                            accessMethod: typing.Union[MetaOapg.properties.accessMethod, str, schemas.Unset] = schemas.unset,
                            accessStatus: typing.Union[MetaOapg.properties.accessStatus, str, schemas.Unset] = schemas.unset,
                            relationship: typing.Union[MetaOapg.properties.relationship, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                uri=uri,
                                materialSpecified=materialSpecified,
                                instructions=instructions,
                                linkText=linkText,
                                nonPublicNote=nonPublicNote,
                                publicNote=publicNote,
                                accessMethod=accessMethod,
                                accessStatus=accessStatus,
                                relationship=relationship,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'digitalAccessAndLocations':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class description(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        physicalDescription = schemas.StrSchema
                        digitalGraphicRepresentation = schemas.StrSchema
                        
                        
                        class genres(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'genres':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class cartographicData(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'cartographicData':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class computerFilesCharacteristics(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'computerFilesCharacteristics':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class formOfWorks(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'formOfWorks':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class abstracts(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            text = schemas.StrSchema
                                            romanizedText = schemas.StrSchema
                                            languageCode = schemas.StrSchema
                                            
                                            
                                            class textDirection(
                                                schemas.EnumBase,
                                                schemas.StrSchema
                                            ):
                                                
                                                @schemas.classproperty
                                                def RTL(cls):
                                                    return cls("RTL")
                                                
                                                @schemas.classproperty
                                                def LTR(cls):
                                                    return cls("LTR")
                                            __annotations__ = {
                                                "text": text,
                                                "romanizedText": romanizedText,
                                                "languageCode": languageCode,
                                                "textDirection": textDirection,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["text"]) -> MetaOapg.properties.text: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["romanizedText"]) -> MetaOapg.properties.romanizedText: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["languageCode"]) -> MetaOapg.properties.languageCode: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["textDirection"]) -> MetaOapg.properties.textDirection: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["text", "romanizedText", "languageCode", "textDirection", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["text"]) -> typing.Union[MetaOapg.properties.text, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["romanizedText"]) -> typing.Union[MetaOapg.properties.romanizedText, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["languageCode"]) -> typing.Union[MetaOapg.properties.languageCode, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["textDirection"]) -> typing.Union[MetaOapg.properties.textDirection, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["text", "romanizedText", "languageCode", "textDirection", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        text: typing.Union[MetaOapg.properties.text, str, schemas.Unset] = schemas.unset,
                                        romanizedText: typing.Union[MetaOapg.properties.romanizedText, str, schemas.Unset] = schemas.unset,
                                        languageCode: typing.Union[MetaOapg.properties.languageCode, str, schemas.Unset] = schemas.unset,
                                        textDirection: typing.Union[MetaOapg.properties.textDirection, str, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            text=text,
                                            romanizedText=romanizedText,
                                            languageCode=languageCode,
                                            textDirection=textDirection,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'abstracts':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class summaries(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            text = schemas.StrSchema
                                            romanizedText = schemas.StrSchema
                                            languageCode = schemas.StrSchema
                                            
                                            
                                            class textDirection(
                                                schemas.EnumBase,
                                                schemas.StrSchema
                                            ):
                                                
                                                @schemas.classproperty
                                                def RTL(cls):
                                                    return cls("RTL")
                                                
                                                @schemas.classproperty
                                                def LTR(cls):
                                                    return cls("LTR")
                                            __annotations__ = {
                                                "text": text,
                                                "romanizedText": romanizedText,
                                                "languageCode": languageCode,
                                                "textDirection": textDirection,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["text"]) -> MetaOapg.properties.text: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["romanizedText"]) -> MetaOapg.properties.romanizedText: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["languageCode"]) -> MetaOapg.properties.languageCode: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["textDirection"]) -> MetaOapg.properties.textDirection: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["text", "romanizedText", "languageCode", "textDirection", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["text"]) -> typing.Union[MetaOapg.properties.text, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["romanizedText"]) -> typing.Union[MetaOapg.properties.romanizedText, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["languageCode"]) -> typing.Union[MetaOapg.properties.languageCode, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["textDirection"]) -> typing.Union[MetaOapg.properties.textDirection, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["text", "romanizedText", "languageCode", "textDirection", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        text: typing.Union[MetaOapg.properties.text, str, schemas.Unset] = schemas.unset,
                                        romanizedText: typing.Union[MetaOapg.properties.romanizedText, str, schemas.Unset] = schemas.unset,
                                        languageCode: typing.Union[MetaOapg.properties.languageCode, str, schemas.Unset] = schemas.unset,
                                        textDirection: typing.Union[MetaOapg.properties.textDirection, str, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            text=text,
                                            romanizedText=romanizedText,
                                            languageCode=languageCode,
                                            textDirection=textDirection,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'summaries':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class contents(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            
                                            
                                            class contentNote(
                                                schemas.DictSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    
                                                    class properties:
                                                        text = schemas.StrSchema
                                                        romanizedText = schemas.StrSchema
                                                        languageCode = schemas.StrSchema
                                                        
                                                        
                                                        class textDirection(
                                                            schemas.EnumBase,
                                                            schemas.StrSchema
                                                        ):
                                                            
                                                            @schemas.classproperty
                                                            def RTL(cls):
                                                                return cls("RTL")
                                                            
                                                            @schemas.classproperty
                                                            def LTR(cls):
                                                                return cls("LTR")
                                                        __annotations__ = {
                                                            "text": text,
                                                            "romanizedText": romanizedText,
                                                            "languageCode": languageCode,
                                                            "textDirection": textDirection,
                                                        }
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["text"]) -> MetaOapg.properties.text: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["romanizedText"]) -> MetaOapg.properties.romanizedText: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["languageCode"]) -> MetaOapg.properties.languageCode: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["textDirection"]) -> MetaOapg.properties.textDirection: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                
                                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["text", "romanizedText", "languageCode", "textDirection", ], str]):
                                                    # dict_instance[name] accessor
                                                    return super().__getitem__(name)
                                                
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["text"]) -> typing.Union[MetaOapg.properties.text, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["romanizedText"]) -> typing.Union[MetaOapg.properties.romanizedText, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["languageCode"]) -> typing.Union[MetaOapg.properties.languageCode, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["textDirection"]) -> typing.Union[MetaOapg.properties.textDirection, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                
                                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["text", "romanizedText", "languageCode", "textDirection", ], str]):
                                                    return super().get_item_oapg(name)
                                                
                                            
                                                def __new__(
                                                    cls,
                                                    *_args: typing.Union[dict, frozendict.frozendict, ],
                                                    text: typing.Union[MetaOapg.properties.text, str, schemas.Unset] = schemas.unset,
                                                    romanizedText: typing.Union[MetaOapg.properties.romanizedText, str, schemas.Unset] = schemas.unset,
                                                    languageCode: typing.Union[MetaOapg.properties.languageCode, str, schemas.Unset] = schemas.unset,
                                                    textDirection: typing.Union[MetaOapg.properties.textDirection, str, schemas.Unset] = schemas.unset,
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                ) -> 'contentNote':
                                                    return super().__new__(
                                                        cls,
                                                        *_args,
                                                        text=text,
                                                        romanizedText=romanizedText,
                                                        languageCode=languageCode,
                                                        textDirection=textDirection,
                                                        _configuration=_configuration,
                                                        **kwargs,
                                                    )
                                            
                                            
                                            class titles(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'titles':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            
                                            
                                            class miscellaneousInfo(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'miscellaneousInfo':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            
                                            
                                            class statementsOfResponsibility(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'statementsOfResponsibility':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            
                                            
                                            class uris(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'uris':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            __annotations__ = {
                                                "contentNote": contentNote,
                                                "titles": titles,
                                                "miscellaneousInfo": miscellaneousInfo,
                                                "statementsOfResponsibility": statementsOfResponsibility,
                                                "uris": uris,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["contentNote"]) -> MetaOapg.properties.contentNote: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["titles"]) -> MetaOapg.properties.titles: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["miscellaneousInfo"]) -> MetaOapg.properties.miscellaneousInfo: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["statementsOfResponsibility"]) -> MetaOapg.properties.statementsOfResponsibility: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["uris"]) -> MetaOapg.properties.uris: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["contentNote", "titles", "miscellaneousInfo", "statementsOfResponsibility", "uris", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["contentNote"]) -> typing.Union[MetaOapg.properties.contentNote, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["titles"]) -> typing.Union[MetaOapg.properties.titles, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["miscellaneousInfo"]) -> typing.Union[MetaOapg.properties.miscellaneousInfo, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["statementsOfResponsibility"]) -> typing.Union[MetaOapg.properties.statementsOfResponsibility, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["uris"]) -> typing.Union[MetaOapg.properties.uris, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["contentNote", "titles", "miscellaneousInfo", "statementsOfResponsibility", "uris", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        contentNote: typing.Union[MetaOapg.properties.contentNote, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                        titles: typing.Union[MetaOapg.properties.titles, list, tuple, schemas.Unset] = schemas.unset,
                                        miscellaneousInfo: typing.Union[MetaOapg.properties.miscellaneousInfo, list, tuple, schemas.Unset] = schemas.unset,
                                        statementsOfResponsibility: typing.Union[MetaOapg.properties.statementsOfResponsibility, list, tuple, schemas.Unset] = schemas.unset,
                                        uris: typing.Union[MetaOapg.properties.uris, list, tuple, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            contentNote=contentNote,
                                            titles=titles,
                                            miscellaneousInfo=miscellaneousInfo,
                                            statementsOfResponsibility=statementsOfResponsibility,
                                            uris=uris,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'contents':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class bibliographies(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            text = schemas.StrSchema
                                            romanizedText = schemas.StrSchema
                                            languageCode = schemas.StrSchema
                                            
                                            
                                            class textDirection(
                                                schemas.EnumBase,
                                                schemas.StrSchema
                                            ):
                                                
                                                @schemas.classproperty
                                                def RTL(cls):
                                                    return cls("RTL")
                                                
                                                @schemas.classproperty
                                                def LTR(cls):
                                                    return cls("LTR")
                                            __annotations__ = {
                                                "text": text,
                                                "romanizedText": romanizedText,
                                                "languageCode": languageCode,
                                                "textDirection": textDirection,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["text"]) -> MetaOapg.properties.text: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["romanizedText"]) -> MetaOapg.properties.romanizedText: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["languageCode"]) -> MetaOapg.properties.languageCode: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["textDirection"]) -> MetaOapg.properties.textDirection: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["text", "romanizedText", "languageCode", "textDirection", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["text"]) -> typing.Union[MetaOapg.properties.text, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["romanizedText"]) -> typing.Union[MetaOapg.properties.romanizedText, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["languageCode"]) -> typing.Union[MetaOapg.properties.languageCode, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["textDirection"]) -> typing.Union[MetaOapg.properties.textDirection, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["text", "romanizedText", "languageCode", "textDirection", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        text: typing.Union[MetaOapg.properties.text, str, schemas.Unset] = schemas.unset,
                                        romanizedText: typing.Union[MetaOapg.properties.romanizedText, str, schemas.Unset] = schemas.unset,
                                        languageCode: typing.Union[MetaOapg.properties.languageCode, str, schemas.Unset] = schemas.unset,
                                        textDirection: typing.Union[MetaOapg.properties.textDirection, str, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            text=text,
                                            romanizedText=romanizedText,
                                            languageCode=languageCode,
                                            textDirection=textDirection,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'bibliographies':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class peerReviewed(
                            schemas.EnumBase,
                            schemas.StrSchema
                        ):
                            
                            @schemas.classproperty
                            def Y(cls):
                                return cls("Y")
                            
                            @schemas.classproperty
                            def N(cls):
                                return cls("N")
                        __annotations__ = {
                            "physicalDescription": physicalDescription,
                            "digitalGraphicRepresentation": digitalGraphicRepresentation,
                            "genres": genres,
                            "cartographicData": cartographicData,
                            "computerFilesCharacteristics": computerFilesCharacteristics,
                            "formOfWorks": formOfWorks,
                            "abstracts": abstracts,
                            "summaries": summaries,
                            "contents": contents,
                            "bibliographies": bibliographies,
                            "peerReviewed": peerReviewed,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["physicalDescription"]) -> MetaOapg.properties.physicalDescription: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["digitalGraphicRepresentation"]) -> MetaOapg.properties.digitalGraphicRepresentation: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["genres"]) -> MetaOapg.properties.genres: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["cartographicData"]) -> MetaOapg.properties.cartographicData: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["computerFilesCharacteristics"]) -> MetaOapg.properties.computerFilesCharacteristics: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["formOfWorks"]) -> MetaOapg.properties.formOfWorks: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["abstracts"]) -> MetaOapg.properties.abstracts: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["summaries"]) -> MetaOapg.properties.summaries: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["contents"]) -> MetaOapg.properties.contents: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["bibliographies"]) -> MetaOapg.properties.bibliographies: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["peerReviewed"]) -> MetaOapg.properties.peerReviewed: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["physicalDescription", "digitalGraphicRepresentation", "genres", "cartographicData", "computerFilesCharacteristics", "formOfWorks", "abstracts", "summaries", "contents", "bibliographies", "peerReviewed", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["physicalDescription"]) -> typing.Union[MetaOapg.properties.physicalDescription, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["digitalGraphicRepresentation"]) -> typing.Union[MetaOapg.properties.digitalGraphicRepresentation, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["genres"]) -> typing.Union[MetaOapg.properties.genres, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["cartographicData"]) -> typing.Union[MetaOapg.properties.cartographicData, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["computerFilesCharacteristics"]) -> typing.Union[MetaOapg.properties.computerFilesCharacteristics, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["formOfWorks"]) -> typing.Union[MetaOapg.properties.formOfWorks, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["abstracts"]) -> typing.Union[MetaOapg.properties.abstracts, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["summaries"]) -> typing.Union[MetaOapg.properties.summaries, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["contents"]) -> typing.Union[MetaOapg.properties.contents, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["bibliographies"]) -> typing.Union[MetaOapg.properties.bibliographies, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["peerReviewed"]) -> typing.Union[MetaOapg.properties.peerReviewed, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["physicalDescription", "digitalGraphicRepresentation", "genres", "cartographicData", "computerFilesCharacteristics", "formOfWorks", "abstracts", "summaries", "contents", "bibliographies", "peerReviewed", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    physicalDescription: typing.Union[MetaOapg.properties.physicalDescription, str, schemas.Unset] = schemas.unset,
                    digitalGraphicRepresentation: typing.Union[MetaOapg.properties.digitalGraphicRepresentation, str, schemas.Unset] = schemas.unset,
                    genres: typing.Union[MetaOapg.properties.genres, list, tuple, schemas.Unset] = schemas.unset,
                    cartographicData: typing.Union[MetaOapg.properties.cartographicData, list, tuple, schemas.Unset] = schemas.unset,
                    computerFilesCharacteristics: typing.Union[MetaOapg.properties.computerFilesCharacteristics, list, tuple, schemas.Unset] = schemas.unset,
                    formOfWorks: typing.Union[MetaOapg.properties.formOfWorks, list, tuple, schemas.Unset] = schemas.unset,
                    abstracts: typing.Union[MetaOapg.properties.abstracts, list, tuple, schemas.Unset] = schemas.unset,
                    summaries: typing.Union[MetaOapg.properties.summaries, list, tuple, schemas.Unset] = schemas.unset,
                    contents: typing.Union[MetaOapg.properties.contents, list, tuple, schemas.Unset] = schemas.unset,
                    bibliographies: typing.Union[MetaOapg.properties.bibliographies, list, tuple, schemas.Unset] = schemas.unset,
                    peerReviewed: typing.Union[MetaOapg.properties.peerReviewed, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'description':
                    return super().__new__(
                        cls,
                        *_args,
                        physicalDescription=physicalDescription,
                        digitalGraphicRepresentation=digitalGraphicRepresentation,
                        genres=genres,
                        cartographicData=cartographicData,
                        computerFilesCharacteristics=computerFilesCharacteristics,
                        formOfWorks=formOfWorks,
                        abstracts=abstracts,
                        summaries=summaries,
                        contents=contents,
                        bibliographies=bibliographies,
                        peerReviewed=peerReviewed,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class related(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class relatedItems(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            typeOfRelationship = schemas.StrSchema
                                            relatedItemTitle = schemas.StrSchema
                                            
                                            
                                            class relationshipInfo(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'relationshipInfo':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            
                                            
                                            class relatedParts(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'relatedParts':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            mainEntryHeading = schemas.StrSchema
                                            edition = schemas.StrSchema
                                            qualifyingInfo = schemas.StrSchema
                                            publicationInfo = schemas.StrSchema
                                            physicalDescription = schemas.StrSchema
                                            
                                            
                                            class seriesData(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'seriesData':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            materialSpecificDetail = schemas.StrSchema
                                            
                                            
                                            class relatedItemNotes(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'relatedItemNotes':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            
                                            
                                            class otherItemIdentifiers(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'otherItemIdentifiers':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            
                                            
                                            class reportNumbers(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'reportNumbers':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            uniformTitle = schemas.StrSchema
                                            standardTechReportNumber = schemas.StrSchema
                                            
                                            
                                            class recordControlNumbers(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'recordControlNumbers':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            
                                            
                                            class issns(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'issns':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            coden = schemas.StrSchema
                                            
                                            
                                            class isbns(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'isbns':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            __annotations__ = {
                                                "typeOfRelationship": typeOfRelationship,
                                                "relatedItemTitle": relatedItemTitle,
                                                "relationshipInfo": relationshipInfo,
                                                "relatedParts": relatedParts,
                                                "mainEntryHeading": mainEntryHeading,
                                                "edition": edition,
                                                "qualifyingInfo": qualifyingInfo,
                                                "publicationInfo": publicationInfo,
                                                "physicalDescription": physicalDescription,
                                                "seriesData": seriesData,
                                                "materialSpecificDetail": materialSpecificDetail,
                                                "relatedItemNotes": relatedItemNotes,
                                                "otherItemIdentifiers": otherItemIdentifiers,
                                                "reportNumbers": reportNumbers,
                                                "uniformTitle": uniformTitle,
                                                "standardTechReportNumber": standardTechReportNumber,
                                                "recordControlNumbers": recordControlNumbers,
                                                "issns": issns,
                                                "coden": coden,
                                                "isbns": isbns,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["typeOfRelationship"]) -> MetaOapg.properties.typeOfRelationship: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["relatedItemTitle"]) -> MetaOapg.properties.relatedItemTitle: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["relationshipInfo"]) -> MetaOapg.properties.relationshipInfo: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["relatedParts"]) -> MetaOapg.properties.relatedParts: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["mainEntryHeading"]) -> MetaOapg.properties.mainEntryHeading: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["edition"]) -> MetaOapg.properties.edition: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["qualifyingInfo"]) -> MetaOapg.properties.qualifyingInfo: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["publicationInfo"]) -> MetaOapg.properties.publicationInfo: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["physicalDescription"]) -> MetaOapg.properties.physicalDescription: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["seriesData"]) -> MetaOapg.properties.seriesData: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["materialSpecificDetail"]) -> MetaOapg.properties.materialSpecificDetail: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["relatedItemNotes"]) -> MetaOapg.properties.relatedItemNotes: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["otherItemIdentifiers"]) -> MetaOapg.properties.otherItemIdentifiers: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["reportNumbers"]) -> MetaOapg.properties.reportNumbers: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["uniformTitle"]) -> MetaOapg.properties.uniformTitle: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["standardTechReportNumber"]) -> MetaOapg.properties.standardTechReportNumber: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["recordControlNumbers"]) -> MetaOapg.properties.recordControlNumbers: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["issns"]) -> MetaOapg.properties.issns: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["coden"]) -> MetaOapg.properties.coden: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["isbns"]) -> MetaOapg.properties.isbns: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["typeOfRelationship", "relatedItemTitle", "relationshipInfo", "relatedParts", "mainEntryHeading", "edition", "qualifyingInfo", "publicationInfo", "physicalDescription", "seriesData", "materialSpecificDetail", "relatedItemNotes", "otherItemIdentifiers", "reportNumbers", "uniformTitle", "standardTechReportNumber", "recordControlNumbers", "issns", "coden", "isbns", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["typeOfRelationship"]) -> typing.Union[MetaOapg.properties.typeOfRelationship, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["relatedItemTitle"]) -> typing.Union[MetaOapg.properties.relatedItemTitle, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["relationshipInfo"]) -> typing.Union[MetaOapg.properties.relationshipInfo, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["relatedParts"]) -> typing.Union[MetaOapg.properties.relatedParts, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["mainEntryHeading"]) -> typing.Union[MetaOapg.properties.mainEntryHeading, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["edition"]) -> typing.Union[MetaOapg.properties.edition, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["qualifyingInfo"]) -> typing.Union[MetaOapg.properties.qualifyingInfo, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["publicationInfo"]) -> typing.Union[MetaOapg.properties.publicationInfo, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["physicalDescription"]) -> typing.Union[MetaOapg.properties.physicalDescription, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["seriesData"]) -> typing.Union[MetaOapg.properties.seriesData, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["materialSpecificDetail"]) -> typing.Union[MetaOapg.properties.materialSpecificDetail, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["relatedItemNotes"]) -> typing.Union[MetaOapg.properties.relatedItemNotes, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["otherItemIdentifiers"]) -> typing.Union[MetaOapg.properties.otherItemIdentifiers, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["reportNumbers"]) -> typing.Union[MetaOapg.properties.reportNumbers, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["uniformTitle"]) -> typing.Union[MetaOapg.properties.uniformTitle, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["standardTechReportNumber"]) -> typing.Union[MetaOapg.properties.standardTechReportNumber, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["recordControlNumbers"]) -> typing.Union[MetaOapg.properties.recordControlNumbers, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["issns"]) -> typing.Union[MetaOapg.properties.issns, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["coden"]) -> typing.Union[MetaOapg.properties.coden, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["isbns"]) -> typing.Union[MetaOapg.properties.isbns, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["typeOfRelationship", "relatedItemTitle", "relationshipInfo", "relatedParts", "mainEntryHeading", "edition", "qualifyingInfo", "publicationInfo", "physicalDescription", "seriesData", "materialSpecificDetail", "relatedItemNotes", "otherItemIdentifiers", "reportNumbers", "uniformTitle", "standardTechReportNumber", "recordControlNumbers", "issns", "coden", "isbns", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        typeOfRelationship: typing.Union[MetaOapg.properties.typeOfRelationship, str, schemas.Unset] = schemas.unset,
                                        relatedItemTitle: typing.Union[MetaOapg.properties.relatedItemTitle, str, schemas.Unset] = schemas.unset,
                                        relationshipInfo: typing.Union[MetaOapg.properties.relationshipInfo, list, tuple, schemas.Unset] = schemas.unset,
                                        relatedParts: typing.Union[MetaOapg.properties.relatedParts, list, tuple, schemas.Unset] = schemas.unset,
                                        mainEntryHeading: typing.Union[MetaOapg.properties.mainEntryHeading, str, schemas.Unset] = schemas.unset,
                                        edition: typing.Union[MetaOapg.properties.edition, str, schemas.Unset] = schemas.unset,
                                        qualifyingInfo: typing.Union[MetaOapg.properties.qualifyingInfo, str, schemas.Unset] = schemas.unset,
                                        publicationInfo: typing.Union[MetaOapg.properties.publicationInfo, str, schemas.Unset] = schemas.unset,
                                        physicalDescription: typing.Union[MetaOapg.properties.physicalDescription, str, schemas.Unset] = schemas.unset,
                                        seriesData: typing.Union[MetaOapg.properties.seriesData, list, tuple, schemas.Unset] = schemas.unset,
                                        materialSpecificDetail: typing.Union[MetaOapg.properties.materialSpecificDetail, str, schemas.Unset] = schemas.unset,
                                        relatedItemNotes: typing.Union[MetaOapg.properties.relatedItemNotes, list, tuple, schemas.Unset] = schemas.unset,
                                        otherItemIdentifiers: typing.Union[MetaOapg.properties.otherItemIdentifiers, list, tuple, schemas.Unset] = schemas.unset,
                                        reportNumbers: typing.Union[MetaOapg.properties.reportNumbers, list, tuple, schemas.Unset] = schemas.unset,
                                        uniformTitle: typing.Union[MetaOapg.properties.uniformTitle, str, schemas.Unset] = schemas.unset,
                                        standardTechReportNumber: typing.Union[MetaOapg.properties.standardTechReportNumber, str, schemas.Unset] = schemas.unset,
                                        recordControlNumbers: typing.Union[MetaOapg.properties.recordControlNumbers, list, tuple, schemas.Unset] = schemas.unset,
                                        issns: typing.Union[MetaOapg.properties.issns, list, tuple, schemas.Unset] = schemas.unset,
                                        coden: typing.Union[MetaOapg.properties.coden, str, schemas.Unset] = schemas.unset,
                                        isbns: typing.Union[MetaOapg.properties.isbns, list, tuple, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            typeOfRelationship=typeOfRelationship,
                                            relatedItemTitle=relatedItemTitle,
                                            relationshipInfo=relationshipInfo,
                                            relatedParts=relatedParts,
                                            mainEntryHeading=mainEntryHeading,
                                            edition=edition,
                                            qualifyingInfo=qualifyingInfo,
                                            publicationInfo=publicationInfo,
                                            physicalDescription=physicalDescription,
                                            seriesData=seriesData,
                                            materialSpecificDetail=materialSpecificDetail,
                                            relatedItemNotes=relatedItemNotes,
                                            otherItemIdentifiers=otherItemIdentifiers,
                                            reportNumbers=reportNumbers,
                                            uniformTitle=uniformTitle,
                                            standardTechReportNumber=standardTechReportNumber,
                                            recordControlNumbers=recordControlNumbers,
                                            issns=issns,
                                            coden=coden,
                                            isbns=isbns,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'relatedItems':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class precedingEntries(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            typeOfRelationship = schemas.StrSchema
                                            relatedItemTitle = schemas.StrSchema
                                            
                                            
                                            class relationshipInfo(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'relationshipInfo':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            
                                            
                                            class relatedParts(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'relatedParts':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            mainEntryHeading = schemas.StrSchema
                                            edition = schemas.StrSchema
                                            qualifyingInfo = schemas.StrSchema
                                            publicationInfo = schemas.StrSchema
                                            physicalDescription = schemas.StrSchema
                                            
                                            
                                            class seriesData(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'seriesData':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            materialSpecificDetail = schemas.StrSchema
                                            
                                            
                                            class relatedItemNotes(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'relatedItemNotes':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            
                                            
                                            class otherItemIdentifiers(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'otherItemIdentifiers':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            
                                            
                                            class reportNumbers(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'reportNumbers':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            uniformTitle = schemas.StrSchema
                                            standardTechReportNumber = schemas.StrSchema
                                            
                                            
                                            class recordControlNumbers(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'recordControlNumbers':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            
                                            
                                            class issns(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'issns':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            coden = schemas.StrSchema
                                            
                                            
                                            class isbns(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'isbns':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            __annotations__ = {
                                                "typeOfRelationship": typeOfRelationship,
                                                "relatedItemTitle": relatedItemTitle,
                                                "relationshipInfo": relationshipInfo,
                                                "relatedParts": relatedParts,
                                                "mainEntryHeading": mainEntryHeading,
                                                "edition": edition,
                                                "qualifyingInfo": qualifyingInfo,
                                                "publicationInfo": publicationInfo,
                                                "physicalDescription": physicalDescription,
                                                "seriesData": seriesData,
                                                "materialSpecificDetail": materialSpecificDetail,
                                                "relatedItemNotes": relatedItemNotes,
                                                "otherItemIdentifiers": otherItemIdentifiers,
                                                "reportNumbers": reportNumbers,
                                                "uniformTitle": uniformTitle,
                                                "standardTechReportNumber": standardTechReportNumber,
                                                "recordControlNumbers": recordControlNumbers,
                                                "issns": issns,
                                                "coden": coden,
                                                "isbns": isbns,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["typeOfRelationship"]) -> MetaOapg.properties.typeOfRelationship: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["relatedItemTitle"]) -> MetaOapg.properties.relatedItemTitle: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["relationshipInfo"]) -> MetaOapg.properties.relationshipInfo: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["relatedParts"]) -> MetaOapg.properties.relatedParts: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["mainEntryHeading"]) -> MetaOapg.properties.mainEntryHeading: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["edition"]) -> MetaOapg.properties.edition: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["qualifyingInfo"]) -> MetaOapg.properties.qualifyingInfo: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["publicationInfo"]) -> MetaOapg.properties.publicationInfo: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["physicalDescription"]) -> MetaOapg.properties.physicalDescription: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["seriesData"]) -> MetaOapg.properties.seriesData: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["materialSpecificDetail"]) -> MetaOapg.properties.materialSpecificDetail: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["relatedItemNotes"]) -> MetaOapg.properties.relatedItemNotes: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["otherItemIdentifiers"]) -> MetaOapg.properties.otherItemIdentifiers: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["reportNumbers"]) -> MetaOapg.properties.reportNumbers: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["uniformTitle"]) -> MetaOapg.properties.uniformTitle: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["standardTechReportNumber"]) -> MetaOapg.properties.standardTechReportNumber: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["recordControlNumbers"]) -> MetaOapg.properties.recordControlNumbers: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["issns"]) -> MetaOapg.properties.issns: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["coden"]) -> MetaOapg.properties.coden: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["isbns"]) -> MetaOapg.properties.isbns: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["typeOfRelationship", "relatedItemTitle", "relationshipInfo", "relatedParts", "mainEntryHeading", "edition", "qualifyingInfo", "publicationInfo", "physicalDescription", "seriesData", "materialSpecificDetail", "relatedItemNotes", "otherItemIdentifiers", "reportNumbers", "uniformTitle", "standardTechReportNumber", "recordControlNumbers", "issns", "coden", "isbns", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["typeOfRelationship"]) -> typing.Union[MetaOapg.properties.typeOfRelationship, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["relatedItemTitle"]) -> typing.Union[MetaOapg.properties.relatedItemTitle, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["relationshipInfo"]) -> typing.Union[MetaOapg.properties.relationshipInfo, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["relatedParts"]) -> typing.Union[MetaOapg.properties.relatedParts, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["mainEntryHeading"]) -> typing.Union[MetaOapg.properties.mainEntryHeading, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["edition"]) -> typing.Union[MetaOapg.properties.edition, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["qualifyingInfo"]) -> typing.Union[MetaOapg.properties.qualifyingInfo, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["publicationInfo"]) -> typing.Union[MetaOapg.properties.publicationInfo, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["physicalDescription"]) -> typing.Union[MetaOapg.properties.physicalDescription, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["seriesData"]) -> typing.Union[MetaOapg.properties.seriesData, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["materialSpecificDetail"]) -> typing.Union[MetaOapg.properties.materialSpecificDetail, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["relatedItemNotes"]) -> typing.Union[MetaOapg.properties.relatedItemNotes, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["otherItemIdentifiers"]) -> typing.Union[MetaOapg.properties.otherItemIdentifiers, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["reportNumbers"]) -> typing.Union[MetaOapg.properties.reportNumbers, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["uniformTitle"]) -> typing.Union[MetaOapg.properties.uniformTitle, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["standardTechReportNumber"]) -> typing.Union[MetaOapg.properties.standardTechReportNumber, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["recordControlNumbers"]) -> typing.Union[MetaOapg.properties.recordControlNumbers, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["issns"]) -> typing.Union[MetaOapg.properties.issns, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["coden"]) -> typing.Union[MetaOapg.properties.coden, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["isbns"]) -> typing.Union[MetaOapg.properties.isbns, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["typeOfRelationship", "relatedItemTitle", "relationshipInfo", "relatedParts", "mainEntryHeading", "edition", "qualifyingInfo", "publicationInfo", "physicalDescription", "seriesData", "materialSpecificDetail", "relatedItemNotes", "otherItemIdentifiers", "reportNumbers", "uniformTitle", "standardTechReportNumber", "recordControlNumbers", "issns", "coden", "isbns", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        typeOfRelationship: typing.Union[MetaOapg.properties.typeOfRelationship, str, schemas.Unset] = schemas.unset,
                                        relatedItemTitle: typing.Union[MetaOapg.properties.relatedItemTitle, str, schemas.Unset] = schemas.unset,
                                        relationshipInfo: typing.Union[MetaOapg.properties.relationshipInfo, list, tuple, schemas.Unset] = schemas.unset,
                                        relatedParts: typing.Union[MetaOapg.properties.relatedParts, list, tuple, schemas.Unset] = schemas.unset,
                                        mainEntryHeading: typing.Union[MetaOapg.properties.mainEntryHeading, str, schemas.Unset] = schemas.unset,
                                        edition: typing.Union[MetaOapg.properties.edition, str, schemas.Unset] = schemas.unset,
                                        qualifyingInfo: typing.Union[MetaOapg.properties.qualifyingInfo, str, schemas.Unset] = schemas.unset,
                                        publicationInfo: typing.Union[MetaOapg.properties.publicationInfo, str, schemas.Unset] = schemas.unset,
                                        physicalDescription: typing.Union[MetaOapg.properties.physicalDescription, str, schemas.Unset] = schemas.unset,
                                        seriesData: typing.Union[MetaOapg.properties.seriesData, list, tuple, schemas.Unset] = schemas.unset,
                                        materialSpecificDetail: typing.Union[MetaOapg.properties.materialSpecificDetail, str, schemas.Unset] = schemas.unset,
                                        relatedItemNotes: typing.Union[MetaOapg.properties.relatedItemNotes, list, tuple, schemas.Unset] = schemas.unset,
                                        otherItemIdentifiers: typing.Union[MetaOapg.properties.otherItemIdentifiers, list, tuple, schemas.Unset] = schemas.unset,
                                        reportNumbers: typing.Union[MetaOapg.properties.reportNumbers, list, tuple, schemas.Unset] = schemas.unset,
                                        uniformTitle: typing.Union[MetaOapg.properties.uniformTitle, str, schemas.Unset] = schemas.unset,
                                        standardTechReportNumber: typing.Union[MetaOapg.properties.standardTechReportNumber, str, schemas.Unset] = schemas.unset,
                                        recordControlNumbers: typing.Union[MetaOapg.properties.recordControlNumbers, list, tuple, schemas.Unset] = schemas.unset,
                                        issns: typing.Union[MetaOapg.properties.issns, list, tuple, schemas.Unset] = schemas.unset,
                                        coden: typing.Union[MetaOapg.properties.coden, str, schemas.Unset] = schemas.unset,
                                        isbns: typing.Union[MetaOapg.properties.isbns, list, tuple, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            typeOfRelationship=typeOfRelationship,
                                            relatedItemTitle=relatedItemTitle,
                                            relationshipInfo=relationshipInfo,
                                            relatedParts=relatedParts,
                                            mainEntryHeading=mainEntryHeading,
                                            edition=edition,
                                            qualifyingInfo=qualifyingInfo,
                                            publicationInfo=publicationInfo,
                                            physicalDescription=physicalDescription,
                                            seriesData=seriesData,
                                            materialSpecificDetail=materialSpecificDetail,
                                            relatedItemNotes=relatedItemNotes,
                                            otherItemIdentifiers=otherItemIdentifiers,
                                            reportNumbers=reportNumbers,
                                            uniformTitle=uniformTitle,
                                            standardTechReportNumber=standardTechReportNumber,
                                            recordControlNumbers=recordControlNumbers,
                                            issns=issns,
                                            coden=coden,
                                            isbns=isbns,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'precedingEntries':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class succeedingEntries(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            typeOfRelationship = schemas.StrSchema
                                            relatedItemTitle = schemas.StrSchema
                                            
                                            
                                            class relationshipInfo(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'relationshipInfo':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            
                                            
                                            class relatedParts(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'relatedParts':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            mainEntryHeading = schemas.StrSchema
                                            edition = schemas.StrSchema
                                            qualifyingInfo = schemas.StrSchema
                                            publicationInfo = schemas.StrSchema
                                            physicalDescription = schemas.StrSchema
                                            
                                            
                                            class seriesData(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'seriesData':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            materialSpecificDetail = schemas.StrSchema
                                            
                                            
                                            class relatedItemNotes(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'relatedItemNotes':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            
                                            
                                            class otherItemIdentifiers(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'otherItemIdentifiers':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            
                                            
                                            class reportNumbers(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'reportNumbers':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            uniformTitle = schemas.StrSchema
                                            standardTechReportNumber = schemas.StrSchema
                                            
                                            
                                            class recordControlNumbers(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'recordControlNumbers':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            
                                            
                                            class issns(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'issns':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            coden = schemas.StrSchema
                                            
                                            
                                            class isbns(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'isbns':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            __annotations__ = {
                                                "typeOfRelationship": typeOfRelationship,
                                                "relatedItemTitle": relatedItemTitle,
                                                "relationshipInfo": relationshipInfo,
                                                "relatedParts": relatedParts,
                                                "mainEntryHeading": mainEntryHeading,
                                                "edition": edition,
                                                "qualifyingInfo": qualifyingInfo,
                                                "publicationInfo": publicationInfo,
                                                "physicalDescription": physicalDescription,
                                                "seriesData": seriesData,
                                                "materialSpecificDetail": materialSpecificDetail,
                                                "relatedItemNotes": relatedItemNotes,
                                                "otherItemIdentifiers": otherItemIdentifiers,
                                                "reportNumbers": reportNumbers,
                                                "uniformTitle": uniformTitle,
                                                "standardTechReportNumber": standardTechReportNumber,
                                                "recordControlNumbers": recordControlNumbers,
                                                "issns": issns,
                                                "coden": coden,
                                                "isbns": isbns,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["typeOfRelationship"]) -> MetaOapg.properties.typeOfRelationship: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["relatedItemTitle"]) -> MetaOapg.properties.relatedItemTitle: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["relationshipInfo"]) -> MetaOapg.properties.relationshipInfo: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["relatedParts"]) -> MetaOapg.properties.relatedParts: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["mainEntryHeading"]) -> MetaOapg.properties.mainEntryHeading: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["edition"]) -> MetaOapg.properties.edition: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["qualifyingInfo"]) -> MetaOapg.properties.qualifyingInfo: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["publicationInfo"]) -> MetaOapg.properties.publicationInfo: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["physicalDescription"]) -> MetaOapg.properties.physicalDescription: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["seriesData"]) -> MetaOapg.properties.seriesData: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["materialSpecificDetail"]) -> MetaOapg.properties.materialSpecificDetail: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["relatedItemNotes"]) -> MetaOapg.properties.relatedItemNotes: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["otherItemIdentifiers"]) -> MetaOapg.properties.otherItemIdentifiers: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["reportNumbers"]) -> MetaOapg.properties.reportNumbers: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["uniformTitle"]) -> MetaOapg.properties.uniformTitle: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["standardTechReportNumber"]) -> MetaOapg.properties.standardTechReportNumber: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["recordControlNumbers"]) -> MetaOapg.properties.recordControlNumbers: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["issns"]) -> MetaOapg.properties.issns: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["coden"]) -> MetaOapg.properties.coden: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["isbns"]) -> MetaOapg.properties.isbns: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["typeOfRelationship", "relatedItemTitle", "relationshipInfo", "relatedParts", "mainEntryHeading", "edition", "qualifyingInfo", "publicationInfo", "physicalDescription", "seriesData", "materialSpecificDetail", "relatedItemNotes", "otherItemIdentifiers", "reportNumbers", "uniformTitle", "standardTechReportNumber", "recordControlNumbers", "issns", "coden", "isbns", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["typeOfRelationship"]) -> typing.Union[MetaOapg.properties.typeOfRelationship, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["relatedItemTitle"]) -> typing.Union[MetaOapg.properties.relatedItemTitle, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["relationshipInfo"]) -> typing.Union[MetaOapg.properties.relationshipInfo, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["relatedParts"]) -> typing.Union[MetaOapg.properties.relatedParts, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["mainEntryHeading"]) -> typing.Union[MetaOapg.properties.mainEntryHeading, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["edition"]) -> typing.Union[MetaOapg.properties.edition, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["qualifyingInfo"]) -> typing.Union[MetaOapg.properties.qualifyingInfo, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["publicationInfo"]) -> typing.Union[MetaOapg.properties.publicationInfo, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["physicalDescription"]) -> typing.Union[MetaOapg.properties.physicalDescription, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["seriesData"]) -> typing.Union[MetaOapg.properties.seriesData, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["materialSpecificDetail"]) -> typing.Union[MetaOapg.properties.materialSpecificDetail, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["relatedItemNotes"]) -> typing.Union[MetaOapg.properties.relatedItemNotes, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["otherItemIdentifiers"]) -> typing.Union[MetaOapg.properties.otherItemIdentifiers, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["reportNumbers"]) -> typing.Union[MetaOapg.properties.reportNumbers, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["uniformTitle"]) -> typing.Union[MetaOapg.properties.uniformTitle, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["standardTechReportNumber"]) -> typing.Union[MetaOapg.properties.standardTechReportNumber, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["recordControlNumbers"]) -> typing.Union[MetaOapg.properties.recordControlNumbers, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["issns"]) -> typing.Union[MetaOapg.properties.issns, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["coden"]) -> typing.Union[MetaOapg.properties.coden, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["isbns"]) -> typing.Union[MetaOapg.properties.isbns, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["typeOfRelationship", "relatedItemTitle", "relationshipInfo", "relatedParts", "mainEntryHeading", "edition", "qualifyingInfo", "publicationInfo", "physicalDescription", "seriesData", "materialSpecificDetail", "relatedItemNotes", "otherItemIdentifiers", "reportNumbers", "uniformTitle", "standardTechReportNumber", "recordControlNumbers", "issns", "coden", "isbns", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        typeOfRelationship: typing.Union[MetaOapg.properties.typeOfRelationship, str, schemas.Unset] = schemas.unset,
                                        relatedItemTitle: typing.Union[MetaOapg.properties.relatedItemTitle, str, schemas.Unset] = schemas.unset,
                                        relationshipInfo: typing.Union[MetaOapg.properties.relationshipInfo, list, tuple, schemas.Unset] = schemas.unset,
                                        relatedParts: typing.Union[MetaOapg.properties.relatedParts, list, tuple, schemas.Unset] = schemas.unset,
                                        mainEntryHeading: typing.Union[MetaOapg.properties.mainEntryHeading, str, schemas.Unset] = schemas.unset,
                                        edition: typing.Union[MetaOapg.properties.edition, str, schemas.Unset] = schemas.unset,
                                        qualifyingInfo: typing.Union[MetaOapg.properties.qualifyingInfo, str, schemas.Unset] = schemas.unset,
                                        publicationInfo: typing.Union[MetaOapg.properties.publicationInfo, str, schemas.Unset] = schemas.unset,
                                        physicalDescription: typing.Union[MetaOapg.properties.physicalDescription, str, schemas.Unset] = schemas.unset,
                                        seriesData: typing.Union[MetaOapg.properties.seriesData, list, tuple, schemas.Unset] = schemas.unset,
                                        materialSpecificDetail: typing.Union[MetaOapg.properties.materialSpecificDetail, str, schemas.Unset] = schemas.unset,
                                        relatedItemNotes: typing.Union[MetaOapg.properties.relatedItemNotes, list, tuple, schemas.Unset] = schemas.unset,
                                        otherItemIdentifiers: typing.Union[MetaOapg.properties.otherItemIdentifiers, list, tuple, schemas.Unset] = schemas.unset,
                                        reportNumbers: typing.Union[MetaOapg.properties.reportNumbers, list, tuple, schemas.Unset] = schemas.unset,
                                        uniformTitle: typing.Union[MetaOapg.properties.uniformTitle, str, schemas.Unset] = schemas.unset,
                                        standardTechReportNumber: typing.Union[MetaOapg.properties.standardTechReportNumber, str, schemas.Unset] = schemas.unset,
                                        recordControlNumbers: typing.Union[MetaOapg.properties.recordControlNumbers, list, tuple, schemas.Unset] = schemas.unset,
                                        issns: typing.Union[MetaOapg.properties.issns, list, tuple, schemas.Unset] = schemas.unset,
                                        coden: typing.Union[MetaOapg.properties.coden, str, schemas.Unset] = schemas.unset,
                                        isbns: typing.Union[MetaOapg.properties.isbns, list, tuple, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            typeOfRelationship=typeOfRelationship,
                                            relatedItemTitle=relatedItemTitle,
                                            relationshipInfo=relationshipInfo,
                                            relatedParts=relatedParts,
                                            mainEntryHeading=mainEntryHeading,
                                            edition=edition,
                                            qualifyingInfo=qualifyingInfo,
                                            publicationInfo=publicationInfo,
                                            physicalDescription=physicalDescription,
                                            seriesData=seriesData,
                                            materialSpecificDetail=materialSpecificDetail,
                                            relatedItemNotes=relatedItemNotes,
                                            otherItemIdentifiers=otherItemIdentifiers,
                                            reportNumbers=reportNumbers,
                                            uniformTitle=uniformTitle,
                                            standardTechReportNumber=standardTechReportNumber,
                                            recordControlNumbers=recordControlNumbers,
                                            issns=issns,
                                            coden=coden,
                                            isbns=isbns,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'succeedingEntries':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class issuedWithEntries(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            displayConstant = schemas.StrSchema
                                            
                                            
                                            class titles(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'titles':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            
                                            
                                            class recordControlOclcNumbers(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'recordControlOclcNumbers':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            
                                            
                                            class issns(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'issns':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            
                                            
                                            class isbns(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'isbns':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            
                                            
                                            class mainEntryHeadings(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'mainEntryHeadings':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            
                                            
                                            class relatedParts(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'relatedParts':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            uniformTitle = schemas.StrSchema
                                            __annotations__ = {
                                                "displayConstant": displayConstant,
                                                "titles": titles,
                                                "recordControlOclcNumbers": recordControlOclcNumbers,
                                                "issns": issns,
                                                "isbns": isbns,
                                                "mainEntryHeadings": mainEntryHeadings,
                                                "relatedParts": relatedParts,
                                                "uniformTitle": uniformTitle,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["displayConstant"]) -> MetaOapg.properties.displayConstant: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["titles"]) -> MetaOapg.properties.titles: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["recordControlOclcNumbers"]) -> MetaOapg.properties.recordControlOclcNumbers: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["issns"]) -> MetaOapg.properties.issns: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["isbns"]) -> MetaOapg.properties.isbns: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["mainEntryHeadings"]) -> MetaOapg.properties.mainEntryHeadings: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["relatedParts"]) -> MetaOapg.properties.relatedParts: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["uniformTitle"]) -> MetaOapg.properties.uniformTitle: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["displayConstant", "titles", "recordControlOclcNumbers", "issns", "isbns", "mainEntryHeadings", "relatedParts", "uniformTitle", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["displayConstant"]) -> typing.Union[MetaOapg.properties.displayConstant, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["titles"]) -> typing.Union[MetaOapg.properties.titles, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["recordControlOclcNumbers"]) -> typing.Union[MetaOapg.properties.recordControlOclcNumbers, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["issns"]) -> typing.Union[MetaOapg.properties.issns, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["isbns"]) -> typing.Union[MetaOapg.properties.isbns, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["mainEntryHeadings"]) -> typing.Union[MetaOapg.properties.mainEntryHeadings, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["relatedParts"]) -> typing.Union[MetaOapg.properties.relatedParts, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["uniformTitle"]) -> typing.Union[MetaOapg.properties.uniformTitle, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["displayConstant", "titles", "recordControlOclcNumbers", "issns", "isbns", "mainEntryHeadings", "relatedParts", "uniformTitle", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        displayConstant: typing.Union[MetaOapg.properties.displayConstant, str, schemas.Unset] = schemas.unset,
                                        titles: typing.Union[MetaOapg.properties.titles, list, tuple, schemas.Unset] = schemas.unset,
                                        recordControlOclcNumbers: typing.Union[MetaOapg.properties.recordControlOclcNumbers, list, tuple, schemas.Unset] = schemas.unset,
                                        issns: typing.Union[MetaOapg.properties.issns, list, tuple, schemas.Unset] = schemas.unset,
                                        isbns: typing.Union[MetaOapg.properties.isbns, list, tuple, schemas.Unset] = schemas.unset,
                                        mainEntryHeadings: typing.Union[MetaOapg.properties.mainEntryHeadings, list, tuple, schemas.Unset] = schemas.unset,
                                        relatedParts: typing.Union[MetaOapg.properties.relatedParts, list, tuple, schemas.Unset] = schemas.unset,
                                        uniformTitle: typing.Union[MetaOapg.properties.uniformTitle, str, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            displayConstant=displayConstant,
                                            titles=titles,
                                            recordControlOclcNumbers=recordControlOclcNumbers,
                                            issns=issns,
                                            isbns=isbns,
                                            mainEntryHeadings=mainEntryHeadings,
                                            relatedParts=relatedParts,
                                            uniformTitle=uniformTitle,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'issuedWithEntries':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class additionalPhysicalFormEntries(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            displayConstant = schemas.StrSchema
                                            
                                            
                                            class titles(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'titles':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            
                                            
                                            class recordControlOclcNumbers(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'recordControlOclcNumbers':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            
                                            
                                            class issns(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'issns':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            
                                            
                                            class isbns(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'isbns':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            
                                            
                                            class mainEntryHeadings(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'mainEntryHeadings':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            
                                            
                                            class relatedParts(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'relatedParts':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            uniformTitle = schemas.StrSchema
                                            __annotations__ = {
                                                "displayConstant": displayConstant,
                                                "titles": titles,
                                                "recordControlOclcNumbers": recordControlOclcNumbers,
                                                "issns": issns,
                                                "isbns": isbns,
                                                "mainEntryHeadings": mainEntryHeadings,
                                                "relatedParts": relatedParts,
                                                "uniformTitle": uniformTitle,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["displayConstant"]) -> MetaOapg.properties.displayConstant: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["titles"]) -> MetaOapg.properties.titles: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["recordControlOclcNumbers"]) -> MetaOapg.properties.recordControlOclcNumbers: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["issns"]) -> MetaOapg.properties.issns: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["isbns"]) -> MetaOapg.properties.isbns: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["mainEntryHeadings"]) -> MetaOapg.properties.mainEntryHeadings: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["relatedParts"]) -> MetaOapg.properties.relatedParts: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["uniformTitle"]) -> MetaOapg.properties.uniformTitle: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["displayConstant", "titles", "recordControlOclcNumbers", "issns", "isbns", "mainEntryHeadings", "relatedParts", "uniformTitle", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["displayConstant"]) -> typing.Union[MetaOapg.properties.displayConstant, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["titles"]) -> typing.Union[MetaOapg.properties.titles, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["recordControlOclcNumbers"]) -> typing.Union[MetaOapg.properties.recordControlOclcNumbers, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["issns"]) -> typing.Union[MetaOapg.properties.issns, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["isbns"]) -> typing.Union[MetaOapg.properties.isbns, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["mainEntryHeadings"]) -> typing.Union[MetaOapg.properties.mainEntryHeadings, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["relatedParts"]) -> typing.Union[MetaOapg.properties.relatedParts, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["uniformTitle"]) -> typing.Union[MetaOapg.properties.uniformTitle, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["displayConstant", "titles", "recordControlOclcNumbers", "issns", "isbns", "mainEntryHeadings", "relatedParts", "uniformTitle", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        displayConstant: typing.Union[MetaOapg.properties.displayConstant, str, schemas.Unset] = schemas.unset,
                                        titles: typing.Union[MetaOapg.properties.titles, list, tuple, schemas.Unset] = schemas.unset,
                                        recordControlOclcNumbers: typing.Union[MetaOapg.properties.recordControlOclcNumbers, list, tuple, schemas.Unset] = schemas.unset,
                                        issns: typing.Union[MetaOapg.properties.issns, list, tuple, schemas.Unset] = schemas.unset,
                                        isbns: typing.Union[MetaOapg.properties.isbns, list, tuple, schemas.Unset] = schemas.unset,
                                        mainEntryHeadings: typing.Union[MetaOapg.properties.mainEntryHeadings, list, tuple, schemas.Unset] = schemas.unset,
                                        relatedParts: typing.Union[MetaOapg.properties.relatedParts, list, tuple, schemas.Unset] = schemas.unset,
                                        uniformTitle: typing.Union[MetaOapg.properties.uniformTitle, str, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            displayConstant=displayConstant,
                                            titles=titles,
                                            recordControlOclcNumbers=recordControlOclcNumbers,
                                            issns=issns,
                                            isbns=isbns,
                                            mainEntryHeadings=mainEntryHeadings,
                                            relatedParts=relatedParts,
                                            uniformTitle=uniformTitle,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'additionalPhysicalFormEntries':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        __annotations__ = {
                            "relatedItems": relatedItems,
                            "precedingEntries": precedingEntries,
                            "succeedingEntries": succeedingEntries,
                            "issuedWithEntries": issuedWithEntries,
                            "additionalPhysicalFormEntries": additionalPhysicalFormEntries,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["relatedItems"]) -> MetaOapg.properties.relatedItems: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["precedingEntries"]) -> MetaOapg.properties.precedingEntries: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["succeedingEntries"]) -> MetaOapg.properties.succeedingEntries: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["issuedWithEntries"]) -> MetaOapg.properties.issuedWithEntries: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["additionalPhysicalFormEntries"]) -> MetaOapg.properties.additionalPhysicalFormEntries: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["relatedItems", "precedingEntries", "succeedingEntries", "issuedWithEntries", "additionalPhysicalFormEntries", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["relatedItems"]) -> typing.Union[MetaOapg.properties.relatedItems, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["precedingEntries"]) -> typing.Union[MetaOapg.properties.precedingEntries, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["succeedingEntries"]) -> typing.Union[MetaOapg.properties.succeedingEntries, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["issuedWithEntries"]) -> typing.Union[MetaOapg.properties.issuedWithEntries, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["additionalPhysicalFormEntries"]) -> typing.Union[MetaOapg.properties.additionalPhysicalFormEntries, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["relatedItems", "precedingEntries", "succeedingEntries", "issuedWithEntries", "additionalPhysicalFormEntries", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    relatedItems: typing.Union[MetaOapg.properties.relatedItems, list, tuple, schemas.Unset] = schemas.unset,
                    precedingEntries: typing.Union[MetaOapg.properties.precedingEntries, list, tuple, schemas.Unset] = schemas.unset,
                    succeedingEntries: typing.Union[MetaOapg.properties.succeedingEntries, list, tuple, schemas.Unset] = schemas.unset,
                    issuedWithEntries: typing.Union[MetaOapg.properties.issuedWithEntries, list, tuple, schemas.Unset] = schemas.unset,
                    additionalPhysicalFormEntries: typing.Union[MetaOapg.properties.additionalPhysicalFormEntries, list, tuple, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'related':
                    return super().__new__(
                        cls,
                        *_args,
                        relatedItems=relatedItems,
                        precedingEntries=precedingEntries,
                        succeedingEntries=succeedingEntries,
                        issuedWithEntries=issuedWithEntries,
                        additionalPhysicalFormEntries=additionalPhysicalFormEntries,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class work(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        id = schemas.StrSchema
                        count = schemas.Int32Schema
                        
                        
                        class articleCluster(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            databaseCollection = schemas.StrSchema
                                            oclcNumber = schemas.Int64Schema
                                            __annotations__ = {
                                                "databaseCollection": databaseCollection,
                                                "oclcNumber": oclcNumber,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["databaseCollection"]) -> MetaOapg.properties.databaseCollection: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["oclcNumber"]) -> MetaOapg.properties.oclcNumber: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["databaseCollection", "oclcNumber", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["databaseCollection"]) -> typing.Union[MetaOapg.properties.databaseCollection, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["oclcNumber"]) -> typing.Union[MetaOapg.properties.oclcNumber, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["databaseCollection", "oclcNumber", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        databaseCollection: typing.Union[MetaOapg.properties.databaseCollection, str, schemas.Unset] = schemas.unset,
                                        oclcNumber: typing.Union[MetaOapg.properties.oclcNumber, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            databaseCollection=databaseCollection,
                                            oclcNumber=oclcNumber,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'articleCluster':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        __annotations__ = {
                            "id": id,
                            "count": count,
                            "articleCluster": articleCluster,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["count"]) -> MetaOapg.properties.count: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["articleCluster"]) -> MetaOapg.properties.articleCluster: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "count", "articleCluster", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["count"]) -> typing.Union[MetaOapg.properties.count, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["articleCluster"]) -> typing.Union[MetaOapg.properties.articleCluster, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "count", "articleCluster", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                    count: typing.Union[MetaOapg.properties.count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    articleCluster: typing.Union[MetaOapg.properties.articleCluster, list, tuple, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'work':
                    return super().__new__(
                        cls,
                        *_args,
                        id=id,
                        count=count,
                        articleCluster=articleCluster,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class editionCluster(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        id = schemas.StrSchema
                        count = schemas.Int32Schema
                        __annotations__ = {
                            "id": id,
                            "count": count,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["count"]) -> MetaOapg.properties.count: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "count", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["count"]) -> typing.Union[MetaOapg.properties.count, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "count", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                    count: typing.Union[MetaOapg.properties.count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'editionCluster':
                    return super().__new__(
                        cls,
                        *_args,
                        id=id,
                        count=count,
                        _configuration=_configuration,
                        **kwargs,
                    )
            totalEditions = schemas.Int32Schema
            
            
            class database(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        source = schemas.StrSchema
                        collection = schemas.StrSchema
                        __annotations__ = {
                            "source": source,
                            "collection": collection,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["collection"]) -> MetaOapg.properties.collection: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["source", "collection", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> typing.Union[MetaOapg.properties.source, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["collection"]) -> typing.Union[MetaOapg.properties.collection, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["source", "collection", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    source: typing.Union[MetaOapg.properties.source, str, schemas.Unset] = schemas.unset,
                    collection: typing.Union[MetaOapg.properties.collection, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'database':
                    return super().__new__(
                        cls,
                        *_args,
                        source=source,
                        collection=collection,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class localTitle(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class mainTitles(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            text = schemas.StrSchema
                                            romanizedText = schemas.StrSchema
                                            languageCode = schemas.StrSchema
                                            
                                            
                                            class textDirection(
                                                schemas.EnumBase,
                                                schemas.StrSchema
                                            ):
                                                
                                                @schemas.classproperty
                                                def RTL(cls):
                                                    return cls("RTL")
                                                
                                                @schemas.classproperty
                                                def LTR(cls):
                                                    return cls("LTR")
                                            __annotations__ = {
                                                "text": text,
                                                "romanizedText": romanizedText,
                                                "languageCode": languageCode,
                                                "textDirection": textDirection,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["text"]) -> MetaOapg.properties.text: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["romanizedText"]) -> MetaOapg.properties.romanizedText: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["languageCode"]) -> MetaOapg.properties.languageCode: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["textDirection"]) -> MetaOapg.properties.textDirection: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["text", "romanizedText", "languageCode", "textDirection", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["text"]) -> typing.Union[MetaOapg.properties.text, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["romanizedText"]) -> typing.Union[MetaOapg.properties.romanizedText, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["languageCode"]) -> typing.Union[MetaOapg.properties.languageCode, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["textDirection"]) -> typing.Union[MetaOapg.properties.textDirection, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["text", "romanizedText", "languageCode", "textDirection", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        text: typing.Union[MetaOapg.properties.text, str, schemas.Unset] = schemas.unset,
                                        romanizedText: typing.Union[MetaOapg.properties.romanizedText, str, schemas.Unset] = schemas.unset,
                                        languageCode: typing.Union[MetaOapg.properties.languageCode, str, schemas.Unset] = schemas.unset,
                                        textDirection: typing.Union[MetaOapg.properties.textDirection, str, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            text=text,
                                            romanizedText=romanizedText,
                                            languageCode=languageCode,
                                            textDirection=textDirection,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'mainTitles':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class seriesTitles(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            seriesTitle = schemas.StrSchema
                                            volume = schemas.StrSchema
                                            __annotations__ = {
                                                "seriesTitle": seriesTitle,
                                                "volume": volume,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["seriesTitle"]) -> MetaOapg.properties.seriesTitle: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["volume"]) -> MetaOapg.properties.volume: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["seriesTitle", "volume", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["seriesTitle"]) -> typing.Union[MetaOapg.properties.seriesTitle, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["volume"]) -> typing.Union[MetaOapg.properties.volume, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["seriesTitle", "volume", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        seriesTitle: typing.Union[MetaOapg.properties.seriesTitle, str, schemas.Unset] = schemas.unset,
                                        volume: typing.Union[MetaOapg.properties.volume, str, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            seriesTitle=seriesTitle,
                                            volume=volume,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'seriesTitles':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class uniformTitles(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'uniformTitles':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class additionalTitles(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            relationshipInfo = schemas.StrSchema
                                            
                                            
                                            class titles(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'titles':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            
                                            
                                            class issns(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'issns':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            
                                            
                                            class relators(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    
                                                    
                                                    class items(
                                                        schemas.DictSchema
                                                    ):
                                                    
                                                    
                                                        class MetaOapg:
                                                            
                                                            class properties:
                                                                term = schemas.StrSchema
                                                                alternateTerm = schemas.StrSchema
                                                                __annotations__ = {
                                                                    "term": term,
                                                                    "alternateTerm": alternateTerm,
                                                                }
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["term"]) -> MetaOapg.properties.term: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["alternateTerm"]) -> MetaOapg.properties.alternateTerm: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                        
                                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["term", "alternateTerm", ], str]):
                                                            # dict_instance[name] accessor
                                                            return super().__getitem__(name)
                                                        
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["term"]) -> typing.Union[MetaOapg.properties.term, schemas.Unset]: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["alternateTerm"]) -> typing.Union[MetaOapg.properties.alternateTerm, schemas.Unset]: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                        
                                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["term", "alternateTerm", ], str]):
                                                            return super().get_item_oapg(name)
                                                        
                                                    
                                                        def __new__(
                                                            cls,
                                                            *_args: typing.Union[dict, frozendict.frozendict, ],
                                                            term: typing.Union[MetaOapg.properties.term, str, schemas.Unset] = schemas.unset,
                                                            alternateTerm: typing.Union[MetaOapg.properties.alternateTerm, str, schemas.Unset] = schemas.unset,
                                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                        ) -> 'items':
                                                            return super().__new__(
                                                                cls,
                                                                *_args,
                                                                term=term,
                                                                alternateTerm=alternateTerm,
                                                                _configuration=_configuration,
                                                                **kwargs,
                                                            )
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'relators':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            relatedData = schemas.StrSchema
                                            additionalRelationshipInfo = schemas.StrSchema
                                            __annotations__ = {
                                                "relationshipInfo": relationshipInfo,
                                                "titles": titles,
                                                "issns": issns,
                                                "relators": relators,
                                                "relatedData": relatedData,
                                                "additionalRelationshipInfo": additionalRelationshipInfo,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["relationshipInfo"]) -> MetaOapg.properties.relationshipInfo: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["titles"]) -> MetaOapg.properties.titles: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["issns"]) -> MetaOapg.properties.issns: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["relators"]) -> MetaOapg.properties.relators: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["relatedData"]) -> MetaOapg.properties.relatedData: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["additionalRelationshipInfo"]) -> MetaOapg.properties.additionalRelationshipInfo: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["relationshipInfo", "titles", "issns", "relators", "relatedData", "additionalRelationshipInfo", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["relationshipInfo"]) -> typing.Union[MetaOapg.properties.relationshipInfo, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["titles"]) -> typing.Union[MetaOapg.properties.titles, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["issns"]) -> typing.Union[MetaOapg.properties.issns, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["relators"]) -> typing.Union[MetaOapg.properties.relators, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["relatedData"]) -> typing.Union[MetaOapg.properties.relatedData, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["additionalRelationshipInfo"]) -> typing.Union[MetaOapg.properties.additionalRelationshipInfo, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["relationshipInfo", "titles", "issns", "relators", "relatedData", "additionalRelationshipInfo", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        relationshipInfo: typing.Union[MetaOapg.properties.relationshipInfo, str, schemas.Unset] = schemas.unset,
                                        titles: typing.Union[MetaOapg.properties.titles, list, tuple, schemas.Unset] = schemas.unset,
                                        issns: typing.Union[MetaOapg.properties.issns, list, tuple, schemas.Unset] = schemas.unset,
                                        relators: typing.Union[MetaOapg.properties.relators, list, tuple, schemas.Unset] = schemas.unset,
                                        relatedData: typing.Union[MetaOapg.properties.relatedData, str, schemas.Unset] = schemas.unset,
                                        additionalRelationshipInfo: typing.Union[MetaOapg.properties.additionalRelationshipInfo, str, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            relationshipInfo=relationshipInfo,
                                            titles=titles,
                                            issns=issns,
                                            relators=relators,
                                            relatedData=relatedData,
                                            additionalRelationshipInfo=additionalRelationshipInfo,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'additionalTitles':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        __annotations__ = {
                            "mainTitles": mainTitles,
                            "seriesTitles": seriesTitles,
                            "uniformTitles": uniformTitles,
                            "additionalTitles": additionalTitles,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["mainTitles"]) -> MetaOapg.properties.mainTitles: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["seriesTitles"]) -> MetaOapg.properties.seriesTitles: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["uniformTitles"]) -> MetaOapg.properties.uniformTitles: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["additionalTitles"]) -> MetaOapg.properties.additionalTitles: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["mainTitles", "seriesTitles", "uniformTitles", "additionalTitles", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["mainTitles"]) -> typing.Union[MetaOapg.properties.mainTitles, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["seriesTitles"]) -> typing.Union[MetaOapg.properties.seriesTitles, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["uniformTitles"]) -> typing.Union[MetaOapg.properties.uniformTitles, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["additionalTitles"]) -> typing.Union[MetaOapg.properties.additionalTitles, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["mainTitles", "seriesTitles", "uniformTitles", "additionalTitles", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    mainTitles: typing.Union[MetaOapg.properties.mainTitles, list, tuple, schemas.Unset] = schemas.unset,
                    seriesTitles: typing.Union[MetaOapg.properties.seriesTitles, list, tuple, schemas.Unset] = schemas.unset,
                    uniformTitles: typing.Union[MetaOapg.properties.uniformTitles, list, tuple, schemas.Unset] = schemas.unset,
                    additionalTitles: typing.Union[MetaOapg.properties.additionalTitles, list, tuple, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'localTitle':
                    return super().__new__(
                        cls,
                        *_args,
                        mainTitles=mainTitles,
                        seriesTitles=seriesTitles,
                        uniformTitles=uniformTitles,
                        additionalTitles=additionalTitles,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class localContributor(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class creators(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            
                                            
                                            class firstName(
                                                schemas.DictSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    
                                                    class properties:
                                                        text = schemas.StrSchema
                                                        romanizedText = schemas.StrSchema
                                                        languageCode = schemas.StrSchema
                                                        
                                                        
                                                        class textDirection(
                                                            schemas.EnumBase,
                                                            schemas.StrSchema
                                                        ):
                                                            
                                                            @schemas.classproperty
                                                            def RTL(cls):
                                                                return cls("RTL")
                                                            
                                                            @schemas.classproperty
                                                            def LTR(cls):
                                                                return cls("LTR")
                                                        __annotations__ = {
                                                            "text": text,
                                                            "romanizedText": romanizedText,
                                                            "languageCode": languageCode,
                                                            "textDirection": textDirection,
                                                        }
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["text"]) -> MetaOapg.properties.text: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["romanizedText"]) -> MetaOapg.properties.romanizedText: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["languageCode"]) -> MetaOapg.properties.languageCode: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["textDirection"]) -> MetaOapg.properties.textDirection: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                
                                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["text", "romanizedText", "languageCode", "textDirection", ], str]):
                                                    # dict_instance[name] accessor
                                                    return super().__getitem__(name)
                                                
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["text"]) -> typing.Union[MetaOapg.properties.text, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["romanizedText"]) -> typing.Union[MetaOapg.properties.romanizedText, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["languageCode"]) -> typing.Union[MetaOapg.properties.languageCode, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["textDirection"]) -> typing.Union[MetaOapg.properties.textDirection, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                
                                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["text", "romanizedText", "languageCode", "textDirection", ], str]):
                                                    return super().get_item_oapg(name)
                                                
                                            
                                                def __new__(
                                                    cls,
                                                    *_args: typing.Union[dict, frozendict.frozendict, ],
                                                    text: typing.Union[MetaOapg.properties.text, str, schemas.Unset] = schemas.unset,
                                                    romanizedText: typing.Union[MetaOapg.properties.romanizedText, str, schemas.Unset] = schemas.unset,
                                                    languageCode: typing.Union[MetaOapg.properties.languageCode, str, schemas.Unset] = schemas.unset,
                                                    textDirection: typing.Union[MetaOapg.properties.textDirection, str, schemas.Unset] = schemas.unset,
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                ) -> 'firstName':
                                                    return super().__new__(
                                                        cls,
                                                        *_args,
                                                        text=text,
                                                        romanizedText=romanizedText,
                                                        languageCode=languageCode,
                                                        textDirection=textDirection,
                                                        _configuration=_configuration,
                                                        **kwargs,
                                                    )
                                            
                                            
                                            class secondName(
                                                schemas.DictSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    
                                                    class properties:
                                                        text = schemas.StrSchema
                                                        romanizedText = schemas.StrSchema
                                                        languageCode = schemas.StrSchema
                                                        
                                                        
                                                        class textDirection(
                                                            schemas.EnumBase,
                                                            schemas.StrSchema
                                                        ):
                                                            
                                                            @schemas.classproperty
                                                            def RTL(cls):
                                                                return cls("RTL")
                                                            
                                                            @schemas.classproperty
                                                            def LTR(cls):
                                                                return cls("LTR")
                                                        __annotations__ = {
                                                            "text": text,
                                                            "romanizedText": romanizedText,
                                                            "languageCode": languageCode,
                                                            "textDirection": textDirection,
                                                        }
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["text"]) -> MetaOapg.properties.text: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["romanizedText"]) -> MetaOapg.properties.romanizedText: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["languageCode"]) -> MetaOapg.properties.languageCode: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["textDirection"]) -> MetaOapg.properties.textDirection: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                
                                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["text", "romanizedText", "languageCode", "textDirection", ], str]):
                                                    # dict_instance[name] accessor
                                                    return super().__getitem__(name)
                                                
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["text"]) -> typing.Union[MetaOapg.properties.text, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["romanizedText"]) -> typing.Union[MetaOapg.properties.romanizedText, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["languageCode"]) -> typing.Union[MetaOapg.properties.languageCode, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["textDirection"]) -> typing.Union[MetaOapg.properties.textDirection, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                
                                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["text", "romanizedText", "languageCode", "textDirection", ], str]):
                                                    return super().get_item_oapg(name)
                                                
                                            
                                                def __new__(
                                                    cls,
                                                    *_args: typing.Union[dict, frozendict.frozendict, ],
                                                    text: typing.Union[MetaOapg.properties.text, str, schemas.Unset] = schemas.unset,
                                                    romanizedText: typing.Union[MetaOapg.properties.romanizedText, str, schemas.Unset] = schemas.unset,
                                                    languageCode: typing.Union[MetaOapg.properties.languageCode, str, schemas.Unset] = schemas.unset,
                                                    textDirection: typing.Union[MetaOapg.properties.textDirection, str, schemas.Unset] = schemas.unset,
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                ) -> 'secondName':
                                                    return super().__new__(
                                                        cls,
                                                        *_args,
                                                        text=text,
                                                        romanizedText=romanizedText,
                                                        languageCode=languageCode,
                                                        textDirection=textDirection,
                                                        _configuration=_configuration,
                                                        **kwargs,
                                                    )
                                            
                                            
                                            class nonPersonName(
                                                schemas.DictSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    
                                                    class properties:
                                                        text = schemas.StrSchema
                                                        romanizedText = schemas.StrSchema
                                                        languageCode = schemas.StrSchema
                                                        
                                                        
                                                        class textDirection(
                                                            schemas.EnumBase,
                                                            schemas.StrSchema
                                                        ):
                                                            
                                                            @schemas.classproperty
                                                            def RTL(cls):
                                                                return cls("RTL")
                                                            
                                                            @schemas.classproperty
                                                            def LTR(cls):
                                                                return cls("LTR")
                                                        __annotations__ = {
                                                            "text": text,
                                                            "romanizedText": romanizedText,
                                                            "languageCode": languageCode,
                                                            "textDirection": textDirection,
                                                        }
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["text"]) -> MetaOapg.properties.text: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["romanizedText"]) -> MetaOapg.properties.romanizedText: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["languageCode"]) -> MetaOapg.properties.languageCode: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["textDirection"]) -> MetaOapg.properties.textDirection: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                
                                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["text", "romanizedText", "languageCode", "textDirection", ], str]):
                                                    # dict_instance[name] accessor
                                                    return super().__getitem__(name)
                                                
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["text"]) -> typing.Union[MetaOapg.properties.text, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["romanizedText"]) -> typing.Union[MetaOapg.properties.romanizedText, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["languageCode"]) -> typing.Union[MetaOapg.properties.languageCode, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["textDirection"]) -> typing.Union[MetaOapg.properties.textDirection, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                
                                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["text", "romanizedText", "languageCode", "textDirection", ], str]):
                                                    return super().get_item_oapg(name)
                                                
                                            
                                                def __new__(
                                                    cls,
                                                    *_args: typing.Union[dict, frozendict.frozendict, ],
                                                    text: typing.Union[MetaOapg.properties.text, str, schemas.Unset] = schemas.unset,
                                                    romanizedText: typing.Union[MetaOapg.properties.romanizedText, str, schemas.Unset] = schemas.unset,
                                                    languageCode: typing.Union[MetaOapg.properties.languageCode, str, schemas.Unset] = schemas.unset,
                                                    textDirection: typing.Union[MetaOapg.properties.textDirection, str, schemas.Unset] = schemas.unset,
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                ) -> 'nonPersonName':
                                                    return super().__new__(
                                                        cls,
                                                        *_args,
                                                        text=text,
                                                        romanizedText=romanizedText,
                                                        languageCode=languageCode,
                                                        textDirection=textDirection,
                                                        _configuration=_configuration,
                                                        **kwargs,
                                                    )
                                            type = schemas.StrSchema
                                            
                                            
                                            class creatorNotes(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'creatorNotes':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            
                                            
                                            class relators(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    
                                                    
                                                    class items(
                                                        schemas.DictSchema
                                                    ):
                                                    
                                                    
                                                        class MetaOapg:
                                                            
                                                            class properties:
                                                                term = schemas.StrSchema
                                                                alternateTerm = schemas.StrSchema
                                                                __annotations__ = {
                                                                    "term": term,
                                                                    "alternateTerm": alternateTerm,
                                                                }
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["term"]) -> MetaOapg.properties.term: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["alternateTerm"]) -> MetaOapg.properties.alternateTerm: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                        
                                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["term", "alternateTerm", ], str]):
                                                            # dict_instance[name] accessor
                                                            return super().__getitem__(name)
                                                        
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["term"]) -> typing.Union[MetaOapg.properties.term, schemas.Unset]: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["alternateTerm"]) -> typing.Union[MetaOapg.properties.alternateTerm, schemas.Unset]: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                        
                                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["term", "alternateTerm", ], str]):
                                                            return super().get_item_oapg(name)
                                                        
                                                    
                                                        def __new__(
                                                            cls,
                                                            *_args: typing.Union[dict, frozendict.frozendict, ],
                                                            term: typing.Union[MetaOapg.properties.term, str, schemas.Unset] = schemas.unset,
                                                            alternateTerm: typing.Union[MetaOapg.properties.alternateTerm, str, schemas.Unset] = schemas.unset,
                                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                        ) -> 'items':
                                                            return super().__new__(
                                                                cls,
                                                                *_args,
                                                                term=term,
                                                                alternateTerm=alternateTerm,
                                                                _configuration=_configuration,
                                                                **kwargs,
                                                            )
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'relators':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            affiliation = schemas.StrSchema
                                            isPrimary = schemas.BoolSchema
                                            
                                            
                                            class relatedItem(
                                                schemas.DictSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    
                                                    class properties:
                                                        typeOfRelationship = schemas.StrSchema
                                                        relatedItemTitle = schemas.StrSchema
                                                        
                                                        
                                                        class relationshipInfo(
                                                            schemas.ListSchema
                                                        ):
                                                        
                                                        
                                                            class MetaOapg:
                                                                items = schemas.StrSchema
                                                        
                                                            def __new__(
                                                                cls,
                                                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                            ) -> 'relationshipInfo':
                                                                return super().__new__(
                                                                    cls,
                                                                    _arg,
                                                                    _configuration=_configuration,
                                                                )
                                                        
                                                            def __getitem__(self, i: int) -> MetaOapg.items:
                                                                return super().__getitem__(i)
                                                        
                                                        
                                                        class relatedParts(
                                                            schemas.ListSchema
                                                        ):
                                                        
                                                        
                                                            class MetaOapg:
                                                                items = schemas.StrSchema
                                                        
                                                            def __new__(
                                                                cls,
                                                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                            ) -> 'relatedParts':
                                                                return super().__new__(
                                                                    cls,
                                                                    _arg,
                                                                    _configuration=_configuration,
                                                                )
                                                        
                                                            def __getitem__(self, i: int) -> MetaOapg.items:
                                                                return super().__getitem__(i)
                                                        mainEntryHeading = schemas.StrSchema
                                                        edition = schemas.StrSchema
                                                        qualifyingInfo = schemas.StrSchema
                                                        publicationInfo = schemas.StrSchema
                                                        physicalDescription = schemas.StrSchema
                                                        
                                                        
                                                        class seriesData(
                                                            schemas.ListSchema
                                                        ):
                                                        
                                                        
                                                            class MetaOapg:
                                                                items = schemas.StrSchema
                                                        
                                                            def __new__(
                                                                cls,
                                                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                            ) -> 'seriesData':
                                                                return super().__new__(
                                                                    cls,
                                                                    _arg,
                                                                    _configuration=_configuration,
                                                                )
                                                        
                                                            def __getitem__(self, i: int) -> MetaOapg.items:
                                                                return super().__getitem__(i)
                                                        materialSpecificDetail = schemas.StrSchema
                                                        
                                                        
                                                        class relatedItemNotes(
                                                            schemas.ListSchema
                                                        ):
                                                        
                                                        
                                                            class MetaOapg:
                                                                items = schemas.StrSchema
                                                        
                                                            def __new__(
                                                                cls,
                                                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                            ) -> 'relatedItemNotes':
                                                                return super().__new__(
                                                                    cls,
                                                                    _arg,
                                                                    _configuration=_configuration,
                                                                )
                                                        
                                                            def __getitem__(self, i: int) -> MetaOapg.items:
                                                                return super().__getitem__(i)
                                                        
                                                        
                                                        class otherItemIdentifiers(
                                                            schemas.ListSchema
                                                        ):
                                                        
                                                        
                                                            class MetaOapg:
                                                                items = schemas.StrSchema
                                                        
                                                            def __new__(
                                                                cls,
                                                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                            ) -> 'otherItemIdentifiers':
                                                                return super().__new__(
                                                                    cls,
                                                                    _arg,
                                                                    _configuration=_configuration,
                                                                )
                                                        
                                                            def __getitem__(self, i: int) -> MetaOapg.items:
                                                                return super().__getitem__(i)
                                                        
                                                        
                                                        class reportNumbers(
                                                            schemas.ListSchema
                                                        ):
                                                        
                                                        
                                                            class MetaOapg:
                                                                items = schemas.StrSchema
                                                        
                                                            def __new__(
                                                                cls,
                                                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                            ) -> 'reportNumbers':
                                                                return super().__new__(
                                                                    cls,
                                                                    _arg,
                                                                    _configuration=_configuration,
                                                                )
                                                        
                                                            def __getitem__(self, i: int) -> MetaOapg.items:
                                                                return super().__getitem__(i)
                                                        uniformTitle = schemas.StrSchema
                                                        standardTechReportNumber = schemas.StrSchema
                                                        
                                                        
                                                        class recordControlNumbers(
                                                            schemas.ListSchema
                                                        ):
                                                        
                                                        
                                                            class MetaOapg:
                                                                items = schemas.StrSchema
                                                        
                                                            def __new__(
                                                                cls,
                                                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                            ) -> 'recordControlNumbers':
                                                                return super().__new__(
                                                                    cls,
                                                                    _arg,
                                                                    _configuration=_configuration,
                                                                )
                                                        
                                                            def __getitem__(self, i: int) -> MetaOapg.items:
                                                                return super().__getitem__(i)
                                                        
                                                        
                                                        class issns(
                                                            schemas.ListSchema
                                                        ):
                                                        
                                                        
                                                            class MetaOapg:
                                                                items = schemas.StrSchema
                                                        
                                                            def __new__(
                                                                cls,
                                                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                            ) -> 'issns':
                                                                return super().__new__(
                                                                    cls,
                                                                    _arg,
                                                                    _configuration=_configuration,
                                                                )
                                                        
                                                            def __getitem__(self, i: int) -> MetaOapg.items:
                                                                return super().__getitem__(i)
                                                        coden = schemas.StrSchema
                                                        
                                                        
                                                        class isbns(
                                                            schemas.ListSchema
                                                        ):
                                                        
                                                        
                                                            class MetaOapg:
                                                                items = schemas.StrSchema
                                                        
                                                            def __new__(
                                                                cls,
                                                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                            ) -> 'isbns':
                                                                return super().__new__(
                                                                    cls,
                                                                    _arg,
                                                                    _configuration=_configuration,
                                                                )
                                                        
                                                            def __getitem__(self, i: int) -> MetaOapg.items:
                                                                return super().__getitem__(i)
                                                        __annotations__ = {
                                                            "typeOfRelationship": typeOfRelationship,
                                                            "relatedItemTitle": relatedItemTitle,
                                                            "relationshipInfo": relationshipInfo,
                                                            "relatedParts": relatedParts,
                                                            "mainEntryHeading": mainEntryHeading,
                                                            "edition": edition,
                                                            "qualifyingInfo": qualifyingInfo,
                                                            "publicationInfo": publicationInfo,
                                                            "physicalDescription": physicalDescription,
                                                            "seriesData": seriesData,
                                                            "materialSpecificDetail": materialSpecificDetail,
                                                            "relatedItemNotes": relatedItemNotes,
                                                            "otherItemIdentifiers": otherItemIdentifiers,
                                                            "reportNumbers": reportNumbers,
                                                            "uniformTitle": uniformTitle,
                                                            "standardTechReportNumber": standardTechReportNumber,
                                                            "recordControlNumbers": recordControlNumbers,
                                                            "issns": issns,
                                                            "coden": coden,
                                                            "isbns": isbns,
                                                        }
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["typeOfRelationship"]) -> MetaOapg.properties.typeOfRelationship: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["relatedItemTitle"]) -> MetaOapg.properties.relatedItemTitle: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["relationshipInfo"]) -> MetaOapg.properties.relationshipInfo: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["relatedParts"]) -> MetaOapg.properties.relatedParts: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["mainEntryHeading"]) -> MetaOapg.properties.mainEntryHeading: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["edition"]) -> MetaOapg.properties.edition: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["qualifyingInfo"]) -> MetaOapg.properties.qualifyingInfo: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["publicationInfo"]) -> MetaOapg.properties.publicationInfo: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["physicalDescription"]) -> MetaOapg.properties.physicalDescription: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["seriesData"]) -> MetaOapg.properties.seriesData: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["materialSpecificDetail"]) -> MetaOapg.properties.materialSpecificDetail: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["relatedItemNotes"]) -> MetaOapg.properties.relatedItemNotes: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["otherItemIdentifiers"]) -> MetaOapg.properties.otherItemIdentifiers: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["reportNumbers"]) -> MetaOapg.properties.reportNumbers: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["uniformTitle"]) -> MetaOapg.properties.uniformTitle: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["standardTechReportNumber"]) -> MetaOapg.properties.standardTechReportNumber: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["recordControlNumbers"]) -> MetaOapg.properties.recordControlNumbers: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["issns"]) -> MetaOapg.properties.issns: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["coden"]) -> MetaOapg.properties.coden: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["isbns"]) -> MetaOapg.properties.isbns: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                
                                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["typeOfRelationship", "relatedItemTitle", "relationshipInfo", "relatedParts", "mainEntryHeading", "edition", "qualifyingInfo", "publicationInfo", "physicalDescription", "seriesData", "materialSpecificDetail", "relatedItemNotes", "otherItemIdentifiers", "reportNumbers", "uniformTitle", "standardTechReportNumber", "recordControlNumbers", "issns", "coden", "isbns", ], str]):
                                                    # dict_instance[name] accessor
                                                    return super().__getitem__(name)
                                                
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["typeOfRelationship"]) -> typing.Union[MetaOapg.properties.typeOfRelationship, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["relatedItemTitle"]) -> typing.Union[MetaOapg.properties.relatedItemTitle, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["relationshipInfo"]) -> typing.Union[MetaOapg.properties.relationshipInfo, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["relatedParts"]) -> typing.Union[MetaOapg.properties.relatedParts, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["mainEntryHeading"]) -> typing.Union[MetaOapg.properties.mainEntryHeading, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["edition"]) -> typing.Union[MetaOapg.properties.edition, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["qualifyingInfo"]) -> typing.Union[MetaOapg.properties.qualifyingInfo, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["publicationInfo"]) -> typing.Union[MetaOapg.properties.publicationInfo, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["physicalDescription"]) -> typing.Union[MetaOapg.properties.physicalDescription, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["seriesData"]) -> typing.Union[MetaOapg.properties.seriesData, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["materialSpecificDetail"]) -> typing.Union[MetaOapg.properties.materialSpecificDetail, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["relatedItemNotes"]) -> typing.Union[MetaOapg.properties.relatedItemNotes, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["otherItemIdentifiers"]) -> typing.Union[MetaOapg.properties.otherItemIdentifiers, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["reportNumbers"]) -> typing.Union[MetaOapg.properties.reportNumbers, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["uniformTitle"]) -> typing.Union[MetaOapg.properties.uniformTitle, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["standardTechReportNumber"]) -> typing.Union[MetaOapg.properties.standardTechReportNumber, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["recordControlNumbers"]) -> typing.Union[MetaOapg.properties.recordControlNumbers, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["issns"]) -> typing.Union[MetaOapg.properties.issns, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["coden"]) -> typing.Union[MetaOapg.properties.coden, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["isbns"]) -> typing.Union[MetaOapg.properties.isbns, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                
                                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["typeOfRelationship", "relatedItemTitle", "relationshipInfo", "relatedParts", "mainEntryHeading", "edition", "qualifyingInfo", "publicationInfo", "physicalDescription", "seriesData", "materialSpecificDetail", "relatedItemNotes", "otherItemIdentifiers", "reportNumbers", "uniformTitle", "standardTechReportNumber", "recordControlNumbers", "issns", "coden", "isbns", ], str]):
                                                    return super().get_item_oapg(name)
                                                
                                            
                                                def __new__(
                                                    cls,
                                                    *_args: typing.Union[dict, frozendict.frozendict, ],
                                                    typeOfRelationship: typing.Union[MetaOapg.properties.typeOfRelationship, str, schemas.Unset] = schemas.unset,
                                                    relatedItemTitle: typing.Union[MetaOapg.properties.relatedItemTitle, str, schemas.Unset] = schemas.unset,
                                                    relationshipInfo: typing.Union[MetaOapg.properties.relationshipInfo, list, tuple, schemas.Unset] = schemas.unset,
                                                    relatedParts: typing.Union[MetaOapg.properties.relatedParts, list, tuple, schemas.Unset] = schemas.unset,
                                                    mainEntryHeading: typing.Union[MetaOapg.properties.mainEntryHeading, str, schemas.Unset] = schemas.unset,
                                                    edition: typing.Union[MetaOapg.properties.edition, str, schemas.Unset] = schemas.unset,
                                                    qualifyingInfo: typing.Union[MetaOapg.properties.qualifyingInfo, str, schemas.Unset] = schemas.unset,
                                                    publicationInfo: typing.Union[MetaOapg.properties.publicationInfo, str, schemas.Unset] = schemas.unset,
                                                    physicalDescription: typing.Union[MetaOapg.properties.physicalDescription, str, schemas.Unset] = schemas.unset,
                                                    seriesData: typing.Union[MetaOapg.properties.seriesData, list, tuple, schemas.Unset] = schemas.unset,
                                                    materialSpecificDetail: typing.Union[MetaOapg.properties.materialSpecificDetail, str, schemas.Unset] = schemas.unset,
                                                    relatedItemNotes: typing.Union[MetaOapg.properties.relatedItemNotes, list, tuple, schemas.Unset] = schemas.unset,
                                                    otherItemIdentifiers: typing.Union[MetaOapg.properties.otherItemIdentifiers, list, tuple, schemas.Unset] = schemas.unset,
                                                    reportNumbers: typing.Union[MetaOapg.properties.reportNumbers, list, tuple, schemas.Unset] = schemas.unset,
                                                    uniformTitle: typing.Union[MetaOapg.properties.uniformTitle, str, schemas.Unset] = schemas.unset,
                                                    standardTechReportNumber: typing.Union[MetaOapg.properties.standardTechReportNumber, str, schemas.Unset] = schemas.unset,
                                                    recordControlNumbers: typing.Union[MetaOapg.properties.recordControlNumbers, list, tuple, schemas.Unset] = schemas.unset,
                                                    issns: typing.Union[MetaOapg.properties.issns, list, tuple, schemas.Unset] = schemas.unset,
                                                    coden: typing.Union[MetaOapg.properties.coden, str, schemas.Unset] = schemas.unset,
                                                    isbns: typing.Union[MetaOapg.properties.isbns, list, tuple, schemas.Unset] = schemas.unset,
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                ) -> 'relatedItem':
                                                    return super().__new__(
                                                        cls,
                                                        *_args,
                                                        typeOfRelationship=typeOfRelationship,
                                                        relatedItemTitle=relatedItemTitle,
                                                        relationshipInfo=relationshipInfo,
                                                        relatedParts=relatedParts,
                                                        mainEntryHeading=mainEntryHeading,
                                                        edition=edition,
                                                        qualifyingInfo=qualifyingInfo,
                                                        publicationInfo=publicationInfo,
                                                        physicalDescription=physicalDescription,
                                                        seriesData=seriesData,
                                                        materialSpecificDetail=materialSpecificDetail,
                                                        relatedItemNotes=relatedItemNotes,
                                                        otherItemIdentifiers=otherItemIdentifiers,
                                                        reportNumbers=reportNumbers,
                                                        uniformTitle=uniformTitle,
                                                        standardTechReportNumber=standardTechReportNumber,
                                                        recordControlNumbers=recordControlNumbers,
                                                        issns=issns,
                                                        coden=coden,
                                                        isbns=isbns,
                                                        _configuration=_configuration,
                                                        **kwargs,
                                                    )
                                            __annotations__ = {
                                                "firstName": firstName,
                                                "secondName": secondName,
                                                "nonPersonName": nonPersonName,
                                                "type": type,
                                                "creatorNotes": creatorNotes,
                                                "relators": relators,
                                                "affiliation": affiliation,
                                                "isPrimary": isPrimary,
                                                "relatedItem": relatedItem,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["firstName"]) -> MetaOapg.properties.firstName: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["secondName"]) -> MetaOapg.properties.secondName: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["nonPersonName"]) -> MetaOapg.properties.nonPersonName: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["creatorNotes"]) -> MetaOapg.properties.creatorNotes: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["relators"]) -> MetaOapg.properties.relators: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["affiliation"]) -> MetaOapg.properties.affiliation: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["isPrimary"]) -> MetaOapg.properties.isPrimary: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["relatedItem"]) -> MetaOapg.properties.relatedItem: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["firstName", "secondName", "nonPersonName", "type", "creatorNotes", "relators", "affiliation", "isPrimary", "relatedItem", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["firstName"]) -> typing.Union[MetaOapg.properties.firstName, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["secondName"]) -> typing.Union[MetaOapg.properties.secondName, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["nonPersonName"]) -> typing.Union[MetaOapg.properties.nonPersonName, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["creatorNotes"]) -> typing.Union[MetaOapg.properties.creatorNotes, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["relators"]) -> typing.Union[MetaOapg.properties.relators, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["affiliation"]) -> typing.Union[MetaOapg.properties.affiliation, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["isPrimary"]) -> typing.Union[MetaOapg.properties.isPrimary, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["relatedItem"]) -> typing.Union[MetaOapg.properties.relatedItem, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["firstName", "secondName", "nonPersonName", "type", "creatorNotes", "relators", "affiliation", "isPrimary", "relatedItem", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        firstName: typing.Union[MetaOapg.properties.firstName, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                        secondName: typing.Union[MetaOapg.properties.secondName, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                        nonPersonName: typing.Union[MetaOapg.properties.nonPersonName, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
                                        creatorNotes: typing.Union[MetaOapg.properties.creatorNotes, list, tuple, schemas.Unset] = schemas.unset,
                                        relators: typing.Union[MetaOapg.properties.relators, list, tuple, schemas.Unset] = schemas.unset,
                                        affiliation: typing.Union[MetaOapg.properties.affiliation, str, schemas.Unset] = schemas.unset,
                                        isPrimary: typing.Union[MetaOapg.properties.isPrimary, bool, schemas.Unset] = schemas.unset,
                                        relatedItem: typing.Union[MetaOapg.properties.relatedItem, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            firstName=firstName,
                                            secondName=secondName,
                                            nonPersonName=nonPersonName,
                                            type=type,
                                            creatorNotes=creatorNotes,
                                            relators=relators,
                                            affiliation=affiliation,
                                            isPrimary=isPrimary,
                                            relatedItem=relatedItem,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'creators':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class additionalCreators(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            relationshipInfo = schemas.StrSchema
                                            
                                            
                                            class titles(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'titles':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            
                                            
                                            class issns(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'issns':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            
                                            
                                            class relators(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    
                                                    
                                                    class items(
                                                        schemas.DictSchema
                                                    ):
                                                    
                                                    
                                                        class MetaOapg:
                                                            
                                                            class properties:
                                                                term = schemas.StrSchema
                                                                alternateTerm = schemas.StrSchema
                                                                __annotations__ = {
                                                                    "term": term,
                                                                    "alternateTerm": alternateTerm,
                                                                }
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["term"]) -> MetaOapg.properties.term: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["alternateTerm"]) -> MetaOapg.properties.alternateTerm: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                        
                                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["term", "alternateTerm", ], str]):
                                                            # dict_instance[name] accessor
                                                            return super().__getitem__(name)
                                                        
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["term"]) -> typing.Union[MetaOapg.properties.term, schemas.Unset]: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["alternateTerm"]) -> typing.Union[MetaOapg.properties.alternateTerm, schemas.Unset]: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                        
                                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["term", "alternateTerm", ], str]):
                                                            return super().get_item_oapg(name)
                                                        
                                                    
                                                        def __new__(
                                                            cls,
                                                            *_args: typing.Union[dict, frozendict.frozendict, ],
                                                            term: typing.Union[MetaOapg.properties.term, str, schemas.Unset] = schemas.unset,
                                                            alternateTerm: typing.Union[MetaOapg.properties.alternateTerm, str, schemas.Unset] = schemas.unset,
                                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                        ) -> 'items':
                                                            return super().__new__(
                                                                cls,
                                                                *_args,
                                                                term=term,
                                                                alternateTerm=alternateTerm,
                                                                _configuration=_configuration,
                                                                **kwargs,
                                                            )
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'relators':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            relatedData = schemas.StrSchema
                                            additionalRelationshipInfo = schemas.StrSchema
                                            __annotations__ = {
                                                "relationshipInfo": relationshipInfo,
                                                "titles": titles,
                                                "issns": issns,
                                                "relators": relators,
                                                "relatedData": relatedData,
                                                "additionalRelationshipInfo": additionalRelationshipInfo,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["relationshipInfo"]) -> MetaOapg.properties.relationshipInfo: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["titles"]) -> MetaOapg.properties.titles: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["issns"]) -> MetaOapg.properties.issns: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["relators"]) -> MetaOapg.properties.relators: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["relatedData"]) -> MetaOapg.properties.relatedData: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["additionalRelationshipInfo"]) -> MetaOapg.properties.additionalRelationshipInfo: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["relationshipInfo", "titles", "issns", "relators", "relatedData", "additionalRelationshipInfo", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["relationshipInfo"]) -> typing.Union[MetaOapg.properties.relationshipInfo, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["titles"]) -> typing.Union[MetaOapg.properties.titles, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["issns"]) -> typing.Union[MetaOapg.properties.issns, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["relators"]) -> typing.Union[MetaOapg.properties.relators, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["relatedData"]) -> typing.Union[MetaOapg.properties.relatedData, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["additionalRelationshipInfo"]) -> typing.Union[MetaOapg.properties.additionalRelationshipInfo, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["relationshipInfo", "titles", "issns", "relators", "relatedData", "additionalRelationshipInfo", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        relationshipInfo: typing.Union[MetaOapg.properties.relationshipInfo, str, schemas.Unset] = schemas.unset,
                                        titles: typing.Union[MetaOapg.properties.titles, list, tuple, schemas.Unset] = schemas.unset,
                                        issns: typing.Union[MetaOapg.properties.issns, list, tuple, schemas.Unset] = schemas.unset,
                                        relators: typing.Union[MetaOapg.properties.relators, list, tuple, schemas.Unset] = schemas.unset,
                                        relatedData: typing.Union[MetaOapg.properties.relatedData, str, schemas.Unset] = schemas.unset,
                                        additionalRelationshipInfo: typing.Union[MetaOapg.properties.additionalRelationshipInfo, str, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            relationshipInfo=relationshipInfo,
                                            titles=titles,
                                            issns=issns,
                                            relators=relators,
                                            relatedData=relatedData,
                                            additionalRelationshipInfo=additionalRelationshipInfo,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'additionalCreators':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class statementOfResponsibility(
                            schemas.ComposedSchema,
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class all_of_0(
                                    schemas.ComposedSchema,
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        
                                        class all_of_0(
                                            schemas.DictSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                
                                                class properties:
                                                    text = schemas.StrSchema
                                                    romanizedText = schemas.StrSchema
                                                    languageCode = schemas.StrSchema
                                                    
                                                    
                                                    class textDirection(
                                                        schemas.EnumBase,
                                                        schemas.StrSchema
                                                    ):
                                                        
                                                        @schemas.classproperty
                                                        def RTL(cls):
                                                            return cls("RTL")
                                                        
                                                        @schemas.classproperty
                                                        def LTR(cls):
                                                            return cls("LTR")
                                                    __annotations__ = {
                                                        "text": text,
                                                        "romanizedText": romanizedText,
                                                        "languageCode": languageCode,
                                                        "textDirection": textDirection,
                                                    }
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["text"]) -> MetaOapg.properties.text: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["romanizedText"]) -> MetaOapg.properties.romanizedText: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["languageCode"]) -> MetaOapg.properties.languageCode: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["textDirection"]) -> MetaOapg.properties.textDirection: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                            
                                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["text", "romanizedText", "languageCode", "textDirection", ], str]):
                                                # dict_instance[name] accessor
                                                return super().__getitem__(name)
                                            
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["text"]) -> typing.Union[MetaOapg.properties.text, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["romanizedText"]) -> typing.Union[MetaOapg.properties.romanizedText, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["languageCode"]) -> typing.Union[MetaOapg.properties.languageCode, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["textDirection"]) -> typing.Union[MetaOapg.properties.textDirection, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                            
                                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["text", "romanizedText", "languageCode", "textDirection", ], str]):
                                                return super().get_item_oapg(name)
                                            
                                        
                                            def __new__(
                                                cls,
                                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                                text: typing.Union[MetaOapg.properties.text, str, schemas.Unset] = schemas.unset,
                                                romanizedText: typing.Union[MetaOapg.properties.romanizedText, str, schemas.Unset] = schemas.unset,
                                                languageCode: typing.Union[MetaOapg.properties.languageCode, str, schemas.Unset] = schemas.unset,
                                                textDirection: typing.Union[MetaOapg.properties.textDirection, str, schemas.Unset] = schemas.unset,
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                            ) -> 'all_of_0':
                                                return super().__new__(
                                                    cls,
                                                    *_args,
                                                    text=text,
                                                    romanizedText=romanizedText,
                                                    languageCode=languageCode,
                                                    textDirection=textDirection,
                                                    _configuration=_configuration,
                                                    **kwargs,
                                                )
                                        
                                        @classmethod
                                        @functools.lru_cache()
                                        def all_of(cls):
                                            # we need this here to make our import statements work
                                            # we must store _composed_schemas in here so the code is only run
                                            # when we invoke this method. If we kept this at the class
                                            # level we would get an error because the class level
                                            # code would be run when this module is imported, and these composed
                                            # classes don't exist yet because their module has not finished
                                            # loading
                                            return [
                                                cls.all_of_0,
                                            ]
                                
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'all_of_0':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                
                                @classmethod
                                @functools.lru_cache()
                                def all_of(cls):
                                    # we need this here to make our import statements work
                                    # we must store _composed_schemas in here so the code is only run
                                    # when we invoke this method. If we kept this at the class
                                    # level we would get an error because the class level
                                    # code would be run when this module is imported, and these composed
                                    # classes don't exist yet because their module has not finished
                                    # loading
                                    return [
                                        cls.all_of_0,
                                    ]
                        
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'statementOfResponsibility':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        __annotations__ = {
                            "creators": creators,
                            "additionalCreators": additionalCreators,
                            "statementOfResponsibility": statementOfResponsibility,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["creators"]) -> MetaOapg.properties.creators: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["additionalCreators"]) -> MetaOapg.properties.additionalCreators: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["statementOfResponsibility"]) -> MetaOapg.properties.statementOfResponsibility: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["creators", "additionalCreators", "statementOfResponsibility", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["creators"]) -> typing.Union[MetaOapg.properties.creators, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["additionalCreators"]) -> typing.Union[MetaOapg.properties.additionalCreators, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["statementOfResponsibility"]) -> typing.Union[MetaOapg.properties.statementOfResponsibility, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["creators", "additionalCreators", "statementOfResponsibility", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    creators: typing.Union[MetaOapg.properties.creators, list, tuple, schemas.Unset] = schemas.unset,
                    additionalCreators: typing.Union[MetaOapg.properties.additionalCreators, list, tuple, schemas.Unset] = schemas.unset,
                    statementOfResponsibility: typing.Union[MetaOapg.properties.statementOfResponsibility, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'localContributor':
                    return super().__new__(
                        cls,
                        *_args,
                        creators=creators,
                        additionalCreators=additionalCreators,
                        statementOfResponsibility=statementOfResponsibility,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class localSubjects(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                
                                
                                class subjectName(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            text = schemas.StrSchema
                                            romanizedText = schemas.StrSchema
                                            languageCode = schemas.StrSchema
                                            
                                            
                                            class textDirection(
                                                schemas.EnumBase,
                                                schemas.StrSchema
                                            ):
                                                
                                                @schemas.classproperty
                                                def RTL(cls):
                                                    return cls("RTL")
                                                
                                                @schemas.classproperty
                                                def LTR(cls):
                                                    return cls("LTR")
                                            __annotations__ = {
                                                "text": text,
                                                "romanizedText": romanizedText,
                                                "languageCode": languageCode,
                                                "textDirection": textDirection,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["text"]) -> MetaOapg.properties.text: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["romanizedText"]) -> MetaOapg.properties.romanizedText: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["languageCode"]) -> MetaOapg.properties.languageCode: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["textDirection"]) -> MetaOapg.properties.textDirection: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["text", "romanizedText", "languageCode", "textDirection", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["text"]) -> typing.Union[MetaOapg.properties.text, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["romanizedText"]) -> typing.Union[MetaOapg.properties.romanizedText, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["languageCode"]) -> typing.Union[MetaOapg.properties.languageCode, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["textDirection"]) -> typing.Union[MetaOapg.properties.textDirection, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["text", "romanizedText", "languageCode", "textDirection", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        text: typing.Union[MetaOapg.properties.text, str, schemas.Unset] = schemas.unset,
                                        romanizedText: typing.Union[MetaOapg.properties.romanizedText, str, schemas.Unset] = schemas.unset,
                                        languageCode: typing.Union[MetaOapg.properties.languageCode, str, schemas.Unset] = schemas.unset,
                                        textDirection: typing.Union[MetaOapg.properties.textDirection, str, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'subjectName':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            text=text,
                                            romanizedText=romanizedText,
                                            languageCode=languageCode,
                                            textDirection=textDirection,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                vocabulary = schemas.StrSchema
                                
                                
                                class relators(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        
                                        class items(
                                            schemas.DictSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                
                                                class properties:
                                                    term = schemas.StrSchema
                                                    alternateTerm = schemas.StrSchema
                                                    __annotations__ = {
                                                        "term": term,
                                                        "alternateTerm": alternateTerm,
                                                    }
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["term"]) -> MetaOapg.properties.term: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["alternateTerm"]) -> MetaOapg.properties.alternateTerm: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                            
                                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["term", "alternateTerm", ], str]):
                                                # dict_instance[name] accessor
                                                return super().__getitem__(name)
                                            
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["term"]) -> typing.Union[MetaOapg.properties.term, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["alternateTerm"]) -> typing.Union[MetaOapg.properties.alternateTerm, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                            
                                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["term", "alternateTerm", ], str]):
                                                return super().get_item_oapg(name)
                                            
                                        
                                            def __new__(
                                                cls,
                                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                                term: typing.Union[MetaOapg.properties.term, str, schemas.Unset] = schemas.unset,
                                                alternateTerm: typing.Union[MetaOapg.properties.alternateTerm, str, schemas.Unset] = schemas.unset,
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                            ) -> 'items':
                                                return super().__new__(
                                                    cls,
                                                    *_args,
                                                    term=term,
                                                    alternateTerm=alternateTerm,
                                                    _configuration=_configuration,
                                                    **kwargs,
                                                )
                                
                                    def __new__(
                                        cls,
                                        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'relators':
                                        return super().__new__(
                                            cls,
                                            _arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                subjectType = schemas.StrSchema
                                uri = schemas.StrSchema
                                __annotations__ = {
                                    "subjectName": subjectName,
                                    "vocabulary": vocabulary,
                                    "relators": relators,
                                    "subjectType": subjectType,
                                    "uri": uri,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["subjectName"]) -> MetaOapg.properties.subjectName: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["vocabulary"]) -> MetaOapg.properties.vocabulary: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["relators"]) -> MetaOapg.properties.relators: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["subjectType"]) -> MetaOapg.properties.subjectType: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["subjectName", "vocabulary", "relators", "subjectType", "uri", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["subjectName"]) -> typing.Union[MetaOapg.properties.subjectName, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["vocabulary"]) -> typing.Union[MetaOapg.properties.vocabulary, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["relators"]) -> typing.Union[MetaOapg.properties.relators, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["subjectType"]) -> typing.Union[MetaOapg.properties.subjectType, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["uri"]) -> typing.Union[MetaOapg.properties.uri, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["subjectName", "vocabulary", "relators", "subjectType", "uri", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            subjectName: typing.Union[MetaOapg.properties.subjectName, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                            vocabulary: typing.Union[MetaOapg.properties.vocabulary, str, schemas.Unset] = schemas.unset,
                            relators: typing.Union[MetaOapg.properties.relators, list, tuple, schemas.Unset] = schemas.unset,
                            subjectType: typing.Union[MetaOapg.properties.subjectType, str, schemas.Unset] = schemas.unset,
                            uri: typing.Union[MetaOapg.properties.uri, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                subjectName=subjectName,
                                vocabulary=vocabulary,
                                relators=relators,
                                subjectType=subjectType,
                                uri=uri,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'localSubjects':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class localNote(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class generalNotes(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            text = schemas.StrSchema
                                            private = schemas.BoolSchema
                                            __annotations__ = {
                                                "text": text,
                                                "private": private,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["text"]) -> MetaOapg.properties.text: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["private"]) -> MetaOapg.properties.private: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["text", "private", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["text"]) -> typing.Union[MetaOapg.properties.text, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["private"]) -> typing.Union[MetaOapg.properties.private, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["text", "private", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        text: typing.Union[MetaOapg.properties.text, str, schemas.Unset] = schemas.unset,
                                        private: typing.Union[MetaOapg.properties.private, bool, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            text=text,
                                            private=private,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'generalNotes':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        audienceNote = schemas.StrSchema
                        
                        
                        class dissertationNotes(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            disserationNote = schemas.StrSchema
                                            type = schemas.StrSchema
                                            institution = schemas.StrSchema
                                            year = schemas.StrSchema
                                            id = schemas.StrSchema
                                            miscellaneousInfo = schemas.StrSchema
                                            __annotations__ = {
                                                "disserationNote": disserationNote,
                                                "type": type,
                                                "institution": institution,
                                                "year": year,
                                                "id": id,
                                                "miscellaneousInfo": miscellaneousInfo,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["disserationNote"]) -> MetaOapg.properties.disserationNote: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["institution"]) -> MetaOapg.properties.institution: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["year"]) -> MetaOapg.properties.year: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["miscellaneousInfo"]) -> MetaOapg.properties.miscellaneousInfo: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["disserationNote", "type", "institution", "year", "id", "miscellaneousInfo", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["disserationNote"]) -> typing.Union[MetaOapg.properties.disserationNote, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["institution"]) -> typing.Union[MetaOapg.properties.institution, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["year"]) -> typing.Union[MetaOapg.properties.year, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["miscellaneousInfo"]) -> typing.Union[MetaOapg.properties.miscellaneousInfo, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["disserationNote", "type", "institution", "year", "id", "miscellaneousInfo", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        disserationNote: typing.Union[MetaOapg.properties.disserationNote, str, schemas.Unset] = schemas.unset,
                                        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
                                        institution: typing.Union[MetaOapg.properties.institution, str, schemas.Unset] = schemas.unset,
                                        year: typing.Union[MetaOapg.properties.year, str, schemas.Unset] = schemas.unset,
                                        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                                        miscellaneousInfo: typing.Union[MetaOapg.properties.miscellaneousInfo, str, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            disserationNote=disserationNote,
                                            type=type,
                                            institution=institution,
                                            year=year,
                                            id=id,
                                            miscellaneousInfo=miscellaneousInfo,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'dissertationNotes':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class castNotes(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'castNotes':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class performerNotes(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'performerNotes':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        participantNote = schemas.StrSchema
                        
                        
                        class eventNotes(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            compositeNote = schemas.StrSchema
                                            eventDate = schemas.StrSchema
                                            eventPlace = schemas.StrSchema
                                            eventInfo = schemas.StrSchema
                                            material = schemas.StrSchema
                                            __annotations__ = {
                                                "compositeNote": compositeNote,
                                                "eventDate": eventDate,
                                                "eventPlace": eventPlace,
                                                "eventInfo": eventInfo,
                                                "material": material,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["compositeNote"]) -> MetaOapg.properties.compositeNote: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["eventDate"]) -> MetaOapg.properties.eventDate: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["eventPlace"]) -> MetaOapg.properties.eventPlace: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["eventInfo"]) -> MetaOapg.properties.eventInfo: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["material"]) -> MetaOapg.properties.material: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["compositeNote", "eventDate", "eventPlace", "eventInfo", "material", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["compositeNote"]) -> typing.Union[MetaOapg.properties.compositeNote, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["eventDate"]) -> typing.Union[MetaOapg.properties.eventDate, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["eventPlace"]) -> typing.Union[MetaOapg.properties.eventPlace, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["eventInfo"]) -> typing.Union[MetaOapg.properties.eventInfo, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["material"]) -> typing.Union[MetaOapg.properties.material, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["compositeNote", "eventDate", "eventPlace", "eventInfo", "material", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        compositeNote: typing.Union[MetaOapg.properties.compositeNote, str, schemas.Unset] = schemas.unset,
                                        eventDate: typing.Union[MetaOapg.properties.eventDate, str, schemas.Unset] = schemas.unset,
                                        eventPlace: typing.Union[MetaOapg.properties.eventPlace, str, schemas.Unset] = schemas.unset,
                                        eventInfo: typing.Union[MetaOapg.properties.eventInfo, str, schemas.Unset] = schemas.unset,
                                        material: typing.Union[MetaOapg.properties.material, str, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            compositeNote=compositeNote,
                                            eventDate=eventDate,
                                            eventPlace=eventPlace,
                                            eventInfo=eventInfo,
                                            material=material,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'eventNotes':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        creditNotes = schemas.StrSchema
                        
                        
                        class scaleNotes(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'scaleNotes':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class reproductionNotes(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.AnyTypeSchema,
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            reproductionType = schemas.StrSchema
                                            
                                            
                                            class reproductionPlace(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'reproductionPlace':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            
                                            
                                            class agency(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'agency':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            date = schemas.StrSchema
                                            physicalDescription = schemas.StrSchema
                                            
                                            
                                            class seriesStatement(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'seriesStatement':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            
                                            
                                            class datesIssuesReproduced(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'datesIssuesReproduced':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            
                                            
                                            class note(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.StrSchema
                                            
                                                def __new__(
                                                    cls,
                                                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'note':
                                                    return super().__new__(
                                                        cls,
                                                        _arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            materialSpecified = schemas.StrSchema
                                            institution = schemas.StrSchema
                                            __annotations__ = {
                                                "reproductionType": reproductionType,
                                                "reproductionPlace": reproductionPlace,
                                                "agency": agency,
                                                "date": date,
                                                "physicalDescription": physicalDescription,
                                                "seriesStatement": seriesStatement,
                                                "datesIssuesReproduced": datesIssuesReproduced,
                                                "note": note,
                                                "materialSpecified": materialSpecified,
                                                "institution": institution,
                                            }
                                
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["reproductionType"]) -> MetaOapg.properties.reproductionType: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["reproductionPlace"]) -> MetaOapg.properties.reproductionPlace: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["agency"]) -> MetaOapg.properties.agency: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["physicalDescription"]) -> MetaOapg.properties.physicalDescription: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["seriesStatement"]) -> MetaOapg.properties.seriesStatement: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["datesIssuesReproduced"]) -> MetaOapg.properties.datesIssuesReproduced: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["note"]) -> MetaOapg.properties.note: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["materialSpecified"]) -> MetaOapg.properties.materialSpecified: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["institution"]) -> MetaOapg.properties.institution: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["reproductionType", "reproductionPlace", "agency", "date", "physicalDescription", "seriesStatement", "datesIssuesReproduced", "note", "materialSpecified", "institution", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["reproductionType"]) -> typing.Union[MetaOapg.properties.reproductionType, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["reproductionPlace"]) -> typing.Union[MetaOapg.properties.reproductionPlace, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["agency"]) -> typing.Union[MetaOapg.properties.agency, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> typing.Union[MetaOapg.properties.date, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["physicalDescription"]) -> typing.Union[MetaOapg.properties.physicalDescription, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["seriesStatement"]) -> typing.Union[MetaOapg.properties.seriesStatement, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["datesIssuesReproduced"]) -> typing.Union[MetaOapg.properties.datesIssuesReproduced, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["note"]) -> typing.Union[MetaOapg.properties.note, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["materialSpecified"]) -> typing.Union[MetaOapg.properties.materialSpecified, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["institution"]) -> typing.Union[MetaOapg.properties.institution, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["reproductionType", "reproductionPlace", "agency", "date", "physicalDescription", "seriesStatement", "datesIssuesReproduced", "note", "materialSpecified", "institution", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        reproductionType: typing.Union[MetaOapg.properties.reproductionType, str, schemas.Unset] = schemas.unset,
                                        reproductionPlace: typing.Union[MetaOapg.properties.reproductionPlace, list, tuple, schemas.Unset] = schemas.unset,
                                        agency: typing.Union[MetaOapg.properties.agency, list, tuple, schemas.Unset] = schemas.unset,
                                        date: typing.Union[MetaOapg.properties.date, str, schemas.Unset] = schemas.unset,
                                        physicalDescription: typing.Union[MetaOapg.properties.physicalDescription, str, schemas.Unset] = schemas.unset,
                                        seriesStatement: typing.Union[MetaOapg.properties.seriesStatement, list, tuple, schemas.Unset] = schemas.unset,
                                        datesIssuesReproduced: typing.Union[MetaOapg.properties.datesIssuesReproduced, list, tuple, schemas.Unset] = schemas.unset,
                                        note: typing.Union[MetaOapg.properties.note, list, tuple, schemas.Unset] = schemas.unset,
                                        materialSpecified: typing.Union[MetaOapg.properties.materialSpecified, str, schemas.Unset] = schemas.unset,
                                        institution: typing.Union[MetaOapg.properties.institution, str, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            reproductionType=reproductionType,
                                            reproductionPlace=reproductionPlace,
                                            agency=agency,
                                            date=date,
                                            physicalDescription=physicalDescription,
                                            seriesStatement=seriesStatement,
                                            datesIssuesReproduced=datesIssuesReproduced,
                                            note=note,
                                            materialSpecified=materialSpecified,
                                            institution=institution,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'reproductionNotes':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class useAndReproductionNotes(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'useAndReproductionNotes':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class useownershipAndCustodialHistories(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'useownershipAndCustodialHistories':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        systemDetailNote = schemas.StrSchema
                        awardNote = schemas.StrSchema
                        
                        
                        class languageNotes(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'languageNotes':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        __annotations__ = {
                            "generalNotes": generalNotes,
                            "audienceNote": audienceNote,
                            "dissertationNotes": dissertationNotes,
                            "castNotes": castNotes,
                            "performerNotes": performerNotes,
                            "participantNote": participantNote,
                            "eventNotes": eventNotes,
                            "creditNotes": creditNotes,
                            "scaleNotes": scaleNotes,
                            "reproductionNotes": reproductionNotes,
                            "useAndReproductionNotes": useAndReproductionNotes,
                            "useownershipAndCustodialHistories": useownershipAndCustodialHistories,
                            "systemDetailNote": systemDetailNote,
                            "awardNote": awardNote,
                            "languageNotes": languageNotes,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["generalNotes"]) -> MetaOapg.properties.generalNotes: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["audienceNote"]) -> MetaOapg.properties.audienceNote: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["dissertationNotes"]) -> MetaOapg.properties.dissertationNotes: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["castNotes"]) -> MetaOapg.properties.castNotes: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["performerNotes"]) -> MetaOapg.properties.performerNotes: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["participantNote"]) -> MetaOapg.properties.participantNote: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["eventNotes"]) -> MetaOapg.properties.eventNotes: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["creditNotes"]) -> MetaOapg.properties.creditNotes: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["scaleNotes"]) -> MetaOapg.properties.scaleNotes: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["reproductionNotes"]) -> MetaOapg.properties.reproductionNotes: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["useAndReproductionNotes"]) -> MetaOapg.properties.useAndReproductionNotes: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["useownershipAndCustodialHistories"]) -> MetaOapg.properties.useownershipAndCustodialHistories: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["systemDetailNote"]) -> MetaOapg.properties.systemDetailNote: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["awardNote"]) -> MetaOapg.properties.awardNote: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["languageNotes"]) -> MetaOapg.properties.languageNotes: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["generalNotes", "audienceNote", "dissertationNotes", "castNotes", "performerNotes", "participantNote", "eventNotes", "creditNotes", "scaleNotes", "reproductionNotes", "useAndReproductionNotes", "useownershipAndCustodialHistories", "systemDetailNote", "awardNote", "languageNotes", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["generalNotes"]) -> typing.Union[MetaOapg.properties.generalNotes, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["audienceNote"]) -> typing.Union[MetaOapg.properties.audienceNote, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["dissertationNotes"]) -> typing.Union[MetaOapg.properties.dissertationNotes, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["castNotes"]) -> typing.Union[MetaOapg.properties.castNotes, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["performerNotes"]) -> typing.Union[MetaOapg.properties.performerNotes, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["participantNote"]) -> typing.Union[MetaOapg.properties.participantNote, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["eventNotes"]) -> typing.Union[MetaOapg.properties.eventNotes, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["creditNotes"]) -> typing.Union[MetaOapg.properties.creditNotes, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["scaleNotes"]) -> typing.Union[MetaOapg.properties.scaleNotes, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["reproductionNotes"]) -> typing.Union[MetaOapg.properties.reproductionNotes, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["useAndReproductionNotes"]) -> typing.Union[MetaOapg.properties.useAndReproductionNotes, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["useownershipAndCustodialHistories"]) -> typing.Union[MetaOapg.properties.useownershipAndCustodialHistories, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["systemDetailNote"]) -> typing.Union[MetaOapg.properties.systemDetailNote, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["awardNote"]) -> typing.Union[MetaOapg.properties.awardNote, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["languageNotes"]) -> typing.Union[MetaOapg.properties.languageNotes, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["generalNotes", "audienceNote", "dissertationNotes", "castNotes", "performerNotes", "participantNote", "eventNotes", "creditNotes", "scaleNotes", "reproductionNotes", "useAndReproductionNotes", "useownershipAndCustodialHistories", "systemDetailNote", "awardNote", "languageNotes", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    generalNotes: typing.Union[MetaOapg.properties.generalNotes, list, tuple, schemas.Unset] = schemas.unset,
                    audienceNote: typing.Union[MetaOapg.properties.audienceNote, str, schemas.Unset] = schemas.unset,
                    dissertationNotes: typing.Union[MetaOapg.properties.dissertationNotes, list, tuple, schemas.Unset] = schemas.unset,
                    castNotes: typing.Union[MetaOapg.properties.castNotes, list, tuple, schemas.Unset] = schemas.unset,
                    performerNotes: typing.Union[MetaOapg.properties.performerNotes, list, tuple, schemas.Unset] = schemas.unset,
                    participantNote: typing.Union[MetaOapg.properties.participantNote, str, schemas.Unset] = schemas.unset,
                    eventNotes: typing.Union[MetaOapg.properties.eventNotes, list, tuple, schemas.Unset] = schemas.unset,
                    creditNotes: typing.Union[MetaOapg.properties.creditNotes, str, schemas.Unset] = schemas.unset,
                    scaleNotes: typing.Union[MetaOapg.properties.scaleNotes, list, tuple, schemas.Unset] = schemas.unset,
                    reproductionNotes: typing.Union[MetaOapg.properties.reproductionNotes, list, tuple, schemas.Unset] = schemas.unset,
                    useAndReproductionNotes: typing.Union[MetaOapg.properties.useAndReproductionNotes, list, tuple, schemas.Unset] = schemas.unset,
                    useownershipAndCustodialHistories: typing.Union[MetaOapg.properties.useownershipAndCustodialHistories, list, tuple, schemas.Unset] = schemas.unset,
                    systemDetailNote: typing.Union[MetaOapg.properties.systemDetailNote, str, schemas.Unset] = schemas.unset,
                    awardNote: typing.Union[MetaOapg.properties.awardNote, str, schemas.Unset] = schemas.unset,
                    languageNotes: typing.Union[MetaOapg.properties.languageNotes, list, tuple, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'localNote':
                    return super().__new__(
                        cls,
                        *_args,
                        generalNotes=generalNotes,
                        audienceNote=audienceNote,
                        dissertationNotes=dissertationNotes,
                        castNotes=castNotes,
                        performerNotes=performerNotes,
                        participantNote=participantNote,
                        eventNotes=eventNotes,
                        creditNotes=creditNotes,
                        scaleNotes=scaleNotes,
                        reproductionNotes=reproductionNotes,
                        useAndReproductionNotes=useAndReproductionNotes,
                        useownershipAndCustodialHistories=useownershipAndCustodialHistories,
                        systemDetailNote=systemDetailNote,
                        awardNote=awardNote,
                        languageNotes=languageNotes,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class localGenres(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'localGenres':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "identifier": identifier,
                "title": title,
                "contributor": contributor,
                "subjects": subjects,
                "classification": classification,
                "publishers": publishers,
                "date": date,
                "language": language,
                "edition": edition,
                "source": source,
                "note": note,
                "format": format,
                "musicInfo": musicInfo,
                "digitalAccessAndLocations": digitalAccessAndLocations,
                "description": description,
                "related": related,
                "work": work,
                "editionCluster": editionCluster,
                "totalEditions": totalEditions,
                "database": database,
                "localTitle": localTitle,
                "localContributor": localContributor,
                "localSubjects": localSubjects,
                "localNote": localNote,
                "localGenres": localGenres,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["identifier"]) -> MetaOapg.properties.identifier: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contributor"]) -> MetaOapg.properties.contributor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subjects"]) -> MetaOapg.properties.subjects: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["classification"]) -> MetaOapg.properties.classification: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["publishers"]) -> MetaOapg.properties.publishers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["language"]) -> MetaOapg.properties.language: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["edition"]) -> MetaOapg.properties.edition: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["note"]) -> MetaOapg.properties.note: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["format"]) -> MetaOapg.properties.format: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["musicInfo"]) -> MetaOapg.properties.musicInfo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["digitalAccessAndLocations"]) -> MetaOapg.properties.digitalAccessAndLocations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["related"]) -> MetaOapg.properties.related: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["work"]) -> MetaOapg.properties.work: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["editionCluster"]) -> MetaOapg.properties.editionCluster: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalEditions"]) -> MetaOapg.properties.totalEditions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["database"]) -> MetaOapg.properties.database: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["localTitle"]) -> MetaOapg.properties.localTitle: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["localContributor"]) -> MetaOapg.properties.localContributor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["localSubjects"]) -> MetaOapg.properties.localSubjects: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["localNote"]) -> MetaOapg.properties.localNote: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["localGenres"]) -> MetaOapg.properties.localGenres: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["identifier", "title", "contributor", "subjects", "classification", "publishers", "date", "language", "edition", "source", "note", "format", "musicInfo", "digitalAccessAndLocations", "description", "related", "work", "editionCluster", "totalEditions", "database", "localTitle", "localContributor", "localSubjects", "localNote", "localGenres", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["identifier"]) -> typing.Union[MetaOapg.properties.identifier, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contributor"]) -> typing.Union[MetaOapg.properties.contributor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subjects"]) -> typing.Union[MetaOapg.properties.subjects, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["classification"]) -> typing.Union[MetaOapg.properties.classification, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["publishers"]) -> typing.Union[MetaOapg.properties.publishers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> typing.Union[MetaOapg.properties.date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["language"]) -> typing.Union[MetaOapg.properties.language, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["edition"]) -> typing.Union[MetaOapg.properties.edition, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> typing.Union[MetaOapg.properties.source, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["note"]) -> typing.Union[MetaOapg.properties.note, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["format"]) -> typing.Union[MetaOapg.properties.format, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["musicInfo"]) -> typing.Union[MetaOapg.properties.musicInfo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["digitalAccessAndLocations"]) -> typing.Union[MetaOapg.properties.digitalAccessAndLocations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["related"]) -> typing.Union[MetaOapg.properties.related, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["work"]) -> typing.Union[MetaOapg.properties.work, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["editionCluster"]) -> typing.Union[MetaOapg.properties.editionCluster, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalEditions"]) -> typing.Union[MetaOapg.properties.totalEditions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["database"]) -> typing.Union[MetaOapg.properties.database, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["localTitle"]) -> typing.Union[MetaOapg.properties.localTitle, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["localContributor"]) -> typing.Union[MetaOapg.properties.localContributor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["localSubjects"]) -> typing.Union[MetaOapg.properties.localSubjects, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["localNote"]) -> typing.Union[MetaOapg.properties.localNote, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["localGenres"]) -> typing.Union[MetaOapg.properties.localGenres, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["identifier", "title", "contributor", "subjects", "classification", "publishers", "date", "language", "edition", "source", "note", "format", "musicInfo", "digitalAccessAndLocations", "description", "related", "work", "editionCluster", "totalEditions", "database", "localTitle", "localContributor", "localSubjects", "localNote", "localGenres", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        identifier: typing.Union[MetaOapg.properties.identifier, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        title: typing.Union[MetaOapg.properties.title, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        contributor: typing.Union[MetaOapg.properties.contributor, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        subjects: typing.Union[MetaOapg.properties.subjects, list, tuple, schemas.Unset] = schemas.unset,
        classification: typing.Union[MetaOapg.properties.classification, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        publishers: typing.Union[MetaOapg.properties.publishers, list, tuple, schemas.Unset] = schemas.unset,
        date: typing.Union[MetaOapg.properties.date, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        language: typing.Union[MetaOapg.properties.language, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        edition: typing.Union[MetaOapg.properties.edition, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        source: typing.Union[MetaOapg.properties.source, list, tuple, schemas.Unset] = schemas.unset,
        note: typing.Union[MetaOapg.properties.note, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        format: typing.Union[MetaOapg.properties.format, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        musicInfo: typing.Union[MetaOapg.properties.musicInfo, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        digitalAccessAndLocations: typing.Union[MetaOapg.properties.digitalAccessAndLocations, list, tuple, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        related: typing.Union[MetaOapg.properties.related, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        work: typing.Union[MetaOapg.properties.work, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        editionCluster: typing.Union[MetaOapg.properties.editionCluster, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        totalEditions: typing.Union[MetaOapg.properties.totalEditions, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        database: typing.Union[MetaOapg.properties.database, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        localTitle: typing.Union[MetaOapg.properties.localTitle, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        localContributor: typing.Union[MetaOapg.properties.localContributor, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        localSubjects: typing.Union[MetaOapg.properties.localSubjects, list, tuple, schemas.Unset] = schemas.unset,
        localNote: typing.Union[MetaOapg.properties.localNote, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        localGenres: typing.Union[MetaOapg.properties.localGenres, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaFor200ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            *_args,
            identifier=identifier,
            title=title,
            contributor=contributor,
            subjects=subjects,
            classification=classification,
            publishers=publishers,
            date=date,
            language=language,
            edition=edition,
            source=source,
            note=note,
            format=format,
            musicInfo=musicInfo,
            digitalAccessAndLocations=digitalAccessAndLocations,
            description=description,
            related=related,
            work=work,
            editionCluster=editionCluster,
            totalEditions=totalEditions,
            database=database,
            localTitle=localTitle,
            localContributor=localContributor,
            localSubjects=localSubjects,
            localNote=localNote,
            localGenres=localGenres,
            _configuration=_configuration,
            **kwargs,
        )


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)


class SchemaFor400ResponseBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        
        class properties:
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def NOT_ACCEPTABLE(cls):
                    return cls("https://developer.api.oclc.org/errors/NOT_ACCEPTABLE")
                
                @schemas.classproperty
                def NOT_ALLOWED(cls):
                    return cls("https://developer.api.oclc.org/errors/NOT_ALLOWED")
                
                @schemas.classproperty
                def INTERAL_SERVER_ERROR(cls):
                    return cls("https://developer.api.oclc.org/errors/INTERAL_SERVER_ERROR")
                
                @schemas.classproperty
                def BAD_REQUEST(cls):
                    return cls("https://developer.api.oclc.org/errors/BAD_REQUEST")
                
                @schemas.classproperty
                def NOT_FOUND(cls):
                    return cls("https://developer.api.oclc.org/errors/NOT_FOUND")
                
                @schemas.classproperty
                def NOT_ELIGIBLE(cls):
                    return cls("https://developer.api.oclc.org/errors/NOT_ELIGIBLE")
                
                @schemas.classproperty
                def MISSING_QUERY_PARAMETER(cls):
                    return cls("https://developer.api.oclc.org/errors/MISSING_QUERY_PARAMETER")
                
                @schemas.classproperty
                def INVALID_QUERY_PARAMETERS(cls):
                    return cls("https://developer.api.oclc.org/errors/INVALID_QUERY_PARAMETERS")
                
                @schemas.classproperty
                def INVALID_QUERY_PARAMETER_VALUE(cls):
                    return cls("https://developer.api.oclc.org/errors/INVALID_QUERY_PARAMETER_VALUE")
                
                @schemas.classproperty
                def INVALID_QUERY_PARAMETER_NAME(cls):
                    return cls("https://developer.api.oclc.org/errors/INVALID_QUERY_PARAMETER_NAME")
                
                @schemas.classproperty
                def SYNTAX_ERROR(cls):
                    return cls("https://developer.api.oclc.org/errors/SYNTAX_ERROR")
                
                @schemas.classproperty
                def INVALID_DOCUMENT(cls):
                    return cls("https://developer.api.oclc.org/errors/INVALID_DOCUMENT")
                
                @schemas.classproperty
                def MISSING_ELEMENT(cls):
                    return cls("https://developer.api.oclc.org/errors/MISSING_ELEMENT")
                
                @schemas.classproperty
                def INVALID_ELEMENT_VALUE(cls):
                    return cls("https://developer.api.oclc.org/errors/INVALID_ELEMENT_VALUE")
            title = schemas.StrSchema
            instance = schemas.StrSchema
            detail = schemas.StrSchema
            
            
            class invalidParams(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                path = schemas.StrSchema
                                name = schemas.StrSchema
                                reason = schemas.StrSchema
                                __annotations__ = {
                                    "path": path,
                                    "name": name,
                                    "reason": reason,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["path"]) -> MetaOapg.properties.path: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["reason"]) -> MetaOapg.properties.reason: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["path", "name", "reason", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["path"]) -> typing.Union[MetaOapg.properties.path, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["reason"]) -> typing.Union[MetaOapg.properties.reason, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["path", "name", "reason", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            path: typing.Union[MetaOapg.properties.path, str, schemas.Unset] = schemas.unset,
                            name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                            reason: typing.Union[MetaOapg.properties.reason, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                path=path,
                                name=name,
                                reason=reason,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'invalidParams':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "type": type,
                "title": title,
                "instance": instance,
                "detail": detail,
                "invalidParams": invalidParams,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["instance"]) -> MetaOapg.properties.instance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["detail"]) -> MetaOapg.properties.detail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invalidParams"]) -> MetaOapg.properties.invalidParams: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "title", "instance", "detail", "invalidParams", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["instance"]) -> typing.Union[MetaOapg.properties.instance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["detail"]) -> typing.Union[MetaOapg.properties.detail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invalidParams"]) -> typing.Union[MetaOapg.properties.invalidParams, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "title", "instance", "detail", "invalidParams", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        instance: typing.Union[MetaOapg.properties.instance, str, schemas.Unset] = schemas.unset,
        detail: typing.Union[MetaOapg.properties.detail, str, schemas.Unset] = schemas.unset,
        invalidParams: typing.Union[MetaOapg.properties.invalidParams, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaFor400ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            *_args,
            type=type,
            title=title,
            instance=instance,
            detail=detail,
            invalidParams=invalidParams,
            _configuration=_configuration,
            **kwargs,
        )


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor400ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationJson),
    },
)


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        schemas.Unset,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
    content={
        'application/json': api_client.MediaType(),
    },
)


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        schemas.Unset,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
    content={
        'application/json': api_client.MediaType(),
    },
)


class SchemaFor404ResponseBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        
        class properties:
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def NOT_ACCEPTABLE(cls):
                    return cls("https://developer.api.oclc.org/errors/NOT_ACCEPTABLE")
                
                @schemas.classproperty
                def NOT_ALLOWED(cls):
                    return cls("https://developer.api.oclc.org/errors/NOT_ALLOWED")
                
                @schemas.classproperty
                def INTERAL_SERVER_ERROR(cls):
                    return cls("https://developer.api.oclc.org/errors/INTERAL_SERVER_ERROR")
                
                @schemas.classproperty
                def BAD_REQUEST(cls):
                    return cls("https://developer.api.oclc.org/errors/BAD_REQUEST")
                
                @schemas.classproperty
                def NOT_FOUND(cls):
                    return cls("https://developer.api.oclc.org/errors/NOT_FOUND")
                
                @schemas.classproperty
                def NOT_ELIGIBLE(cls):
                    return cls("https://developer.api.oclc.org/errors/NOT_ELIGIBLE")
                
                @schemas.classproperty
                def MISSING_QUERY_PARAMETER(cls):
                    return cls("https://developer.api.oclc.org/errors/MISSING_QUERY_PARAMETER")
                
                @schemas.classproperty
                def INVALID_QUERY_PARAMETERS(cls):
                    return cls("https://developer.api.oclc.org/errors/INVALID_QUERY_PARAMETERS")
                
                @schemas.classproperty
                def INVALID_QUERY_PARAMETER_VALUE(cls):
                    return cls("https://developer.api.oclc.org/errors/INVALID_QUERY_PARAMETER_VALUE")
                
                @schemas.classproperty
                def INVALID_QUERY_PARAMETER_NAME(cls):
                    return cls("https://developer.api.oclc.org/errors/INVALID_QUERY_PARAMETER_NAME")
                
                @schemas.classproperty
                def SYNTAX_ERROR(cls):
                    return cls("https://developer.api.oclc.org/errors/SYNTAX_ERROR")
                
                @schemas.classproperty
                def INVALID_DOCUMENT(cls):
                    return cls("https://developer.api.oclc.org/errors/INVALID_DOCUMENT")
                
                @schemas.classproperty
                def MISSING_ELEMENT(cls):
                    return cls("https://developer.api.oclc.org/errors/MISSING_ELEMENT")
                
                @schemas.classproperty
                def INVALID_ELEMENT_VALUE(cls):
                    return cls("https://developer.api.oclc.org/errors/INVALID_ELEMENT_VALUE")
            title = schemas.StrSchema
            instance = schemas.StrSchema
            detail = schemas.StrSchema
            
            
            class invalidParams(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                path = schemas.StrSchema
                                name = schemas.StrSchema
                                reason = schemas.StrSchema
                                __annotations__ = {
                                    "path": path,
                                    "name": name,
                                    "reason": reason,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["path"]) -> MetaOapg.properties.path: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["reason"]) -> MetaOapg.properties.reason: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["path", "name", "reason", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["path"]) -> typing.Union[MetaOapg.properties.path, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["reason"]) -> typing.Union[MetaOapg.properties.reason, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["path", "name", "reason", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            path: typing.Union[MetaOapg.properties.path, str, schemas.Unset] = schemas.unset,
                            name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                            reason: typing.Union[MetaOapg.properties.reason, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                path=path,
                                name=name,
                                reason=reason,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'invalidParams':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "type": type,
                "title": title,
                "instance": instance,
                "detail": detail,
                "invalidParams": invalidParams,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["instance"]) -> MetaOapg.properties.instance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["detail"]) -> MetaOapg.properties.detail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invalidParams"]) -> MetaOapg.properties.invalidParams: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "title", "instance", "detail", "invalidParams", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["instance"]) -> typing.Union[MetaOapg.properties.instance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["detail"]) -> typing.Union[MetaOapg.properties.detail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invalidParams"]) -> typing.Union[MetaOapg.properties.invalidParams, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "title", "instance", "detail", "invalidParams", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        instance: typing.Union[MetaOapg.properties.instance, str, schemas.Unset] = schemas.unset,
        detail: typing.Union[MetaOapg.properties.detail, str, schemas.Unset] = schemas.unset,
        invalidParams: typing.Union[MetaOapg.properties.invalidParams, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaFor404ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            *_args,
            type=type,
            title=title,
            instance=instance,
            detail=detail,
            invalidParams=invalidParams,
            _configuration=_configuration,
            **kwargs,
        )


@dataclass
class ApiResponseFor404(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor404ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_404 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor404,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor404ResponseBodyApplicationJson),
    },
)


class SchemaFor405ResponseBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        
        class properties:
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def NOT_ACCEPTABLE(cls):
                    return cls("https://developer.api.oclc.org/errors/NOT_ACCEPTABLE")
                
                @schemas.classproperty
                def NOT_ALLOWED(cls):
                    return cls("https://developer.api.oclc.org/errors/NOT_ALLOWED")
                
                @schemas.classproperty
                def INTERAL_SERVER_ERROR(cls):
                    return cls("https://developer.api.oclc.org/errors/INTERAL_SERVER_ERROR")
                
                @schemas.classproperty
                def BAD_REQUEST(cls):
                    return cls("https://developer.api.oclc.org/errors/BAD_REQUEST")
                
                @schemas.classproperty
                def NOT_FOUND(cls):
                    return cls("https://developer.api.oclc.org/errors/NOT_FOUND")
                
                @schemas.classproperty
                def NOT_ELIGIBLE(cls):
                    return cls("https://developer.api.oclc.org/errors/NOT_ELIGIBLE")
                
                @schemas.classproperty
                def MISSING_QUERY_PARAMETER(cls):
                    return cls("https://developer.api.oclc.org/errors/MISSING_QUERY_PARAMETER")
                
                @schemas.classproperty
                def INVALID_QUERY_PARAMETERS(cls):
                    return cls("https://developer.api.oclc.org/errors/INVALID_QUERY_PARAMETERS")
                
                @schemas.classproperty
                def INVALID_QUERY_PARAMETER_VALUE(cls):
                    return cls("https://developer.api.oclc.org/errors/INVALID_QUERY_PARAMETER_VALUE")
                
                @schemas.classproperty
                def INVALID_QUERY_PARAMETER_NAME(cls):
                    return cls("https://developer.api.oclc.org/errors/INVALID_QUERY_PARAMETER_NAME")
                
                @schemas.classproperty
                def SYNTAX_ERROR(cls):
                    return cls("https://developer.api.oclc.org/errors/SYNTAX_ERROR")
                
                @schemas.classproperty
                def INVALID_DOCUMENT(cls):
                    return cls("https://developer.api.oclc.org/errors/INVALID_DOCUMENT")
                
                @schemas.classproperty
                def MISSING_ELEMENT(cls):
                    return cls("https://developer.api.oclc.org/errors/MISSING_ELEMENT")
                
                @schemas.classproperty
                def INVALID_ELEMENT_VALUE(cls):
                    return cls("https://developer.api.oclc.org/errors/INVALID_ELEMENT_VALUE")
            title = schemas.StrSchema
            instance = schemas.StrSchema
            detail = schemas.StrSchema
            
            
            class invalidParams(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                path = schemas.StrSchema
                                name = schemas.StrSchema
                                reason = schemas.StrSchema
                                __annotations__ = {
                                    "path": path,
                                    "name": name,
                                    "reason": reason,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["path"]) -> MetaOapg.properties.path: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["reason"]) -> MetaOapg.properties.reason: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["path", "name", "reason", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["path"]) -> typing.Union[MetaOapg.properties.path, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["reason"]) -> typing.Union[MetaOapg.properties.reason, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["path", "name", "reason", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            path: typing.Union[MetaOapg.properties.path, str, schemas.Unset] = schemas.unset,
                            name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                            reason: typing.Union[MetaOapg.properties.reason, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                path=path,
                                name=name,
                                reason=reason,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'invalidParams':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "type": type,
                "title": title,
                "instance": instance,
                "detail": detail,
                "invalidParams": invalidParams,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["instance"]) -> MetaOapg.properties.instance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["detail"]) -> MetaOapg.properties.detail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invalidParams"]) -> MetaOapg.properties.invalidParams: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "title", "instance", "detail", "invalidParams", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["instance"]) -> typing.Union[MetaOapg.properties.instance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["detail"]) -> typing.Union[MetaOapg.properties.detail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invalidParams"]) -> typing.Union[MetaOapg.properties.invalidParams, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "title", "instance", "detail", "invalidParams", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        instance: typing.Union[MetaOapg.properties.instance, str, schemas.Unset] = schemas.unset,
        detail: typing.Union[MetaOapg.properties.detail, str, schemas.Unset] = schemas.unset,
        invalidParams: typing.Union[MetaOapg.properties.invalidParams, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaFor405ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            *_args,
            type=type,
            title=title,
            instance=instance,
            detail=detail,
            invalidParams=invalidParams,
            _configuration=_configuration,
            **kwargs,
        )


@dataclass
class ApiResponseFor405(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor405ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_405 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor405,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor405ResponseBodyApplicationJson),
    },
)


class SchemaFor406ResponseBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        
        class properties:
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def NOT_ACCEPTABLE(cls):
                    return cls("https://developer.api.oclc.org/errors/NOT_ACCEPTABLE")
                
                @schemas.classproperty
                def NOT_ALLOWED(cls):
                    return cls("https://developer.api.oclc.org/errors/NOT_ALLOWED")
                
                @schemas.classproperty
                def INTERAL_SERVER_ERROR(cls):
                    return cls("https://developer.api.oclc.org/errors/INTERAL_SERVER_ERROR")
                
                @schemas.classproperty
                def BAD_REQUEST(cls):
                    return cls("https://developer.api.oclc.org/errors/BAD_REQUEST")
                
                @schemas.classproperty
                def NOT_FOUND(cls):
                    return cls("https://developer.api.oclc.org/errors/NOT_FOUND")
                
                @schemas.classproperty
                def NOT_ELIGIBLE(cls):
                    return cls("https://developer.api.oclc.org/errors/NOT_ELIGIBLE")
                
                @schemas.classproperty
                def MISSING_QUERY_PARAMETER(cls):
                    return cls("https://developer.api.oclc.org/errors/MISSING_QUERY_PARAMETER")
                
                @schemas.classproperty
                def INVALID_QUERY_PARAMETERS(cls):
                    return cls("https://developer.api.oclc.org/errors/INVALID_QUERY_PARAMETERS")
                
                @schemas.classproperty
                def INVALID_QUERY_PARAMETER_VALUE(cls):
                    return cls("https://developer.api.oclc.org/errors/INVALID_QUERY_PARAMETER_VALUE")
                
                @schemas.classproperty
                def INVALID_QUERY_PARAMETER_NAME(cls):
                    return cls("https://developer.api.oclc.org/errors/INVALID_QUERY_PARAMETER_NAME")
                
                @schemas.classproperty
                def SYNTAX_ERROR(cls):
                    return cls("https://developer.api.oclc.org/errors/SYNTAX_ERROR")
                
                @schemas.classproperty
                def INVALID_DOCUMENT(cls):
                    return cls("https://developer.api.oclc.org/errors/INVALID_DOCUMENT")
                
                @schemas.classproperty
                def MISSING_ELEMENT(cls):
                    return cls("https://developer.api.oclc.org/errors/MISSING_ELEMENT")
                
                @schemas.classproperty
                def INVALID_ELEMENT_VALUE(cls):
                    return cls("https://developer.api.oclc.org/errors/INVALID_ELEMENT_VALUE")
            title = schemas.StrSchema
            instance = schemas.StrSchema
            detail = schemas.StrSchema
            
            
            class invalidParams(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                path = schemas.StrSchema
                                name = schemas.StrSchema
                                reason = schemas.StrSchema
                                __annotations__ = {
                                    "path": path,
                                    "name": name,
                                    "reason": reason,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["path"]) -> MetaOapg.properties.path: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["reason"]) -> MetaOapg.properties.reason: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["path", "name", "reason", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["path"]) -> typing.Union[MetaOapg.properties.path, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["reason"]) -> typing.Union[MetaOapg.properties.reason, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["path", "name", "reason", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            path: typing.Union[MetaOapg.properties.path, str, schemas.Unset] = schemas.unset,
                            name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                            reason: typing.Union[MetaOapg.properties.reason, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                path=path,
                                name=name,
                                reason=reason,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'invalidParams':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "type": type,
                "title": title,
                "instance": instance,
                "detail": detail,
                "invalidParams": invalidParams,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["instance"]) -> MetaOapg.properties.instance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["detail"]) -> MetaOapg.properties.detail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invalidParams"]) -> MetaOapg.properties.invalidParams: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "title", "instance", "detail", "invalidParams", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["instance"]) -> typing.Union[MetaOapg.properties.instance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["detail"]) -> typing.Union[MetaOapg.properties.detail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invalidParams"]) -> typing.Union[MetaOapg.properties.invalidParams, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "title", "instance", "detail", "invalidParams", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        instance: typing.Union[MetaOapg.properties.instance, str, schemas.Unset] = schemas.unset,
        detail: typing.Union[MetaOapg.properties.detail, str, schemas.Unset] = schemas.unset,
        invalidParams: typing.Union[MetaOapg.properties.invalidParams, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaFor406ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            *_args,
            type=type,
            title=title,
            instance=instance,
            detail=detail,
            invalidParams=invalidParams,
            _configuration=_configuration,
            **kwargs,
        )


@dataclass
class ApiResponseFor406(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor406ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_406 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor406,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor406ResponseBodyApplicationJson),
    },
)


class SchemaFor500ResponseBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        
        class properties:
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def NOT_ACCEPTABLE(cls):
                    return cls("https://developer.api.oclc.org/errors/NOT_ACCEPTABLE")
                
                @schemas.classproperty
                def NOT_ALLOWED(cls):
                    return cls("https://developer.api.oclc.org/errors/NOT_ALLOWED")
                
                @schemas.classproperty
                def INTERAL_SERVER_ERROR(cls):
                    return cls("https://developer.api.oclc.org/errors/INTERAL_SERVER_ERROR")
                
                @schemas.classproperty
                def BAD_REQUEST(cls):
                    return cls("https://developer.api.oclc.org/errors/BAD_REQUEST")
                
                @schemas.classproperty
                def NOT_FOUND(cls):
                    return cls("https://developer.api.oclc.org/errors/NOT_FOUND")
                
                @schemas.classproperty
                def NOT_ELIGIBLE(cls):
                    return cls("https://developer.api.oclc.org/errors/NOT_ELIGIBLE")
                
                @schemas.classproperty
                def MISSING_QUERY_PARAMETER(cls):
                    return cls("https://developer.api.oclc.org/errors/MISSING_QUERY_PARAMETER")
                
                @schemas.classproperty
                def INVALID_QUERY_PARAMETERS(cls):
                    return cls("https://developer.api.oclc.org/errors/INVALID_QUERY_PARAMETERS")
                
                @schemas.classproperty
                def INVALID_QUERY_PARAMETER_VALUE(cls):
                    return cls("https://developer.api.oclc.org/errors/INVALID_QUERY_PARAMETER_VALUE")
                
                @schemas.classproperty
                def INVALID_QUERY_PARAMETER_NAME(cls):
                    return cls("https://developer.api.oclc.org/errors/INVALID_QUERY_PARAMETER_NAME")
                
                @schemas.classproperty
                def SYNTAX_ERROR(cls):
                    return cls("https://developer.api.oclc.org/errors/SYNTAX_ERROR")
                
                @schemas.classproperty
                def INVALID_DOCUMENT(cls):
                    return cls("https://developer.api.oclc.org/errors/INVALID_DOCUMENT")
                
                @schemas.classproperty
                def MISSING_ELEMENT(cls):
                    return cls("https://developer.api.oclc.org/errors/MISSING_ELEMENT")
                
                @schemas.classproperty
                def INVALID_ELEMENT_VALUE(cls):
                    return cls("https://developer.api.oclc.org/errors/INVALID_ELEMENT_VALUE")
            title = schemas.StrSchema
            instance = schemas.StrSchema
            detail = schemas.StrSchema
            
            
            class invalidParams(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                path = schemas.StrSchema
                                name = schemas.StrSchema
                                reason = schemas.StrSchema
                                __annotations__ = {
                                    "path": path,
                                    "name": name,
                                    "reason": reason,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["path"]) -> MetaOapg.properties.path: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["reason"]) -> MetaOapg.properties.reason: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["path", "name", "reason", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["path"]) -> typing.Union[MetaOapg.properties.path, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["reason"]) -> typing.Union[MetaOapg.properties.reason, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["path", "name", "reason", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            path: typing.Union[MetaOapg.properties.path, str, schemas.Unset] = schemas.unset,
                            name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                            reason: typing.Union[MetaOapg.properties.reason, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                path=path,
                                name=name,
                                reason=reason,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'invalidParams':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "type": type,
                "title": title,
                "instance": instance,
                "detail": detail,
                "invalidParams": invalidParams,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["instance"]) -> MetaOapg.properties.instance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["detail"]) -> MetaOapg.properties.detail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invalidParams"]) -> MetaOapg.properties.invalidParams: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "title", "instance", "detail", "invalidParams", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["instance"]) -> typing.Union[MetaOapg.properties.instance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["detail"]) -> typing.Union[MetaOapg.properties.detail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invalidParams"]) -> typing.Union[MetaOapg.properties.invalidParams, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "title", "instance", "detail", "invalidParams", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        instance: typing.Union[MetaOapg.properties.instance, str, schemas.Unset] = schemas.unset,
        detail: typing.Union[MetaOapg.properties.detail, str, schemas.Unset] = schemas.unset,
        invalidParams: typing.Union[MetaOapg.properties.invalidParams, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaFor500ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            *_args,
            type=type,
            title=title,
            instance=instance,
            detail=detail,
            invalidParams=invalidParams,
            _configuration=_configuration,
            **kwargs,
        )


@dataclass
class ApiResponseFor500(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor500ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_500 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor500,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationJson),
    },
)
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):
    @typing.overload
    def _retrieve_bib_oapg(
        self,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def _retrieve_bib_oapg(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def _retrieve_bib_oapg(
        self,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def _retrieve_bib_oapg(
        self,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        Retrieve specific Bibliographic Resource
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestHeaderParams, header_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value

        _path_params = {}
        for parameter in (
            request_path_oclc_number,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)

        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)

        _headers = HTTPHeaderDict()
        for parameter in (
            request_header_accept,
        ):
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method='get'.upper(),
            headers=_headers,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(
                status=response.status,
                reason=response.reason,
                api_response=api_response
            )

        return api_response


class RetrieveBib(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def retrieve_bib(
        self,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def retrieve_bib(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def retrieve_bib(
        self,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def retrieve_bib(
        self,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._retrieve_bib_oapg(
            header_params=header_params,
            path_params=path_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def get(
        self,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def get(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def get(
        self,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def get(
        self,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        path_params: RequestPathParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._retrieve_bib_oapg(
            header_params=header_params,
            path_params=path_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


